Search.setIndex({"docnames": ["_autosummary/sdynpy", "_autosummary/sdynpy.core", "_autosummary/sdynpy.core.sdynpy_array", "_autosummary/sdynpy.core.sdynpy_array.SdynpyArray", "_autosummary/sdynpy.core.sdynpy_colors", "_autosummary/sdynpy.core.sdynpy_coordinate", "_autosummary/sdynpy.core.sdynpy_coordinate.CoordinateArray", "_autosummary/sdynpy.core.sdynpy_coordinate.coordinate_array", "_autosummary/sdynpy.core.sdynpy_coordinate.create_coordinate_string", "_autosummary/sdynpy.core.sdynpy_coordinate.from_matlab_cellstr", "_autosummary/sdynpy.core.sdynpy_coordinate.from_nodelist", "_autosummary/sdynpy.core.sdynpy_coordinate.outer_product", "_autosummary/sdynpy.core.sdynpy_coordinate.parse_coordinate_string", "_autosummary/sdynpy.core.sdynpy_data", "_autosummary/sdynpy.core.sdynpy_data.AbscissaIndexExtractor", "_autosummary/sdynpy.core.sdynpy_data.AbscissaValueExtractor", "_autosummary/sdynpy.core.sdynpy_data.CPSDPlot", "_autosummary/sdynpy.core.sdynpy_data.CoherenceArray", "_autosummary/sdynpy.core.sdynpy_data.ComplexType", "_autosummary/sdynpy.core.sdynpy_data.CorrelationArray", "_autosummary/sdynpy.core.sdynpy_data.DecayedSineTable", "_autosummary/sdynpy.core.sdynpy_data.FunctionTypes", "_autosummary/sdynpy.core.sdynpy_data.GUIPlot", "_autosummary/sdynpy.core.sdynpy_data.ImpulseResponseFunctionArray", "_autosummary/sdynpy.core.sdynpy_data.MPLCanvas", "_autosummary/sdynpy.core.sdynpy_data.MPLMultiCanvas", "_autosummary/sdynpy.core.sdynpy_data.ModeIndicatorFunctionArray", "_autosummary/sdynpy.core.sdynpy_data.MultipleCoherenceArray", "_autosummary/sdynpy.core.sdynpy_data.NDDataArray", "_autosummary/sdynpy.core.sdynpy_data.PowerSpectralDensityArray", "_autosummary/sdynpy.core.sdynpy_data.PowerSpectrumArray", "_autosummary/sdynpy.core.sdynpy_data.ShockResponseSpectrumArray", "_autosummary/sdynpy.core.sdynpy_data.SpecificDataType", "_autosummary/sdynpy.core.sdynpy_data.SpectrumArray", "_autosummary/sdynpy.core.sdynpy_data.TimeHistoryArray", "_autosummary/sdynpy.core.sdynpy_data.TransferFunctionArray", "_autosummary/sdynpy.core.sdynpy_data.TransmissibilityArray", "_autosummary/sdynpy.core.sdynpy_data.TypeQual", "_autosummary/sdynpy.core.sdynpy_data.data_array", "_autosummary/sdynpy.core.sdynpy_data.decayed_sine_table", "_autosummary/sdynpy.core.sdynpy_data.frf_from_time_data", "_autosummary/sdynpy.core.sdynpy_data.from_imat_struct", "_autosummary/sdynpy.core.sdynpy_data.from_uff", "_autosummary/sdynpy.core.sdynpy_data.from_unv", "_autosummary/sdynpy.core.sdynpy_data.join", "_autosummary/sdynpy.core.sdynpy_data.load", "_autosummary/sdynpy.core.sdynpy_geometry", "_autosummary/sdynpy.core.sdynpy_geometry.CoordinateSystemArray", "_autosummary/sdynpy.core.sdynpy_geometry.DeflectionShapePlotter", "_autosummary/sdynpy.core.sdynpy_geometry.ElementArray", "_autosummary/sdynpy.core.sdynpy_geometry.Geometry", "_autosummary/sdynpy.core.sdynpy_geometry.GeometryPlotter", "_autosummary/sdynpy.core.sdynpy_geometry.NodeArray", "_autosummary/sdynpy.core.sdynpy_geometry.ShapePlotter", "_autosummary/sdynpy.core.sdynpy_geometry.TracelineArray", "_autosummary/sdynpy.core.sdynpy_geometry.TransientPlotter", "_autosummary/sdynpy.core.sdynpy_geometry.coordinate_system_array", "_autosummary/sdynpy.core.sdynpy_geometry.element_array", "_autosummary/sdynpy.core.sdynpy_geometry.from_excel_template", "_autosummary/sdynpy.core.sdynpy_geometry.from_exodus", "_autosummary/sdynpy.core.sdynpy_geometry.from_imat_struct", "_autosummary/sdynpy.core.sdynpy_geometry.from_uff", "_autosummary/sdynpy.core.sdynpy_geometry.from_unv", "_autosummary/sdynpy.core.sdynpy_geometry.global_coord", "_autosummary/sdynpy.core.sdynpy_geometry.global_deflection", "_autosummary/sdynpy.core.sdynpy_geometry.id_map", "_autosummary/sdynpy.core.sdynpy_geometry.load", "_autosummary/sdynpy.core.sdynpy_geometry.local_coord", "_autosummary/sdynpy.core.sdynpy_geometry.node_array", "_autosummary/sdynpy.core.sdynpy_geometry.split_list", "_autosummary/sdynpy.core.sdynpy_geometry.traceline_array", "_autosummary/sdynpy.core.sdynpy_geometry.write_excel_template", "_autosummary/sdynpy.core.sdynpy_matrix", "_autosummary/sdynpy.core.sdynpy_matrix.Matrix", "_autosummary/sdynpy.core.sdynpy_matrix.matrix", "_autosummary/sdynpy.core.sdynpy_shape", "_autosummary/sdynpy.core.sdynpy_shape.ShapeArray", "_autosummary/sdynpy.core.sdynpy_shape.ShapeCommentTable", "_autosummary/sdynpy.core.sdynpy_shape.concatenate_dofs", "_autosummary/sdynpy.core.sdynpy_shape.from_exodus", "_autosummary/sdynpy.core.sdynpy_shape.from_imat_struct", "_autosummary/sdynpy.core.sdynpy_shape.from_unv", "_autosummary/sdynpy.core.sdynpy_shape.mac", "_autosummary/sdynpy.core.sdynpy_shape.overlay_shapes", "_autosummary/sdynpy.core.sdynpy_shape.rigid_body_check", "_autosummary/sdynpy.core.sdynpy_shape.rigid_body_error", "_autosummary/sdynpy.core.sdynpy_shape.rigid_body_fix_node_orientation", "_autosummary/sdynpy.core.sdynpy_shape.shape_alignment", "_autosummary/sdynpy.core.sdynpy_shape.shape_array", "_autosummary/sdynpy.core.sdynpy_shape.shape_comparison_table", "_autosummary/sdynpy.core.sdynpy_system", "_autosummary/sdynpy.core.sdynpy_system.System", "_autosummary/sdynpy.core.sdynpy_system.substructure_by_position", "_autosummary/sdynpy.demo", "_autosummary/sdynpy.demo.beam_airplane", "_autosummary/sdynpy.demo.beam_airplane.create_models", "_autosummary/sdynpy.demo.beam_plate", "_autosummary/sdynpy.demo.beam_plate.create_models", "_autosummary/sdynpy.doc", "_autosummary/sdynpy.doc.sdynpy_latex", "_autosummary/sdynpy.doc.sdynpy_latex.create_latex_summary", "_autosummary/sdynpy.doc.sdynpy_latex.figure", "_autosummary/sdynpy.doc.sdynpy_latex.table", "_autosummary/sdynpy.doc.sdynpy_ppt", "_autosummary/sdynpy.doc.sdynpy_ppt.add_geometry_overview_slide", "_autosummary/sdynpy.doc.sdynpy_ppt.add_section_header_slide", "_autosummary/sdynpy.doc.sdynpy_ppt.add_shape_animation_slides", "_autosummary/sdynpy.doc.sdynpy_ppt.add_shape_comparison_animation_slides", "_autosummary/sdynpy.doc.sdynpy_ppt.add_shape_comparison_overview_slide", "_autosummary/sdynpy.doc.sdynpy_ppt.add_shape_overview_slide", "_autosummary/sdynpy.doc.sdynpy_ppt.add_title_slide", "_autosummary/sdynpy.doc.sdynpy_ppt.create_summary_pptx", "_autosummary/sdynpy.doc.sdynpy_ppt.position_placeholder", "_autosummary/sdynpy.fem", "_autosummary/sdynpy.fem.sdynpy_beam", "_autosummary/sdynpy.fem.sdynpy_beam.beamkm", "_autosummary/sdynpy.fem.sdynpy_beam.beamkm_2d", "_autosummary/sdynpy.fem.sdynpy_beam.rect_beam_props", "_autosummary/sdynpy.fem.sdynpy_dof", "_autosummary/sdynpy.fem.sdynpy_dof.by_condition_number", "_autosummary/sdynpy.fem.sdynpy_dof.by_effective_independence", "_autosummary/sdynpy.fem.sdynpy_exodus", "_autosummary/sdynpy.fem.sdynpy_exodus.Exodus", "_autosummary/sdynpy.fem.sdynpy_exodus.ExodusError", "_autosummary/sdynpy.fem.sdynpy_exodus.ExodusInMemory", "_autosummary/sdynpy.fem.sdynpy_exodus.extract_sharp_edges", "_autosummary/sdynpy.fem.sdynpy_exodus.face_connectivity", "_autosummary/sdynpy.fem.sdynpy_exodus.mesh_triangulation_array", "_autosummary/sdynpy.fem.sdynpy_exodus.reduce_exodus_to_surfaces", "_autosummary/sdynpy.fem.sdynpy_exodus.subfield", "_autosummary/sdynpy.fem.sdynpy_shaker", "_autosummary/sdynpy.fem.sdynpy_shaker.Shaker4DoF", "_autosummary/sdynpy.fileio", "_autosummary/sdynpy.fileio.sdynpy_rattlesnake", "_autosummary/sdynpy.fileio.sdynpy_rattlesnake.create_synthetic_test", "_autosummary/sdynpy.fileio.sdynpy_rattlesnake.read_modal_data", "_autosummary/sdynpy.fileio.sdynpy_rattlesnake.read_random_spectral_data", "_autosummary/sdynpy.fileio.sdynpy_rattlesnake.read_rattlesnake_output", "_autosummary/sdynpy.fileio.sdynpy_rattlesnake.read_system_id_data", "_autosummary/sdynpy.fileio.sdynpy_rattlesnake.read_transient_control_data", "_autosummary/sdynpy.fileio.sdynpy_tshaker", "_autosummary/sdynpy.fileio.sdynpy_tshaker.read_mat_random", "_autosummary/sdynpy.fileio.sdynpy_tshaker.read_mat_shock", "_autosummary/sdynpy.fileio.sdynpy_tshaker.read_mat_time_history", "_autosummary/sdynpy.fileio.sdynpy_tshaker.read_tdms", "_autosummary/sdynpy.fileio.sdynpy_uff", "_autosummary/sdynpy.fileio.sdynpy_uff.UFFReadError", "_autosummary/sdynpy.fileio.sdynpy_uff.parse_uff_line", "_autosummary/sdynpy.fileio.sdynpy_uff.parse_uff_lines", "_autosummary/sdynpy.fileio.sdynpy_uff.readuff", "_autosummary/sdynpy.fileio.sdynpy_uff.readunv", "_autosummary/sdynpy.fileio.sdynpy_uff.write_uff_line", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_151", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_151.Sdynpy_UFF_Dataset_151", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_151.read", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_164", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_164.Sdynpy_UFF_Dataset_164", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_164.read", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_1858", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_1858.Sdynpy_UFF_Dataset_1858", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_1858.is_abscissa_even", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_1858.read", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2400", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2400.Sdynpy_UFF_Dataset_2400", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2400.read", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2411", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2411.Sdynpy_UFF_Dataset_2411", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2411.read", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2412", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2412.Sdynpy_UFF_Dataset_2412", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2412.read", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2420", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2420.Sdynpy_UFF_Dataset_2420", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2420.read", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55.Sdynpy_UFF_Dataset_55", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55.read", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_58", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_58.Sdynpy_UFF_Dataset_58", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_58.is_abscissa_even", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_58.read", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_82", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_82.Sdynpy_UFF_Dataset_82", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_82.read", "_autosummary/sdynpy.fileio.sdynpy_vic", "_autosummary/sdynpy.fileio.sdynpy_vic.camera_matrix_from_vic_parameters", "_autosummary/sdynpy.fileio.sdynpy_vic.extract_vic_cal_parameters", "_autosummary/sdynpy.fileio.sdynpy_vic.get_vic_camera_parameters", "_autosummary/sdynpy.fileio.sdynpy_vic.matrix_from_bryant_angles", "_autosummary/sdynpy.fileio.sdynpy_vic.read_vic3D_mat_files", "_autosummary/sdynpy.fileio.sdynpy_vic.vic_angles_from_matrix", "_autosummary/sdynpy.modal", "_autosummary/sdynpy.modal.sdynpy_ccmif", "_autosummary/sdynpy.modal.sdynpy_ccmif.ColoredCMIF", "_autosummary/sdynpy.modal.sdynpy_ccmif.PropertiesDialog", "_autosummary/sdynpy.modal.sdynpy_modal_test", "_autosummary/sdynpy.modal.sdynpy_modal_test.ModalTest", "_autosummary/sdynpy.modal.sdynpy_modal_test.read_modal_fit_data", "_autosummary/sdynpy.modal.sdynpy_modeshape", "_autosummary/sdynpy.modal.sdynpy_modeshape.ShapeSelection", "_autosummary/sdynpy.modal.sdynpy_modeshape.compute_residues", "_autosummary/sdynpy.modal.sdynpy_modeshape.compute_shapes", "_autosummary/sdynpy.modal.sdynpy_modeshape.compute_shapes_multireference", "_autosummary/sdynpy.modal.sdynpy_modeshape.generate_kernel_complex", "_autosummary/sdynpy.modal.sdynpy_modeshape.generate_kernel_real", "_autosummary/sdynpy.modal.sdynpy_modeshape.stack_and_lstsq", "_autosummary/sdynpy.modal.sdynpy_polypy", "_autosummary/sdynpy.modal.sdynpy_polypy.PolyPy", "_autosummary/sdynpy.modal.sdynpy_polypy.PolyPy_GUI", "_autosummary/sdynpy.modal.sdynpy_polypy.PolyPy_Stability", "_autosummary/sdynpy.modal.sdynpy_signal_processing_gui", "_autosummary/sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI", "_autosummary/sdynpy.modal.sdynpy_smac", "_autosummary/sdynpy.modal.sdynpy_smac.AddRootDialog", "_autosummary/sdynpy.modal.sdynpy_smac.AutoFitTypes", "_autosummary/sdynpy.modal.sdynpy_smac.ConvergenceException", "_autosummary/sdynpy.modal.sdynpy_smac.SMAC", "_autosummary/sdynpy.modal.sdynpy_smac.SMAC_GUI", "_autosummary/sdynpy.modal.sdynpy_smac.correlation_coefficient", "_autosummary/sdynpy.signal_processing", "_autosummary/sdynpy.signal_processing.sdynpy_camera", "_autosummary/sdynpy.signal_processing.sdynpy_camera.calibration_linear_estimate", "_autosummary/sdynpy.signal_processing.sdynpy_camera.camera_derivative_matrix", "_autosummary/sdynpy.signal_processing.sdynpy_camera.camera_matrix_from_image", "_autosummary/sdynpy.signal_processing.sdynpy_camera.compute_pixel_displacement", "_autosummary/sdynpy.signal_processing.sdynpy_camera.compute_pixel_position", "_autosummary/sdynpy.signal_processing.sdynpy_camera.decomposeP", "_autosummary/sdynpy.signal_processing.sdynpy_camera.distort_points", "_autosummary/sdynpy.signal_processing.sdynpy_camera.homogeneous_coordinates", "_autosummary/sdynpy.signal_processing.sdynpy_camera.optimize_calibration", "_autosummary/sdynpy.signal_processing.sdynpy_camera.point_on_pixel", "_autosummary/sdynpy.signal_processing.sdynpy_camera.reconstruct_scene_from_calibration_parameters", "_autosummary/sdynpy.signal_processing.sdynpy_camera.unhomogeneous_coordinates", "_autosummary/sdynpy.signal_processing.sdynpy_complex", "_autosummary/sdynpy.signal_processing.sdynpy_complex.collapse_complex_to_real", "_autosummary/sdynpy.signal_processing.sdynpy_correlation", "_autosummary/sdynpy.signal_processing.sdynpy_correlation.frac", "_autosummary/sdynpy.signal_processing.sdynpy_correlation.mac", "_autosummary/sdynpy.signal_processing.sdynpy_correlation.matrix_plot", "_autosummary/sdynpy.signal_processing.sdynpy_correlation.msf", "_autosummary/sdynpy.signal_processing.sdynpy_correlation.orthog", "_autosummary/sdynpy.signal_processing.sdynpy_correlation.trac", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.cpsd", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.cpsd_autospectra", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.cpsd_coherence", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.cpsd_from_coh_phs", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.cpsd_phase", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.cpsd_to_time_history", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.dB_pow", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.db2scale", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.match_coherence_phase", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.nth_octave_freqs", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.plot_asds", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.plot_cpsd_error", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.rms", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.rms_csd", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.shaped_psd", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.trace", "_autosummary/sdynpy.signal_processing.sdynpy_frf", "_autosummary/sdynpy.signal_processing.sdynpy_frf.delay_signal", "_autosummary/sdynpy.signal_processing.sdynpy_frf.fft2frf", "_autosummary/sdynpy.signal_processing.sdynpy_frf.modes2frf", "_autosummary/sdynpy.signal_processing.sdynpy_frf.plot", "_autosummary/sdynpy.signal_processing.sdynpy_frf.sysmat2frf", "_autosummary/sdynpy.signal_processing.sdynpy_frf.timedata2frf", "_autosummary/sdynpy.signal_processing.sdynpy_frf_inverse", "_autosummary/sdynpy.signal_processing.sdynpy_frf_inverse.compute_tikhonov_modified_singular_values", "_autosummary/sdynpy.signal_processing.sdynpy_frf_inverse.frf_inverse", "_autosummary/sdynpy.signal_processing.sdynpy_frf_inverse.pinv_by_tikhonov", "_autosummary/sdynpy.signal_processing.sdynpy_frf_inverse.pinv_by_truncation", "_autosummary/sdynpy.signal_processing.sdynpy_generator", "_autosummary/sdynpy.signal_processing.sdynpy_generator.burst_random", "_autosummary/sdynpy.signal_processing.sdynpy_generator.chirp", "_autosummary/sdynpy.signal_processing.sdynpy_generator.pseudorandom", "_autosummary/sdynpy.signal_processing.sdynpy_generator.pulse", "_autosummary/sdynpy.signal_processing.sdynpy_generator.ramp_envelope", "_autosummary/sdynpy.signal_processing.sdynpy_generator.random", "_autosummary/sdynpy.signal_processing.sdynpy_generator.sine", "_autosummary/sdynpy.signal_processing.sdynpy_generator.sine_sweep", "_autosummary/sdynpy.signal_processing.sdynpy_geometry_fitting", "_autosummary/sdynpy.signal_processing.sdynpy_geometry_fitting.cone_error_fn_fixed_angle", "_autosummary/sdynpy.signal_processing.sdynpy_geometry_fitting.cone_error_fn_free_angle", "_autosummary/sdynpy.signal_processing.sdynpy_geometry_fitting.cone_fit", "_autosummary/sdynpy.signal_processing.sdynpy_geometry_fitting.create_cone", "_autosummary/sdynpy.signal_processing.sdynpy_geometry_fitting.cylinder_fit", "_autosummary/sdynpy.signal_processing.sdynpy_geometry_fitting.distance_point_line", "_autosummary/sdynpy.signal_processing.sdynpy_geometry_fitting.distance_point_plane", "_autosummary/sdynpy.signal_processing.sdynpy_geometry_fitting.fit_cone_fixed_angle", "_autosummary/sdynpy.signal_processing.sdynpy_geometry_fitting.fit_cylinder", "_autosummary/sdynpy.signal_processing.sdynpy_geometry_fitting.fit_line_point_cloud", "_autosummary/sdynpy.signal_processing.sdynpy_harmonic", "_autosummary/sdynpy.signal_processing.sdynpy_harmonic.harmonic_mag_phase", "_autosummary/sdynpy.signal_processing.sdynpy_integration", "_autosummary/sdynpy.signal_processing.sdynpy_integration.MCK_incomplete_to_StateSpace", "_autosummary/sdynpy.signal_processing.sdynpy_integration.MCK_to_StateSpace", "_autosummary/sdynpy.signal_processing.sdynpy_integration.frequency_domain_differentiation", "_autosummary/sdynpy.signal_processing.sdynpy_integration.integrate_MCK", "_autosummary/sdynpy.signal_processing.sdynpy_integration.integrate_modes", "_autosummary/sdynpy.signal_processing.sdynpy_integration.modal_parameters_to_MCK", "_autosummary/sdynpy.signal_processing.sdynpy_lrm", "_autosummary/sdynpy.signal_processing.sdynpy_lrm.frf_local_model", "_autosummary/sdynpy.signal_processing.sdynpy_rotation", "_autosummary/sdynpy.signal_processing.sdynpy_rotation.R", "_autosummary/sdynpy.signal_processing.sdynpy_rotation.cross_mat", "_autosummary/sdynpy.signal_processing.sdynpy_rotation.cross_mat_vectorized", "_autosummary/sdynpy.signal_processing.sdynpy_rotation.lstsq_rigid_transform", "_autosummary/sdynpy.signal_processing.sdynpy_rotation.matrix_to_rodrigues", "_autosummary/sdynpy.signal_processing.sdynpy_rotation.quaternion_to_rotation_matrix", "_autosummary/sdynpy.signal_processing.sdynpy_rotation.rodrigues_to_matrix", "_autosummary/sdynpy.signal_processing.sdynpy_srs", "_autosummary/sdynpy.signal_processing.sdynpy_srs.loginterp", "_autosummary/sdynpy.signal_processing.sdynpy_srs.octspace", "_autosummary/sdynpy.signal_processing.sdynpy_srs.optimization_callback", "_autosummary/sdynpy.signal_processing.sdynpy_srs.optimization_error_function", "_autosummary/sdynpy.signal_processing.sdynpy_srs.sdof_filter", "_autosummary/sdynpy.signal_processing.sdynpy_srs.sdof_free_decay_peak_response", "_autosummary/sdynpy.signal_processing.sdynpy_srs.sdof_ramp_invariant_filter_weights", "_autosummary/sdynpy.signal_processing.sdynpy_srs.srs", "_autosummary/sdynpy.signal_processing.sdynpy_srs.sum_decayed_sines", "_autosummary/sdynpy.signal_processing.sdynpy_srs.sum_decayed_sines_compensating_pulse_parameters", "_autosummary/sdynpy.signal_processing.sdynpy_srs.sum_decayed_sines_displacement_velocity", "_autosummary/sdynpy.signal_processing.sdynpy_srs.sum_decayed_sines_minimize", "_autosummary/sdynpy.signal_processing.sdynpy_srs.sum_decayed_sines_reconstruction", "_autosummary/sdynpy.signal_processing.sdynpy_srs.sum_decayed_sines_reconstruction_with_compensation", "bibliography", "example_problems/airplane_modal_test", "example_problems/craig_bampton_substructuring", "example_problems/mimo_random_vibration_control", "example_problems/model_reduction/model_reduction", "example_problems/rattlesnake_demonstration", "example_problems/transient_fem_analysis", "example_problems/transmission_simulator", "examples", "index", "modal_tutorials", "modal_tutorials/Modal_01_What_is_Modal_Analysis/Modal_01_What_is_Modal_Analysis", "modal_tutorials/Modal_02_Basics_of_Vibrations/Modal_02_Basics_of_Vibrations", "modal_tutorials/Modal_03_Multi_DoF_Vibrations/Modal_03_Multi_DoF_Vibrations", "modal_tutorials/Modal_04_Modal_Analysis/Modal_04_Modal_Analysis", "modal_tutorials/Modal_05_Experimental_Modal_Analysis/Modal_05_Experimental_Modal_Analysis", "modal_tutorials/Modal_05_Experimental_Modal_Analysis/Modal_05a_Computing_FRF_from_Time_Data", "modal_tutorials/Modal_05_Experimental_Modal_Analysis/Modal_05b_Types_of_Excitation", "modal_tutorials/Modal_05_Experimental_Modal_Analysis/Modal_05c_Selecting_Response_and_Measurement_DoFs", "modal_tutorials/Modal_05_Experimental_Modal_Analysis/Modal_05d_Data_Quality_Checks", "modal_tutorials/Modal_05_Experimental_Modal_Analysis/Modal_05e_Fitting_Modes_to_FRF", "modal_tutorials/Modal_05_Experimental_Modal_Analysis/Modal_05f_Comparing_Test_and_Analysis", "modal_tutorials/Modal_06_Complex_Modes/Modal_06_Complex_Modes", "modules", "sdynpy_showcase", "usage"], "filenames": ["_autosummary/sdynpy.rst", "_autosummary/sdynpy.core.rst", "_autosummary/sdynpy.core.sdynpy_array.rst", "_autosummary/sdynpy.core.sdynpy_array.SdynpyArray.rst", "_autosummary/sdynpy.core.sdynpy_colors.rst", "_autosummary/sdynpy.core.sdynpy_coordinate.rst", "_autosummary/sdynpy.core.sdynpy_coordinate.CoordinateArray.rst", "_autosummary/sdynpy.core.sdynpy_coordinate.coordinate_array.rst", "_autosummary/sdynpy.core.sdynpy_coordinate.create_coordinate_string.rst", "_autosummary/sdynpy.core.sdynpy_coordinate.from_matlab_cellstr.rst", "_autosummary/sdynpy.core.sdynpy_coordinate.from_nodelist.rst", "_autosummary/sdynpy.core.sdynpy_coordinate.outer_product.rst", "_autosummary/sdynpy.core.sdynpy_coordinate.parse_coordinate_string.rst", "_autosummary/sdynpy.core.sdynpy_data.rst", "_autosummary/sdynpy.core.sdynpy_data.AbscissaIndexExtractor.rst", "_autosummary/sdynpy.core.sdynpy_data.AbscissaValueExtractor.rst", "_autosummary/sdynpy.core.sdynpy_data.CPSDPlot.rst", "_autosummary/sdynpy.core.sdynpy_data.CoherenceArray.rst", "_autosummary/sdynpy.core.sdynpy_data.ComplexType.rst", "_autosummary/sdynpy.core.sdynpy_data.CorrelationArray.rst", "_autosummary/sdynpy.core.sdynpy_data.DecayedSineTable.rst", "_autosummary/sdynpy.core.sdynpy_data.FunctionTypes.rst", "_autosummary/sdynpy.core.sdynpy_data.GUIPlot.rst", "_autosummary/sdynpy.core.sdynpy_data.ImpulseResponseFunctionArray.rst", "_autosummary/sdynpy.core.sdynpy_data.MPLCanvas.rst", "_autosummary/sdynpy.core.sdynpy_data.MPLMultiCanvas.rst", "_autosummary/sdynpy.core.sdynpy_data.ModeIndicatorFunctionArray.rst", "_autosummary/sdynpy.core.sdynpy_data.MultipleCoherenceArray.rst", "_autosummary/sdynpy.core.sdynpy_data.NDDataArray.rst", "_autosummary/sdynpy.core.sdynpy_data.PowerSpectralDensityArray.rst", "_autosummary/sdynpy.core.sdynpy_data.PowerSpectrumArray.rst", "_autosummary/sdynpy.core.sdynpy_data.ShockResponseSpectrumArray.rst", "_autosummary/sdynpy.core.sdynpy_data.SpecificDataType.rst", "_autosummary/sdynpy.core.sdynpy_data.SpectrumArray.rst", "_autosummary/sdynpy.core.sdynpy_data.TimeHistoryArray.rst", "_autosummary/sdynpy.core.sdynpy_data.TransferFunctionArray.rst", "_autosummary/sdynpy.core.sdynpy_data.TransmissibilityArray.rst", "_autosummary/sdynpy.core.sdynpy_data.TypeQual.rst", "_autosummary/sdynpy.core.sdynpy_data.data_array.rst", "_autosummary/sdynpy.core.sdynpy_data.decayed_sine_table.rst", "_autosummary/sdynpy.core.sdynpy_data.frf_from_time_data.rst", "_autosummary/sdynpy.core.sdynpy_data.from_imat_struct.rst", "_autosummary/sdynpy.core.sdynpy_data.from_uff.rst", "_autosummary/sdynpy.core.sdynpy_data.from_unv.rst", "_autosummary/sdynpy.core.sdynpy_data.join.rst", "_autosummary/sdynpy.core.sdynpy_data.load.rst", "_autosummary/sdynpy.core.sdynpy_geometry.rst", "_autosummary/sdynpy.core.sdynpy_geometry.CoordinateSystemArray.rst", "_autosummary/sdynpy.core.sdynpy_geometry.DeflectionShapePlotter.rst", "_autosummary/sdynpy.core.sdynpy_geometry.ElementArray.rst", "_autosummary/sdynpy.core.sdynpy_geometry.Geometry.rst", "_autosummary/sdynpy.core.sdynpy_geometry.GeometryPlotter.rst", "_autosummary/sdynpy.core.sdynpy_geometry.NodeArray.rst", "_autosummary/sdynpy.core.sdynpy_geometry.ShapePlotter.rst", "_autosummary/sdynpy.core.sdynpy_geometry.TracelineArray.rst", "_autosummary/sdynpy.core.sdynpy_geometry.TransientPlotter.rst", "_autosummary/sdynpy.core.sdynpy_geometry.coordinate_system_array.rst", "_autosummary/sdynpy.core.sdynpy_geometry.element_array.rst", "_autosummary/sdynpy.core.sdynpy_geometry.from_excel_template.rst", "_autosummary/sdynpy.core.sdynpy_geometry.from_exodus.rst", "_autosummary/sdynpy.core.sdynpy_geometry.from_imat_struct.rst", "_autosummary/sdynpy.core.sdynpy_geometry.from_uff.rst", "_autosummary/sdynpy.core.sdynpy_geometry.from_unv.rst", "_autosummary/sdynpy.core.sdynpy_geometry.global_coord.rst", "_autosummary/sdynpy.core.sdynpy_geometry.global_deflection.rst", "_autosummary/sdynpy.core.sdynpy_geometry.id_map.rst", "_autosummary/sdynpy.core.sdynpy_geometry.load.rst", "_autosummary/sdynpy.core.sdynpy_geometry.local_coord.rst", "_autosummary/sdynpy.core.sdynpy_geometry.node_array.rst", "_autosummary/sdynpy.core.sdynpy_geometry.split_list.rst", "_autosummary/sdynpy.core.sdynpy_geometry.traceline_array.rst", "_autosummary/sdynpy.core.sdynpy_geometry.write_excel_template.rst", "_autosummary/sdynpy.core.sdynpy_matrix.rst", "_autosummary/sdynpy.core.sdynpy_matrix.Matrix.rst", "_autosummary/sdynpy.core.sdynpy_matrix.matrix.rst", "_autosummary/sdynpy.core.sdynpy_shape.rst", "_autosummary/sdynpy.core.sdynpy_shape.ShapeArray.rst", "_autosummary/sdynpy.core.sdynpy_shape.ShapeCommentTable.rst", "_autosummary/sdynpy.core.sdynpy_shape.concatenate_dofs.rst", "_autosummary/sdynpy.core.sdynpy_shape.from_exodus.rst", "_autosummary/sdynpy.core.sdynpy_shape.from_imat_struct.rst", "_autosummary/sdynpy.core.sdynpy_shape.from_unv.rst", "_autosummary/sdynpy.core.sdynpy_shape.mac.rst", "_autosummary/sdynpy.core.sdynpy_shape.overlay_shapes.rst", "_autosummary/sdynpy.core.sdynpy_shape.rigid_body_check.rst", "_autosummary/sdynpy.core.sdynpy_shape.rigid_body_error.rst", "_autosummary/sdynpy.core.sdynpy_shape.rigid_body_fix_node_orientation.rst", "_autosummary/sdynpy.core.sdynpy_shape.shape_alignment.rst", "_autosummary/sdynpy.core.sdynpy_shape.shape_array.rst", "_autosummary/sdynpy.core.sdynpy_shape.shape_comparison_table.rst", "_autosummary/sdynpy.core.sdynpy_system.rst", "_autosummary/sdynpy.core.sdynpy_system.System.rst", "_autosummary/sdynpy.core.sdynpy_system.substructure_by_position.rst", "_autosummary/sdynpy.demo.rst", "_autosummary/sdynpy.demo.beam_airplane.rst", "_autosummary/sdynpy.demo.beam_airplane.create_models.rst", "_autosummary/sdynpy.demo.beam_plate.rst", "_autosummary/sdynpy.demo.beam_plate.create_models.rst", "_autosummary/sdynpy.doc.rst", "_autosummary/sdynpy.doc.sdynpy_latex.rst", "_autosummary/sdynpy.doc.sdynpy_latex.create_latex_summary.rst", "_autosummary/sdynpy.doc.sdynpy_latex.figure.rst", "_autosummary/sdynpy.doc.sdynpy_latex.table.rst", "_autosummary/sdynpy.doc.sdynpy_ppt.rst", "_autosummary/sdynpy.doc.sdynpy_ppt.add_geometry_overview_slide.rst", "_autosummary/sdynpy.doc.sdynpy_ppt.add_section_header_slide.rst", "_autosummary/sdynpy.doc.sdynpy_ppt.add_shape_animation_slides.rst", "_autosummary/sdynpy.doc.sdynpy_ppt.add_shape_comparison_animation_slides.rst", "_autosummary/sdynpy.doc.sdynpy_ppt.add_shape_comparison_overview_slide.rst", "_autosummary/sdynpy.doc.sdynpy_ppt.add_shape_overview_slide.rst", "_autosummary/sdynpy.doc.sdynpy_ppt.add_title_slide.rst", "_autosummary/sdynpy.doc.sdynpy_ppt.create_summary_pptx.rst", "_autosummary/sdynpy.doc.sdynpy_ppt.position_placeholder.rst", "_autosummary/sdynpy.fem.rst", "_autosummary/sdynpy.fem.sdynpy_beam.rst", "_autosummary/sdynpy.fem.sdynpy_beam.beamkm.rst", "_autosummary/sdynpy.fem.sdynpy_beam.beamkm_2d.rst", "_autosummary/sdynpy.fem.sdynpy_beam.rect_beam_props.rst", "_autosummary/sdynpy.fem.sdynpy_dof.rst", "_autosummary/sdynpy.fem.sdynpy_dof.by_condition_number.rst", "_autosummary/sdynpy.fem.sdynpy_dof.by_effective_independence.rst", "_autosummary/sdynpy.fem.sdynpy_exodus.rst", "_autosummary/sdynpy.fem.sdynpy_exodus.Exodus.rst", "_autosummary/sdynpy.fem.sdynpy_exodus.ExodusError.rst", "_autosummary/sdynpy.fem.sdynpy_exodus.ExodusInMemory.rst", "_autosummary/sdynpy.fem.sdynpy_exodus.extract_sharp_edges.rst", "_autosummary/sdynpy.fem.sdynpy_exodus.face_connectivity.rst", "_autosummary/sdynpy.fem.sdynpy_exodus.mesh_triangulation_array.rst", "_autosummary/sdynpy.fem.sdynpy_exodus.reduce_exodus_to_surfaces.rst", "_autosummary/sdynpy.fem.sdynpy_exodus.subfield.rst", "_autosummary/sdynpy.fem.sdynpy_shaker.rst", "_autosummary/sdynpy.fem.sdynpy_shaker.Shaker4DoF.rst", "_autosummary/sdynpy.fileio.rst", "_autosummary/sdynpy.fileio.sdynpy_rattlesnake.rst", "_autosummary/sdynpy.fileio.sdynpy_rattlesnake.create_synthetic_test.rst", "_autosummary/sdynpy.fileio.sdynpy_rattlesnake.read_modal_data.rst", "_autosummary/sdynpy.fileio.sdynpy_rattlesnake.read_random_spectral_data.rst", "_autosummary/sdynpy.fileio.sdynpy_rattlesnake.read_rattlesnake_output.rst", "_autosummary/sdynpy.fileio.sdynpy_rattlesnake.read_system_id_data.rst", "_autosummary/sdynpy.fileio.sdynpy_rattlesnake.read_transient_control_data.rst", "_autosummary/sdynpy.fileio.sdynpy_tshaker.rst", "_autosummary/sdynpy.fileio.sdynpy_tshaker.read_mat_random.rst", "_autosummary/sdynpy.fileio.sdynpy_tshaker.read_mat_shock.rst", "_autosummary/sdynpy.fileio.sdynpy_tshaker.read_mat_time_history.rst", "_autosummary/sdynpy.fileio.sdynpy_tshaker.read_tdms.rst", "_autosummary/sdynpy.fileio.sdynpy_uff.rst", "_autosummary/sdynpy.fileio.sdynpy_uff.UFFReadError.rst", "_autosummary/sdynpy.fileio.sdynpy_uff.parse_uff_line.rst", "_autosummary/sdynpy.fileio.sdynpy_uff.parse_uff_lines.rst", "_autosummary/sdynpy.fileio.sdynpy_uff.readuff.rst", "_autosummary/sdynpy.fileio.sdynpy_uff.readunv.rst", "_autosummary/sdynpy.fileio.sdynpy_uff.write_uff_line.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_151.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_151.Sdynpy_UFF_Dataset_151.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_151.read.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_164.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_164.Sdynpy_UFF_Dataset_164.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_164.read.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_1858.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_1858.Sdynpy_UFF_Dataset_1858.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_1858.is_abscissa_even.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_1858.read.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2400.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2400.Sdynpy_UFF_Dataset_2400.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2400.read.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2411.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2411.Sdynpy_UFF_Dataset_2411.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2411.read.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2412.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2412.Sdynpy_UFF_Dataset_2412.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2412.read.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2420.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2420.Sdynpy_UFF_Dataset_2420.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2420.read.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55.Sdynpy_UFF_Dataset_55.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55.read.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_58.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_58.Sdynpy_UFF_Dataset_58.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_58.is_abscissa_even.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_58.read.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_82.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_82.Sdynpy_UFF_Dataset_82.rst", "_autosummary/sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_82.read.rst", "_autosummary/sdynpy.fileio.sdynpy_vic.rst", "_autosummary/sdynpy.fileio.sdynpy_vic.camera_matrix_from_vic_parameters.rst", "_autosummary/sdynpy.fileio.sdynpy_vic.extract_vic_cal_parameters.rst", "_autosummary/sdynpy.fileio.sdynpy_vic.get_vic_camera_parameters.rst", "_autosummary/sdynpy.fileio.sdynpy_vic.matrix_from_bryant_angles.rst", "_autosummary/sdynpy.fileio.sdynpy_vic.read_vic3D_mat_files.rst", "_autosummary/sdynpy.fileio.sdynpy_vic.vic_angles_from_matrix.rst", "_autosummary/sdynpy.modal.rst", "_autosummary/sdynpy.modal.sdynpy_ccmif.rst", "_autosummary/sdynpy.modal.sdynpy_ccmif.ColoredCMIF.rst", "_autosummary/sdynpy.modal.sdynpy_ccmif.PropertiesDialog.rst", "_autosummary/sdynpy.modal.sdynpy_modal_test.rst", "_autosummary/sdynpy.modal.sdynpy_modal_test.ModalTest.rst", "_autosummary/sdynpy.modal.sdynpy_modal_test.read_modal_fit_data.rst", "_autosummary/sdynpy.modal.sdynpy_modeshape.rst", "_autosummary/sdynpy.modal.sdynpy_modeshape.ShapeSelection.rst", "_autosummary/sdynpy.modal.sdynpy_modeshape.compute_residues.rst", "_autosummary/sdynpy.modal.sdynpy_modeshape.compute_shapes.rst", "_autosummary/sdynpy.modal.sdynpy_modeshape.compute_shapes_multireference.rst", "_autosummary/sdynpy.modal.sdynpy_modeshape.generate_kernel_complex.rst", "_autosummary/sdynpy.modal.sdynpy_modeshape.generate_kernel_real.rst", "_autosummary/sdynpy.modal.sdynpy_modeshape.stack_and_lstsq.rst", "_autosummary/sdynpy.modal.sdynpy_polypy.rst", "_autosummary/sdynpy.modal.sdynpy_polypy.PolyPy.rst", "_autosummary/sdynpy.modal.sdynpy_polypy.PolyPy_GUI.rst", "_autosummary/sdynpy.modal.sdynpy_polypy.PolyPy_Stability.rst", "_autosummary/sdynpy.modal.sdynpy_signal_processing_gui.rst", "_autosummary/sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.rst", "_autosummary/sdynpy.modal.sdynpy_smac.rst", "_autosummary/sdynpy.modal.sdynpy_smac.AddRootDialog.rst", "_autosummary/sdynpy.modal.sdynpy_smac.AutoFitTypes.rst", "_autosummary/sdynpy.modal.sdynpy_smac.ConvergenceException.rst", "_autosummary/sdynpy.modal.sdynpy_smac.SMAC.rst", "_autosummary/sdynpy.modal.sdynpy_smac.SMAC_GUI.rst", "_autosummary/sdynpy.modal.sdynpy_smac.correlation_coefficient.rst", "_autosummary/sdynpy.signal_processing.rst", "_autosummary/sdynpy.signal_processing.sdynpy_camera.rst", "_autosummary/sdynpy.signal_processing.sdynpy_camera.calibration_linear_estimate.rst", "_autosummary/sdynpy.signal_processing.sdynpy_camera.camera_derivative_matrix.rst", "_autosummary/sdynpy.signal_processing.sdynpy_camera.camera_matrix_from_image.rst", "_autosummary/sdynpy.signal_processing.sdynpy_camera.compute_pixel_displacement.rst", "_autosummary/sdynpy.signal_processing.sdynpy_camera.compute_pixel_position.rst", "_autosummary/sdynpy.signal_processing.sdynpy_camera.decomposeP.rst", "_autosummary/sdynpy.signal_processing.sdynpy_camera.distort_points.rst", "_autosummary/sdynpy.signal_processing.sdynpy_camera.homogeneous_coordinates.rst", "_autosummary/sdynpy.signal_processing.sdynpy_camera.optimize_calibration.rst", "_autosummary/sdynpy.signal_processing.sdynpy_camera.point_on_pixel.rst", "_autosummary/sdynpy.signal_processing.sdynpy_camera.reconstruct_scene_from_calibration_parameters.rst", "_autosummary/sdynpy.signal_processing.sdynpy_camera.unhomogeneous_coordinates.rst", "_autosummary/sdynpy.signal_processing.sdynpy_complex.rst", "_autosummary/sdynpy.signal_processing.sdynpy_complex.collapse_complex_to_real.rst", "_autosummary/sdynpy.signal_processing.sdynpy_correlation.rst", "_autosummary/sdynpy.signal_processing.sdynpy_correlation.frac.rst", "_autosummary/sdynpy.signal_processing.sdynpy_correlation.mac.rst", "_autosummary/sdynpy.signal_processing.sdynpy_correlation.matrix_plot.rst", "_autosummary/sdynpy.signal_processing.sdynpy_correlation.msf.rst", "_autosummary/sdynpy.signal_processing.sdynpy_correlation.orthog.rst", "_autosummary/sdynpy.signal_processing.sdynpy_correlation.trac.rst", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.rst", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.cpsd.rst", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.cpsd_autospectra.rst", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.cpsd_coherence.rst", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.cpsd_from_coh_phs.rst", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.cpsd_phase.rst", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.cpsd_to_time_history.rst", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.dB_pow.rst", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.db2scale.rst", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.match_coherence_phase.rst", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.nth_octave_freqs.rst", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.plot_asds.rst", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.plot_cpsd_error.rst", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.rms.rst", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.rms_csd.rst", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.shaped_psd.rst", "_autosummary/sdynpy.signal_processing.sdynpy_cpsd.trace.rst", "_autosummary/sdynpy.signal_processing.sdynpy_frf.rst", "_autosummary/sdynpy.signal_processing.sdynpy_frf.delay_signal.rst", "_autosummary/sdynpy.signal_processing.sdynpy_frf.fft2frf.rst", "_autosummary/sdynpy.signal_processing.sdynpy_frf.modes2frf.rst", "_autosummary/sdynpy.signal_processing.sdynpy_frf.plot.rst", "_autosummary/sdynpy.signal_processing.sdynpy_frf.sysmat2frf.rst", "_autosummary/sdynpy.signal_processing.sdynpy_frf.timedata2frf.rst", "_autosummary/sdynpy.signal_processing.sdynpy_frf_inverse.rst", "_autosummary/sdynpy.signal_processing.sdynpy_frf_inverse.compute_tikhonov_modified_singular_values.rst", "_autosummary/sdynpy.signal_processing.sdynpy_frf_inverse.frf_inverse.rst", "_autosummary/sdynpy.signal_processing.sdynpy_frf_inverse.pinv_by_tikhonov.rst", "_autosummary/sdynpy.signal_processing.sdynpy_frf_inverse.pinv_by_truncation.rst", "_autosummary/sdynpy.signal_processing.sdynpy_generator.rst", "_autosummary/sdynpy.signal_processing.sdynpy_generator.burst_random.rst", "_autosummary/sdynpy.signal_processing.sdynpy_generator.chirp.rst", "_autosummary/sdynpy.signal_processing.sdynpy_generator.pseudorandom.rst", "_autosummary/sdynpy.signal_processing.sdynpy_generator.pulse.rst", "_autosummary/sdynpy.signal_processing.sdynpy_generator.ramp_envelope.rst", "_autosummary/sdynpy.signal_processing.sdynpy_generator.random.rst", "_autosummary/sdynpy.signal_processing.sdynpy_generator.sine.rst", "_autosummary/sdynpy.signal_processing.sdynpy_generator.sine_sweep.rst", "_autosummary/sdynpy.signal_processing.sdynpy_geometry_fitting.rst", "_autosummary/sdynpy.signal_processing.sdynpy_geometry_fitting.cone_error_fn_fixed_angle.rst", "_autosummary/sdynpy.signal_processing.sdynpy_geometry_fitting.cone_error_fn_free_angle.rst", "_autosummary/sdynpy.signal_processing.sdynpy_geometry_fitting.cone_fit.rst", "_autosummary/sdynpy.signal_processing.sdynpy_geometry_fitting.create_cone.rst", "_autosummary/sdynpy.signal_processing.sdynpy_geometry_fitting.cylinder_fit.rst", "_autosummary/sdynpy.signal_processing.sdynpy_geometry_fitting.distance_point_line.rst", "_autosummary/sdynpy.signal_processing.sdynpy_geometry_fitting.distance_point_plane.rst", "_autosummary/sdynpy.signal_processing.sdynpy_geometry_fitting.fit_cone_fixed_angle.rst", "_autosummary/sdynpy.signal_processing.sdynpy_geometry_fitting.fit_cylinder.rst", "_autosummary/sdynpy.signal_processing.sdynpy_geometry_fitting.fit_line_point_cloud.rst", "_autosummary/sdynpy.signal_processing.sdynpy_harmonic.rst", "_autosummary/sdynpy.signal_processing.sdynpy_harmonic.harmonic_mag_phase.rst", "_autosummary/sdynpy.signal_processing.sdynpy_integration.rst", "_autosummary/sdynpy.signal_processing.sdynpy_integration.MCK_incomplete_to_StateSpace.rst", "_autosummary/sdynpy.signal_processing.sdynpy_integration.MCK_to_StateSpace.rst", "_autosummary/sdynpy.signal_processing.sdynpy_integration.frequency_domain_differentiation.rst", "_autosummary/sdynpy.signal_processing.sdynpy_integration.integrate_MCK.rst", "_autosummary/sdynpy.signal_processing.sdynpy_integration.integrate_modes.rst", "_autosummary/sdynpy.signal_processing.sdynpy_integration.modal_parameters_to_MCK.rst", "_autosummary/sdynpy.signal_processing.sdynpy_lrm.rst", "_autosummary/sdynpy.signal_processing.sdynpy_lrm.frf_local_model.rst", "_autosummary/sdynpy.signal_processing.sdynpy_rotation.rst", "_autosummary/sdynpy.signal_processing.sdynpy_rotation.R.rst", "_autosummary/sdynpy.signal_processing.sdynpy_rotation.cross_mat.rst", "_autosummary/sdynpy.signal_processing.sdynpy_rotation.cross_mat_vectorized.rst", "_autosummary/sdynpy.signal_processing.sdynpy_rotation.lstsq_rigid_transform.rst", "_autosummary/sdynpy.signal_processing.sdynpy_rotation.matrix_to_rodrigues.rst", "_autosummary/sdynpy.signal_processing.sdynpy_rotation.quaternion_to_rotation_matrix.rst", "_autosummary/sdynpy.signal_processing.sdynpy_rotation.rodrigues_to_matrix.rst", "_autosummary/sdynpy.signal_processing.sdynpy_srs.rst", "_autosummary/sdynpy.signal_processing.sdynpy_srs.loginterp.rst", "_autosummary/sdynpy.signal_processing.sdynpy_srs.octspace.rst", "_autosummary/sdynpy.signal_processing.sdynpy_srs.optimization_callback.rst", "_autosummary/sdynpy.signal_processing.sdynpy_srs.optimization_error_function.rst", "_autosummary/sdynpy.signal_processing.sdynpy_srs.sdof_filter.rst", "_autosummary/sdynpy.signal_processing.sdynpy_srs.sdof_free_decay_peak_response.rst", "_autosummary/sdynpy.signal_processing.sdynpy_srs.sdof_ramp_invariant_filter_weights.rst", "_autosummary/sdynpy.signal_processing.sdynpy_srs.srs.rst", "_autosummary/sdynpy.signal_processing.sdynpy_srs.sum_decayed_sines.rst", "_autosummary/sdynpy.signal_processing.sdynpy_srs.sum_decayed_sines_compensating_pulse_parameters.rst", "_autosummary/sdynpy.signal_processing.sdynpy_srs.sum_decayed_sines_displacement_velocity.rst", "_autosummary/sdynpy.signal_processing.sdynpy_srs.sum_decayed_sines_minimize.rst", "_autosummary/sdynpy.signal_processing.sdynpy_srs.sum_decayed_sines_reconstruction.rst", "_autosummary/sdynpy.signal_processing.sdynpy_srs.sum_decayed_sines_reconstruction_with_compensation.rst", "bibliography.rst", "example_problems/airplane_modal_test.rst", "example_problems/craig_bampton_substructuring.rst", "example_problems/mimo_random_vibration_control.rst", "example_problems/model_reduction/model_reduction.ipynb", "example_problems/rattlesnake_demonstration.rst", "example_problems/transient_fem_analysis.rst", "example_problems/transmission_simulator.rst", "examples.rst", "index.rst", "modal_tutorials.rst", "modal_tutorials/Modal_01_What_is_Modal_Analysis/Modal_01_What_is_Modal_Analysis.ipynb", "modal_tutorials/Modal_02_Basics_of_Vibrations/Modal_02_Basics_of_Vibrations.ipynb", "modal_tutorials/Modal_03_Multi_DoF_Vibrations/Modal_03_Multi_DoF_Vibrations.ipynb", "modal_tutorials/Modal_04_Modal_Analysis/Modal_04_Modal_Analysis.ipynb", "modal_tutorials/Modal_05_Experimental_Modal_Analysis/Modal_05_Experimental_Modal_Analysis.rst", "modal_tutorials/Modal_05_Experimental_Modal_Analysis/Modal_05a_Computing_FRF_from_Time_Data.ipynb", "modal_tutorials/Modal_05_Experimental_Modal_Analysis/Modal_05b_Types_of_Excitation.ipynb", "modal_tutorials/Modal_05_Experimental_Modal_Analysis/Modal_05c_Selecting_Response_and_Measurement_DoFs.ipynb", "modal_tutorials/Modal_05_Experimental_Modal_Analysis/Modal_05d_Data_Quality_Checks.ipynb", "modal_tutorials/Modal_05_Experimental_Modal_Analysis/Modal_05e_Fitting_Modes_to_FRF.ipynb", "modal_tutorials/Modal_05_Experimental_Modal_Analysis/Modal_05f_Comparing_Test_and_Analysis.ipynb", "modal_tutorials/Modal_06_Complex_Modes/Modal_06_Complex_Modes.ipynb", "modules.rst", "sdynpy_showcase.rst", "usage.rst"], "titles": ["sdynpy", "sdynpy.core", "sdynpy.core.sdynpy_array", "sdynpy.core.sdynpy_array.SdynpyArray", "sdynpy.core.sdynpy_colors", "sdynpy.core.sdynpy_coordinate", "sdynpy.core.sdynpy_coordinate.CoordinateArray", "sdynpy.core.sdynpy_coordinate.coordinate_array", "sdynpy.core.sdynpy_coordinate.create_coordinate_string", "sdynpy.core.sdynpy_coordinate.from_matlab_cellstr", "sdynpy.core.sdynpy_coordinate.from_nodelist", "sdynpy.core.sdynpy_coordinate.outer_product", "sdynpy.core.sdynpy_coordinate.parse_coordinate_string", "sdynpy.core.sdynpy_data", "sdynpy.core.sdynpy_data.AbscissaIndexExtractor", "sdynpy.core.sdynpy_data.AbscissaValueExtractor", "sdynpy.core.sdynpy_data.CPSDPlot", "sdynpy.core.sdynpy_data.CoherenceArray", "sdynpy.core.sdynpy_data.ComplexType", "sdynpy.core.sdynpy_data.CorrelationArray", "sdynpy.core.sdynpy_data.DecayedSineTable", "sdynpy.core.sdynpy_data.FunctionTypes", "sdynpy.core.sdynpy_data.GUIPlot", "sdynpy.core.sdynpy_data.ImpulseResponseFunctionArray", "sdynpy.core.sdynpy_data.MPLCanvas", "sdynpy.core.sdynpy_data.MPLMultiCanvas", "sdynpy.core.sdynpy_data.ModeIndicatorFunctionArray", "sdynpy.core.sdynpy_data.MultipleCoherenceArray", "sdynpy.core.sdynpy_data.NDDataArray", "sdynpy.core.sdynpy_data.PowerSpectralDensityArray", "sdynpy.core.sdynpy_data.PowerSpectrumArray", "sdynpy.core.sdynpy_data.ShockResponseSpectrumArray", "sdynpy.core.sdynpy_data.SpecificDataType", "sdynpy.core.sdynpy_data.SpectrumArray", "sdynpy.core.sdynpy_data.TimeHistoryArray", "sdynpy.core.sdynpy_data.TransferFunctionArray", "sdynpy.core.sdynpy_data.TransmissibilityArray", "sdynpy.core.sdynpy_data.TypeQual", "sdynpy.core.sdynpy_data.data_array", "sdynpy.core.sdynpy_data.decayed_sine_table", "sdynpy.core.sdynpy_data.frf_from_time_data", "sdynpy.core.sdynpy_data.from_imat_struct", "sdynpy.core.sdynpy_data.from_uff", "sdynpy.core.sdynpy_data.from_unv", "sdynpy.core.sdynpy_data.join", "sdynpy.core.sdynpy_data.load", "sdynpy.core.sdynpy_geometry", "sdynpy.core.sdynpy_geometry.CoordinateSystemArray", "sdynpy.core.sdynpy_geometry.DeflectionShapePlotter", "sdynpy.core.sdynpy_geometry.ElementArray", "sdynpy.core.sdynpy_geometry.Geometry", "sdynpy.core.sdynpy_geometry.GeometryPlotter", "sdynpy.core.sdynpy_geometry.NodeArray", "sdynpy.core.sdynpy_geometry.ShapePlotter", "sdynpy.core.sdynpy_geometry.TracelineArray", "sdynpy.core.sdynpy_geometry.TransientPlotter", "sdynpy.core.sdynpy_geometry.coordinate_system_array", "sdynpy.core.sdynpy_geometry.element_array", "sdynpy.core.sdynpy_geometry.from_excel_template", "sdynpy.core.sdynpy_geometry.from_exodus", "sdynpy.core.sdynpy_geometry.from_imat_struct", "sdynpy.core.sdynpy_geometry.from_uff", "sdynpy.core.sdynpy_geometry.from_unv", "sdynpy.core.sdynpy_geometry.global_coord", "sdynpy.core.sdynpy_geometry.global_deflection", "sdynpy.core.sdynpy_geometry.id_map", "sdynpy.core.sdynpy_geometry.load", "sdynpy.core.sdynpy_geometry.local_coord", "sdynpy.core.sdynpy_geometry.node_array", "sdynpy.core.sdynpy_geometry.split_list", "sdynpy.core.sdynpy_geometry.traceline_array", "sdynpy.core.sdynpy_geometry.write_excel_template", "sdynpy.core.sdynpy_matrix", "sdynpy.core.sdynpy_matrix.Matrix", "sdynpy.core.sdynpy_matrix.matrix", "sdynpy.core.sdynpy_shape", "sdynpy.core.sdynpy_shape.ShapeArray", "sdynpy.core.sdynpy_shape.ShapeCommentTable", "sdynpy.core.sdynpy_shape.concatenate_dofs", "sdynpy.core.sdynpy_shape.from_exodus", "sdynpy.core.sdynpy_shape.from_imat_struct", "sdynpy.core.sdynpy_shape.from_unv", "sdynpy.core.sdynpy_shape.mac", "sdynpy.core.sdynpy_shape.overlay_shapes", "sdynpy.core.sdynpy_shape.rigid_body_check", "sdynpy.core.sdynpy_shape.rigid_body_error", "sdynpy.core.sdynpy_shape.rigid_body_fix_node_orientation", "sdynpy.core.sdynpy_shape.shape_alignment", "sdynpy.core.sdynpy_shape.shape_array", "sdynpy.core.sdynpy_shape.shape_comparison_table", "sdynpy.core.sdynpy_system", "sdynpy.core.sdynpy_system.System", "sdynpy.core.sdynpy_system.substructure_by_position", "sdynpy.demo", "sdynpy.demo.beam_airplane", "sdynpy.demo.beam_airplane.create_models", "sdynpy.demo.beam_plate", "sdynpy.demo.beam_plate.create_models", "sdynpy.doc", "sdynpy.doc.sdynpy_latex", "sdynpy.doc.sdynpy_latex.create_latex_summary", "sdynpy.doc.sdynpy_latex.figure", "sdynpy.doc.sdynpy_latex.table", "sdynpy.doc.sdynpy_ppt", "sdynpy.doc.sdynpy_ppt.add_geometry_overview_slide", "sdynpy.doc.sdynpy_ppt.add_section_header_slide", "sdynpy.doc.sdynpy_ppt.add_shape_animation_slides", "sdynpy.doc.sdynpy_ppt.add_shape_comparison_animation_slides", "sdynpy.doc.sdynpy_ppt.add_shape_comparison_overview_slide", "sdynpy.doc.sdynpy_ppt.add_shape_overview_slide", "sdynpy.doc.sdynpy_ppt.add_title_slide", "sdynpy.doc.sdynpy_ppt.create_summary_pptx", "sdynpy.doc.sdynpy_ppt.position_placeholder", "sdynpy.fem", "sdynpy.fem.sdynpy_beam", "sdynpy.fem.sdynpy_beam.beamkm", "sdynpy.fem.sdynpy_beam.beamkm_2d", "sdynpy.fem.sdynpy_beam.rect_beam_props", "sdynpy.fem.sdynpy_dof", "sdynpy.fem.sdynpy_dof.by_condition_number", "sdynpy.fem.sdynpy_dof.by_effective_independence", "sdynpy.fem.sdynpy_exodus", "sdynpy.fem.sdynpy_exodus.Exodus", "sdynpy.fem.sdynpy_exodus.ExodusError", "sdynpy.fem.sdynpy_exodus.ExodusInMemory", "sdynpy.fem.sdynpy_exodus.extract_sharp_edges", "sdynpy.fem.sdynpy_exodus.face_connectivity", "sdynpy.fem.sdynpy_exodus.mesh_triangulation_array", "sdynpy.fem.sdynpy_exodus.reduce_exodus_to_surfaces", "sdynpy.fem.sdynpy_exodus.subfield", "sdynpy.fem.sdynpy_shaker", "sdynpy.fem.sdynpy_shaker.Shaker4DoF", "sdynpy.fileio", "sdynpy.fileio.sdynpy_rattlesnake", "sdynpy.fileio.sdynpy_rattlesnake.create_synthetic_test", "sdynpy.fileio.sdynpy_rattlesnake.read_modal_data", "sdynpy.fileio.sdynpy_rattlesnake.read_random_spectral_data", "sdynpy.fileio.sdynpy_rattlesnake.read_rattlesnake_output", "sdynpy.fileio.sdynpy_rattlesnake.read_system_id_data", "sdynpy.fileio.sdynpy_rattlesnake.read_transient_control_data", "sdynpy.fileio.sdynpy_tshaker", "sdynpy.fileio.sdynpy_tshaker.read_mat_random", "sdynpy.fileio.sdynpy_tshaker.read_mat_shock", "sdynpy.fileio.sdynpy_tshaker.read_mat_time_history", "sdynpy.fileio.sdynpy_tshaker.read_tdms", "sdynpy.fileio.sdynpy_uff", "sdynpy.fileio.sdynpy_uff.UFFReadError", "sdynpy.fileio.sdynpy_uff.parse_uff_line", "sdynpy.fileio.sdynpy_uff.parse_uff_lines", "sdynpy.fileio.sdynpy_uff.readuff", "sdynpy.fileio.sdynpy_uff.readunv", "sdynpy.fileio.sdynpy_uff.write_uff_line", "sdynpy.fileio.sdynpy_uff_datasets", "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_151", "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_151.Sdynpy_UFF_Dataset_151", "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_151.read", "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_164", "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_164.Sdynpy_UFF_Dataset_164", "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_164.read", "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_1858", "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_1858.Sdynpy_UFF_Dataset_1858", "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_1858.is_abscissa_even", "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_1858.read", "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2400", "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2400.Sdynpy_UFF_Dataset_2400", "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2400.read", "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2411", "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2411.Sdynpy_UFF_Dataset_2411", "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2411.read", "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2412", "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2412.Sdynpy_UFF_Dataset_2412", "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2412.read", "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2420", "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2420.Sdynpy_UFF_Dataset_2420", "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2420.read", "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55", "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55.Sdynpy_UFF_Dataset_55", "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55.read", "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_58", "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_58.Sdynpy_UFF_Dataset_58", "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_58.is_abscissa_even", "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_58.read", "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_82", "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_82.Sdynpy_UFF_Dataset_82", "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_82.read", "sdynpy.fileio.sdynpy_vic", "sdynpy.fileio.sdynpy_vic.camera_matrix_from_vic_parameters", "sdynpy.fileio.sdynpy_vic.extract_vic_cal_parameters", "sdynpy.fileio.sdynpy_vic.get_vic_camera_parameters", "sdynpy.fileio.sdynpy_vic.matrix_from_bryant_angles", "sdynpy.fileio.sdynpy_vic.read_vic3D_mat_files", "sdynpy.fileio.sdynpy_vic.vic_angles_from_matrix", "sdynpy.modal", "sdynpy.modal.sdynpy_ccmif", "sdynpy.modal.sdynpy_ccmif.ColoredCMIF", "sdynpy.modal.sdynpy_ccmif.PropertiesDialog", "sdynpy.modal.sdynpy_modal_test", "sdynpy.modal.sdynpy_modal_test.ModalTest", "sdynpy.modal.sdynpy_modal_test.read_modal_fit_data", "sdynpy.modal.sdynpy_modeshape", "sdynpy.modal.sdynpy_modeshape.ShapeSelection", "sdynpy.modal.sdynpy_modeshape.compute_residues", "sdynpy.modal.sdynpy_modeshape.compute_shapes", "sdynpy.modal.sdynpy_modeshape.compute_shapes_multireference", "sdynpy.modal.sdynpy_modeshape.generate_kernel_complex", "sdynpy.modal.sdynpy_modeshape.generate_kernel_real", "sdynpy.modal.sdynpy_modeshape.stack_and_lstsq", "sdynpy.modal.sdynpy_polypy", "sdynpy.modal.sdynpy_polypy.PolyPy", "sdynpy.modal.sdynpy_polypy.PolyPy_GUI", "sdynpy.modal.sdynpy_polypy.PolyPy_Stability", "sdynpy.modal.sdynpy_signal_processing_gui", "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI", "sdynpy.modal.sdynpy_smac", "sdynpy.modal.sdynpy_smac.AddRootDialog", "sdynpy.modal.sdynpy_smac.AutoFitTypes", "sdynpy.modal.sdynpy_smac.ConvergenceException", "sdynpy.modal.sdynpy_smac.SMAC", "sdynpy.modal.sdynpy_smac.SMAC_GUI", "sdynpy.modal.sdynpy_smac.correlation_coefficient", "sdynpy.signal_processing", "sdynpy.signal_processing.sdynpy_camera", "sdynpy.signal_processing.sdynpy_camera.calibration_linear_estimate", "sdynpy.signal_processing.sdynpy_camera.camera_derivative_matrix", "sdynpy.signal_processing.sdynpy_camera.camera_matrix_from_image", "sdynpy.signal_processing.sdynpy_camera.compute_pixel_displacement", "sdynpy.signal_processing.sdynpy_camera.compute_pixel_position", "sdynpy.signal_processing.sdynpy_camera.decomposeP", "sdynpy.signal_processing.sdynpy_camera.distort_points", "sdynpy.signal_processing.sdynpy_camera.homogeneous_coordinates", "sdynpy.signal_processing.sdynpy_camera.optimize_calibration", "sdynpy.signal_processing.sdynpy_camera.point_on_pixel", "sdynpy.signal_processing.sdynpy_camera.reconstruct_scene_from_calibration_parameters", "sdynpy.signal_processing.sdynpy_camera.unhomogeneous_coordinates", "sdynpy.signal_processing.sdynpy_complex", "sdynpy.signal_processing.sdynpy_complex.collapse_complex_to_real", "sdynpy.signal_processing.sdynpy_correlation", "sdynpy.signal_processing.sdynpy_correlation.frac", "sdynpy.signal_processing.sdynpy_correlation.mac", "sdynpy.signal_processing.sdynpy_correlation.matrix_plot", "sdynpy.signal_processing.sdynpy_correlation.msf", "sdynpy.signal_processing.sdynpy_correlation.orthog", "sdynpy.signal_processing.sdynpy_correlation.trac", "sdynpy.signal_processing.sdynpy_cpsd", "sdynpy.signal_processing.sdynpy_cpsd.cpsd", "sdynpy.signal_processing.sdynpy_cpsd.cpsd_autospectra", "sdynpy.signal_processing.sdynpy_cpsd.cpsd_coherence", "sdynpy.signal_processing.sdynpy_cpsd.cpsd_from_coh_phs", "sdynpy.signal_processing.sdynpy_cpsd.cpsd_phase", "sdynpy.signal_processing.sdynpy_cpsd.cpsd_to_time_history", "sdynpy.signal_processing.sdynpy_cpsd.dB_pow", "sdynpy.signal_processing.sdynpy_cpsd.db2scale", "sdynpy.signal_processing.sdynpy_cpsd.match_coherence_phase", "sdynpy.signal_processing.sdynpy_cpsd.nth_octave_freqs", "sdynpy.signal_processing.sdynpy_cpsd.plot_asds", "sdynpy.signal_processing.sdynpy_cpsd.plot_cpsd_error", "sdynpy.signal_processing.sdynpy_cpsd.rms", "sdynpy.signal_processing.sdynpy_cpsd.rms_csd", "sdynpy.signal_processing.sdynpy_cpsd.shaped_psd", "sdynpy.signal_processing.sdynpy_cpsd.trace", "sdynpy.signal_processing.sdynpy_frf", "sdynpy.signal_processing.sdynpy_frf.delay_signal", "sdynpy.signal_processing.sdynpy_frf.fft2frf", "sdynpy.signal_processing.sdynpy_frf.modes2frf", "sdynpy.signal_processing.sdynpy_frf.plot", "sdynpy.signal_processing.sdynpy_frf.sysmat2frf", "sdynpy.signal_processing.sdynpy_frf.timedata2frf", "sdynpy.signal_processing.sdynpy_frf_inverse", "sdynpy.signal_processing.sdynpy_frf_inverse.compute_tikhonov_modified_singular_values", "sdynpy.signal_processing.sdynpy_frf_inverse.frf_inverse", "sdynpy.signal_processing.sdynpy_frf_inverse.pinv_by_tikhonov", "sdynpy.signal_processing.sdynpy_frf_inverse.pinv_by_truncation", "sdynpy.signal_processing.sdynpy_generator", "sdynpy.signal_processing.sdynpy_generator.burst_random", "sdynpy.signal_processing.sdynpy_generator.chirp", "sdynpy.signal_processing.sdynpy_generator.pseudorandom", "sdynpy.signal_processing.sdynpy_generator.pulse", "sdynpy.signal_processing.sdynpy_generator.ramp_envelope", "sdynpy.signal_processing.sdynpy_generator.random", "sdynpy.signal_processing.sdynpy_generator.sine", "sdynpy.signal_processing.sdynpy_generator.sine_sweep", "sdynpy.signal_processing.sdynpy_geometry_fitting", "sdynpy.signal_processing.sdynpy_geometry_fitting.cone_error_fn_fixed_angle", "sdynpy.signal_processing.sdynpy_geometry_fitting.cone_error_fn_free_angle", "sdynpy.signal_processing.sdynpy_geometry_fitting.cone_fit", "sdynpy.signal_processing.sdynpy_geometry_fitting.create_cone", "sdynpy.signal_processing.sdynpy_geometry_fitting.cylinder_fit", "sdynpy.signal_processing.sdynpy_geometry_fitting.distance_point_line", "sdynpy.signal_processing.sdynpy_geometry_fitting.distance_point_plane", "sdynpy.signal_processing.sdynpy_geometry_fitting.fit_cone_fixed_angle", "sdynpy.signal_processing.sdynpy_geometry_fitting.fit_cylinder", "sdynpy.signal_processing.sdynpy_geometry_fitting.fit_line_point_cloud", "sdynpy.signal_processing.sdynpy_harmonic", "sdynpy.signal_processing.sdynpy_harmonic.harmonic_mag_phase", "sdynpy.signal_processing.sdynpy_integration", "sdynpy.signal_processing.sdynpy_integration.MCK_incomplete_to_StateSpace", "sdynpy.signal_processing.sdynpy_integration.MCK_to_StateSpace", "sdynpy.signal_processing.sdynpy_integration.frequency_domain_differentiation", "sdynpy.signal_processing.sdynpy_integration.integrate_MCK", "sdynpy.signal_processing.sdynpy_integration.integrate_modes", "sdynpy.signal_processing.sdynpy_integration.modal_parameters_to_MCK", "sdynpy.signal_processing.sdynpy_lrm", "sdynpy.signal_processing.sdynpy_lrm.frf_local_model", "sdynpy.signal_processing.sdynpy_rotation", "sdynpy.signal_processing.sdynpy_rotation.R", "sdynpy.signal_processing.sdynpy_rotation.cross_mat", "sdynpy.signal_processing.sdynpy_rotation.cross_mat_vectorized", "sdynpy.signal_processing.sdynpy_rotation.lstsq_rigid_transform", "sdynpy.signal_processing.sdynpy_rotation.matrix_to_rodrigues", "sdynpy.signal_processing.sdynpy_rotation.quaternion_to_rotation_matrix", "sdynpy.signal_processing.sdynpy_rotation.rodrigues_to_matrix", "sdynpy.signal_processing.sdynpy_srs", "sdynpy.signal_processing.sdynpy_srs.loginterp", "sdynpy.signal_processing.sdynpy_srs.octspace", "sdynpy.signal_processing.sdynpy_srs.optimization_callback", "sdynpy.signal_processing.sdynpy_srs.optimization_error_function", "sdynpy.signal_processing.sdynpy_srs.sdof_filter", "sdynpy.signal_processing.sdynpy_srs.sdof_free_decay_peak_response", "sdynpy.signal_processing.sdynpy_srs.sdof_ramp_invariant_filter_weights", "sdynpy.signal_processing.sdynpy_srs.srs", "sdynpy.signal_processing.sdynpy_srs.sum_decayed_sines", "sdynpy.signal_processing.sdynpy_srs.sum_decayed_sines_compensating_pulse_parameters", "sdynpy.signal_processing.sdynpy_srs.sum_decayed_sines_displacement_velocity", "sdynpy.signal_processing.sdynpy_srs.sum_decayed_sines_minimize", "sdynpy.signal_processing.sdynpy_srs.sum_decayed_sines_reconstruction", "sdynpy.signal_processing.sdynpy_srs.sum_decayed_sines_reconstruction_with_compensation", "Bibliography", "Airplane Modal Test", "Substructuring using Craig-Bampton Superelements from Sierra/SD", "MIMO Random Vibration", "Model Reduction", "Rattlesnake Demonstration", "Analysis of Transient Finite Element Results", "Substructuring using the Transmission Simulator Method", "SDynpy Examples", "Welcome to SDynPy\u2019s documentation!", "Modal Tutorials", "Modal Tutorial 01: What is modal analysis?", "Modal Tutorial 02: Basics of Vibrations", "Modal Tutorial 03: Vibrations of Systems with Multiple Degrees of Freedom", "Modal Tutorial 04: Modal Analysis", "Modal Tutorial 05: Experimental Modal Analysis", "Modal Tutorial 05 Part A: Computing Frequency Response from Time Data", "Modal Tutorial 05 Part B: Types of Excitation for Experimental Modal Analysis", "Modal Tutorial 05 Part C: Selecting Excitation and Response Degrees of Freedom", "Modal Tutorial 05 Part D: Data Quality Checks", "Modal Tutorial 05 Part E: Fitting Modes to Data", "Modal Tutorial 05 Part F: Comparing Test and Analysis", "Modal Tutorial 06: Complex Modes", "SDynPy Programming Interface", "SDynPy Showcase", "Usage"], "terms": {"A": [0, 1, 2, 3, 4, 5, 6, 10, 13, 17, 27, 28, 29, 31, 34, 35, 39, 40, 46, 50, 52, 58, 59, 72, 75, 76, 77, 79, 82, 83, 84, 86, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 103, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 130, 131, 132, 133, 140, 145, 147, 151, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 186, 187, 188, 189, 191, 192, 193, 196, 197, 199, 201, 204, 205, 206, 207, 211, 212, 213, 220, 221, 222, 224, 225, 226, 231, 234, 236, 243, 244, 249, 253, 260, 261, 262, 263, 265, 266, 267, 269, 270, 271, 272, 275, 280, 281, 292, 294, 302, 303, 304, 317, 319, 320, 324, 325, 326, 328, 329, 330, 331, 332, 333, 336, 337, 341, 343, 344, 350, 351], "structur": [0, 2, 3, 6, 7, 20, 28, 29, 34, 41, 50, 56, 57, 60, 68, 70, 73, 76, 80, 88, 90, 91, 96, 114, 128, 198, 204, 205, 263, 269, 270, 272, 302, 327, 329, 330, 331, 332, 333, 335, 337, 338, 339, 340, 342, 343, 344, 348, 350, 351], "dynam": [0, 28, 91, 272, 327, 329, 332, 333, 335, 337, 338, 339, 340, 341, 342, 344, 348, 350], "librari": [0, 34], "python": [0, 76, 122, 207, 213, 327, 328, 330, 332, 333, 335, 338, 350, 351], "copyright": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303], "2022": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303], "nation": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303, 327], "technologi": [0, 1, 2, 4, 5, 13, 23, 35, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303], "engin": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303, 327, 337, 338, 343, 348], "solut": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 190, 192, 193, 196, 199, 203, 206, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303, 328, 329, 332, 336, 338, 340, 343, 344, 350, 351], "sandia": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 128, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303, 327, 331], "llc": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303], "ntess": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303], "under": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303, 332, 350], "term": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 198, 199, 206, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303, 329, 337, 338, 339, 340, 342, 348], "contract": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303], "de": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303], "na0003525": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303], "u": [0, 1, 2, 4, 5, 13, 29, 35, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 131, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 224, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303, 327, 329, 330, 331, 332, 333, 337, 339, 340, 342, 343, 348, 350], "": [0, 1, 2, 3, 4, 5, 13, 23, 28, 29, 31, 33, 34, 35, 46, 50, 51, 68, 72, 75, 88, 90, 91, 93, 94, 96, 98, 99, 103, 113, 114, 115, 116, 117, 118, 121, 122, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 186, 188, 192, 193, 196, 198, 199, 204, 205, 206, 207, 211, 213, 220, 221, 224, 228, 234, 236, 243, 260, 261, 263, 265, 267, 272, 280, 281, 292, 294, 302, 303, 319, 320, 322, 326, 327, 328, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350, 351], "govern": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303, 338], "retain": [0, 1, 2, 4, 5, 13, 29, 34, 35, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 269, 271, 272, 281, 292, 294, 303, 328, 330, 339, 348], "certain": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303, 327, 329, 332, 339, 342, 350], "right": [0, 1, 2, 4, 5, 13, 28, 29, 35, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 112, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 187, 190, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303, 327, 329, 331, 332, 333, 337, 338, 340, 342, 344, 348, 350], "thi": [0, 1, 2, 3, 4, 5, 6, 7, 10, 13, 22, 23, 28, 29, 31, 33, 34, 35, 38, 41, 46, 50, 51, 55, 58, 59, 60, 72, 75, 76, 79, 80, 83, 85, 86, 88, 90, 91, 93, 94, 96, 98, 99, 101, 103, 113, 114, 115, 117, 118, 119, 120, 121, 122, 124, 128, 130, 132, 133, 140, 145, 147, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 186, 188, 190, 192, 193, 196, 197, 199, 204, 205, 206, 207, 211, 213, 220, 221, 224, 225, 226, 234, 236, 243, 253, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 275, 280, 281, 292, 294, 302, 303, 307, 319, 320, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 341, 342, 343, 344, 348, 350, 351], "softwar": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 224, 234, 236, 243, 260, 267, 272, 275, 281, 292, 294, 303, 328, 331, 332, 333, 348, 350, 351], "program": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303, 330, 335], "i": [0, 1, 2, 3, 4, 5, 6, 7, 10, 13, 17, 22, 23, 27, 28, 29, 31, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 64, 68, 70, 72, 73, 75, 76, 77, 79, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 101, 103, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 128, 130, 131, 132, 133, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 186, 188, 190, 192, 193, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 211, 213, 220, 221, 224, 231, 234, 236, 243, 244, 249, 253, 257, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 275, 280, 281, 292, 294, 302, 303, 304, 305, 307, 317, 319, 320, 322, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 342, 343, 344, 350, 351], "free": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303, 330, 336, 338, 340, 342, 343, 348], "you": [0, 1, 2, 4, 5, 13, 31, 34, 46, 72, 75, 76, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 124, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303, 319, 320, 327, 332, 333, 337, 338, 339, 340, 343, 348, 350, 351], "can": [0, 1, 2, 3, 4, 5, 7, 13, 22, 23, 28, 29, 31, 33, 34, 35, 41, 46, 50, 56, 57, 58, 59, 60, 68, 70, 72, 73, 75, 76, 80, 84, 85, 86, 88, 90, 91, 93, 94, 95, 96, 98, 99, 101, 103, 113, 114, 115, 117, 118, 121, 122, 124, 130, 131, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 186, 188, 192, 193, 196, 199, 201, 203, 204, 205, 207, 211, 212, 213, 220, 221, 224, 234, 236, 243, 260, 267, 269, 270, 271, 272, 275, 280, 281, 292, 294, 302, 303, 304, 317, 320, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350, 351], "redistribut": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303], "modifi": [0, 1, 2, 4, 5, 13, 28, 35, 46, 50, 55, 72, 75, 77, 86, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 268, 269, 272, 280, 281, 292, 294, 303, 327, 329, 338, 340, 343, 344, 348, 350], "gnu": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303], "gener": [0, 1, 2, 4, 5, 13, 21, 22, 28, 29, 31, 32, 34, 46, 50, 59, 72, 75, 76, 89, 90, 93, 94, 96, 98, 99, 101, 103, 113, 114, 118, 121, 122, 124, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 190, 192, 193, 196, 199, 206, 207, 211, 213, 220, 221, 234, 236, 243, 249, 260, 267, 269, 272, 280, 281, 292, 294, 303, 317, 320, 328, 329, 330, 332, 333, 334, 336, 337, 338, 339, 341, 343, 351], "public": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303], "licens": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303], "publish": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303], "foundat": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303], "either": [0, 1, 2, 4, 5, 13, 22, 23, 28, 29, 31, 33, 34, 35, 46, 72, 75, 76, 90, 93, 94, 96, 98, 99, 101, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 253, 260, 267, 269, 270, 272, 281, 292, 294, 303, 320, 328, 331, 332, 339, 340, 342, 348, 350], "version": [0, 1, 2, 4, 5, 13, 28, 34, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 122, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 268, 272, 281, 292, 294, 303, 327, 332, 339, 340, 348, 350], "3": [0, 1, 2, 4, 5, 6, 8, 10, 12, 13, 18, 21, 29, 31, 32, 34, 46, 47, 50, 52, 56, 58, 63, 64, 67, 72, 75, 90, 91, 93, 94, 96, 98, 99, 100, 103, 107, 113, 114, 117, 118, 121, 122, 124, 128, 130, 131, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 173, 175, 178, 182, 185, 186, 188, 190, 192, 193, 196, 199, 207, 211, 213, 217, 220, 221, 222, 224, 234, 236, 243, 253, 260, 262, 266, 267, 269, 272, 281, 292, 294, 302, 303, 304, 305, 307, 311, 316, 317, 318, 319, 320, 323, 327, 328, 329, 330, 331, 332, 333, 337, 342, 343, 344, 348, 350], "your": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303, 337, 338, 339, 350, 351], "option": [0, 1, 2, 4, 5, 6, 7, 10, 13, 16, 17, 23, 27, 28, 29, 31, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 64, 72, 73, 75, 76, 77, 79, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 96, 98, 99, 101, 103, 113, 114, 118, 121, 122, 130, 131, 132, 133, 134, 140, 145, 147, 149, 150, 151, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 190, 192, 193, 194, 196, 197, 199, 201, 202, 203, 204, 205, 207, 208, 211, 212, 213, 220, 221, 231, 234, 236, 243, 244, 253, 260, 263, 267, 269, 270, 271, 272, 275, 280, 281, 292, 294, 302, 303, 304, 316, 319, 320, 322, 330, 331, 332, 333, 334, 339, 340, 350], "ani": [0, 1, 2, 4, 5, 13, 28, 34, 35, 46, 50, 51, 72, 73, 75, 76, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 128, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 190, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 253, 260, 267, 272, 281, 292, 294, 303, 327, 328, 330, 332, 337, 338, 340, 342, 343, 344, 348, 350, 351], "later": [0, 1, 2, 4, 5, 13, 34, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303, 317, 328, 330, 331, 340, 348], "distribut": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 122, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303, 337], "hope": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303], "us": [0, 1, 2, 4, 5, 6, 7, 13, 17, 19, 22, 23, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 68, 69, 70, 72, 73, 75, 76, 77, 80, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 103, 113, 114, 117, 118, 121, 122, 124, 130, 131, 132, 133, 140, 145, 146, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 190, 192, 193, 196, 199, 201, 203, 204, 205, 206, 207, 211, 212, 213, 220, 221, 222, 224, 234, 236, 243, 244, 249, 253, 260, 262, 263, 265, 266, 267, 268, 269, 270, 272, 275, 280, 281, 292, 294, 302, 303, 307, 316, 318, 319, 320, 330, 331, 332, 334, 335, 337, 338, 339, 340, 341, 343, 344, 348, 351], "without": [0, 1, 2, 4, 5, 13, 29, 34, 46, 50, 55, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 203, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 269, 272, 281, 292, 294, 303, 327, 331, 332, 339, 340, 343, 348, 350], "warranti": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303], "even": [0, 1, 2, 4, 5, 13, 34, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 253, 260, 267, 272, 281, 292, 294, 303, 327, 328, 331, 332, 338, 340, 342, 343, 350], "impli": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303, 338, 343, 348], "merchant": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303], "fit": [0, 1, 2, 4, 5, 13, 31, 34, 46, 52, 72, 75, 90, 93, 94, 96, 98, 99, 100, 103, 113, 114, 118, 121, 124, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 198, 199, 201, 203, 207, 211, 213, 220, 221, 234, 236, 243, 253, 260, 267, 272, 281, 292, 294, 303, 320, 332, 334, 335, 336, 341, 342, 343, 344, 351], "FOR": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303], "particular": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303, 327, 337, 348, 350], "purpos": [0, 1, 2, 4, 5, 13, 29, 35, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 268, 272, 281, 292, 294, 303, 330, 351], "see": [0, 1, 2, 4, 5, 13, 34, 35, 40, 46, 50, 57, 71, 72, 75, 90, 93, 94, 96, 98, 99, 101, 103, 113, 114, 118, 121, 128, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 223, 234, 236, 243, 260, 262, 266, 267, 272, 281, 292, 294, 302, 303, 318, 327, 328, 329, 330, 331, 332, 337, 338, 339, 340, 342, 343, 344, 348, 350], "more": [0, 1, 2, 4, 5, 13, 28, 34, 35, 40, 41, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 122, 124, 128, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 190, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 302, 303, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 342, 343, 344, 348, 350], "detail": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 270, 272, 281, 292, 294, 303], "should": [0, 1, 2, 4, 5, 6, 7, 10, 13, 22, 23, 29, 31, 34, 35, 46, 50, 53, 56, 57, 58, 68, 70, 72, 75, 76, 77, 79, 83, 84, 88, 90, 91, 93, 94, 96, 98, 99, 103, 113, 114, 115, 118, 119, 120, 121, 122, 128, 130, 132, 133, 140, 145, 149, 150, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 203, 204, 205, 207, 211, 213, 220, 221, 234, 236, 243, 260, 263, 265, 266, 267, 268, 269, 270, 271, 272, 275, 280, 281, 292, 294, 303, 318, 319, 320, 322, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350], "have": [0, 1, 2, 3, 4, 5, 6, 7, 10, 13, 17, 27, 28, 29, 31, 33, 34, 35, 39, 40, 45, 46, 49, 50, 55, 56, 57, 66, 68, 70, 72, 75, 76, 77, 83, 89, 90, 93, 94, 96, 98, 99, 101, 103, 113, 114, 115, 118, 121, 122, 124, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 190, 192, 193, 196, 199, 203, 204, 205, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 280, 281, 292, 294, 303, 316, 319, 320, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 341, 342, 343, 344, 348, 350, 351], "receiv": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303], "copi": [0, 1, 2, 4, 5, 6, 13, 35, 46, 50, 72, 73, 75, 76, 90, 91, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303, 333, 342], "along": [0, 1, 2, 4, 5, 13, 28, 31, 46, 50, 59, 72, 75, 76, 90, 93, 94, 96, 98, 99, 100, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 204, 205, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303, 320, 327, 330, 333, 338, 339, 340, 342, 344, 348, 350], "If": [0, 1, 2, 3, 4, 5, 6, 7, 10, 13, 17, 22, 27, 28, 29, 31, 33, 34, 35, 40, 41, 44, 45, 46, 47, 49, 50, 52, 54, 55, 58, 59, 64, 72, 73, 75, 76, 77, 81, 82, 84, 88, 90, 91, 93, 94, 96, 98, 99, 101, 103, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 197, 199, 201, 203, 204, 205, 206, 207, 211, 213, 220, 221, 222, 234, 236, 243, 244, 253, 260, 263, 266, 267, 269, 270, 271, 272, 275, 280, 281, 292, 294, 302, 303, 304, 316, 317, 319, 320, 322, 327, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350], "http": [0, 1, 2, 4, 5, 13, 23, 29, 34, 35, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 128, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 269, 270, 272, 281, 292, 294, 303, 307, 326], "www": [0, 1, 2, 4, 5, 13, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 272, 281, 292, 294, 303], "org": [0, 1, 2, 4, 5, 13, 29, 34, 46, 72, 75, 90, 93, 94, 96, 98, 99, 103, 113, 114, 118, 121, 130, 132, 133, 140, 145, 152, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 185, 192, 193, 196, 199, 207, 211, 213, 220, 221, 234, 236, 243, 260, 267, 269, 270, 272, 281, 292, 294, 303, 326], "modul": [0, 1, 2, 13, 46, 93, 98, 103, 113, 122, 132, 140, 145, 152, 192, 220, 281, 327, 329, 330, 331, 332, 333, 335, 339, 342, 343, 344, 350, 351], "object": [1, 2, 3, 5, 6, 9, 14, 15, 28, 31, 38, 39, 41, 45, 46, 48, 49, 50, 53, 54, 55, 57, 58, 61, 62, 65, 70, 73, 74, 75, 76, 78, 83, 91, 92, 95, 99, 101, 103, 122, 124, 128, 130, 131, 154, 157, 160, 164, 167, 170, 173, 176, 179, 183, 190, 197, 208, 217, 222, 281, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 344, 348, 350], "includ": [1, 34, 76, 91, 101, 103, 128, 130, 159, 197, 204, 205, 253, 302, 320, 327, 329, 330, 331, 332, 335, 338, 339, 340, 342, 343, 348, 350, 351], "data": [1, 2, 3, 5, 7, 13, 16, 17, 18, 19, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 52, 54, 55, 59, 60, 61, 62, 66, 73, 76, 79, 80, 81, 91, 100, 121, 122, 124, 131, 132, 133, 137, 140, 147, 148, 149, 150, 151, 154, 155, 157, 158, 160, 162, 164, 165, 167, 168, 170, 171, 173, 174, 175, 176, 177, 179, 181, 183, 184, 185, 190, 193, 194, 196, 197, 198, 201, 203, 212, 221, 266, 275, 281, 292, 302, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344], "geometri": [1, 5, 28, 34, 46, 48, 51, 53, 55, 56, 57, 58, 59, 60, 61, 62, 66, 68, 70, 71, 76, 79, 83, 84, 85, 86, 91, 92, 95, 100, 104, 106, 111, 124, 128, 166, 169, 172, 182, 190, 197, 209, 212, 281, 303, 328, 329, 330, 332, 333, 334, 335, 337, 340, 342, 343, 344, 351], "base": [2, 3, 6, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 65, 73, 76, 77, 85, 91, 122, 124, 129, 131, 140, 154, 157, 160, 164, 167, 170, 173, 176, 179, 183, 194, 195, 197, 200, 201, 203, 208, 209, 210, 212, 214, 215, 217, 218, 319, 320, 327, 328, 330, 331, 332, 335, 337, 338, 343, 344, 348], "class": [2, 3, 5, 6, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 65, 66, 72, 73, 75, 76, 77, 80, 90, 91, 113, 121, 122, 124, 129, 130, 131, 132, 153, 154, 156, 157, 159, 160, 163, 164, 166, 167, 169, 170, 172, 173, 175, 176, 178, 179, 182, 183, 192, 193, 194, 195, 196, 197, 199, 200, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 327, 329, 331, 333, 340, 342, 343, 350, 351], "all": [2, 3, 7, 11, 22, 28, 29, 31, 33, 34, 35, 38, 46, 49, 50, 53, 55, 58, 59, 76, 78, 79, 91, 95, 122, 124, 128, 200, 201, 202, 203, 206, 253, 269, 270, 280, 281, 319, 320, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350, 351], "arrai": [2, 3, 5, 6, 7, 9, 10, 17, 19, 23, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 63, 64, 67, 68, 70, 73, 76, 85, 87, 88, 91, 101, 115, 119, 120, 122, 124, 131, 137, 167, 173, 186, 188, 189, 190, 191, 201, 204, 205, 206, 222, 224, 225, 226, 228, 229, 231, 233, 244, 249, 253, 257, 262, 263, 265, 266, 275, 280, 302, 316, 317, 320, 322, 324, 325, 328, 329, 330, 331, 333, 337, 338, 339, 340, 342, 344, 348, 351], "ar": [2, 5, 13, 23, 28, 29, 31, 34, 35, 38, 40, 41, 50, 51, 52, 53, 55, 58, 64, 68, 73, 75, 76, 77, 79, 84, 85, 86, 87, 91, 92, 100, 101, 115, 122, 124, 128, 131, 140, 149, 150, 175, 182, 186, 188, 190, 197, 199, 201, 203, 204, 205, 206, 222, 224, 249, 257, 262, 263, 265, 266, 269, 270, 271, 280, 307, 316, 318, 320, 322, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 350, 351], "subclass": [2, 3, 13, 28, 38, 41, 44, 327, 331, 350, 351], "numpi": [2, 3, 6, 7, 28, 29, 34, 35, 38, 45, 50, 56, 57, 66, 68, 70, 73, 76, 82, 88, 101, 119, 120, 122, 244, 249, 257, 269, 280, 302, 320, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350, 351], "ndarrai": [2, 3, 6, 7, 9, 17, 22, 27, 28, 29, 31, 33, 34, 35, 38, 39, 40, 41, 50, 51, 52, 53, 55, 56, 57, 59, 60, 63, 64, 65, 67, 68, 70, 74, 76, 80, 82, 84, 85, 86, 87, 88, 91, 115, 116, 119, 120, 122, 131, 186, 188, 189, 191, 201, 202, 203, 204, 205, 206, 222, 224, 225, 226, 227, 231, 244, 249, 253, 257, 261, 262, 263, 265, 266, 268, 269, 270, 271, 275, 280, 302, 304, 305, 313, 316, 317, 318, 319, 320, 322, 324, 325, 327, 350, 351], "store": [2, 3, 17, 19, 20, 23, 27, 29, 30, 33, 34, 35, 36, 41, 50, 66, 73, 76, 88, 266, 302, 327, 328, 330, 331, 338, 339, 340, 342, 350], "underli": [2, 3, 6, 73, 76, 327, 338, 340, 350], "result": [2, 17, 27, 29, 33, 34, 50, 55, 76, 79, 84, 91, 190, 253, 263, 280, 302, 327, 328, 329, 331, 334, 335, 337, 338, 340, 342, 343, 348, 350, 351], "potenti": [2, 28, 50, 55, 263, 327, 330, 340, 342, 343, 350], "complex": [2, 18, 22, 28, 35, 53, 76, 84, 88, 91, 100, 128, 197, 201, 203, 234, 244, 249, 257, 263, 265, 327, 332, 335, 336, 337, 338, 339, 340, 342, 343, 344, 350, 351], "type": [2, 3, 6, 7, 8, 9, 10, 11, 13, 17, 19, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 73, 74, 76, 77, 78, 79, 80, 81, 82, 86, 87, 88, 89, 91, 101, 117, 122, 124, 128, 131, 132, 147, 149, 150, 151, 178, 179, 187, 189, 201, 203, 204, 205, 212, 225, 226, 231, 249, 251, 253, 257, 261, 263, 265, 268, 269, 270, 271, 280, 304, 305, 313, 316, 317, 319, 320, 324, 327, 330, 331, 332, 335, 336, 337, 338, 339, 340, 341, 342, 350, 351], "while": [2, 29, 50, 55, 122, 327, 328, 329, 330, 331, 332, 337, 338, 339, 340, 342, 343, 344, 348, 350], "still": [2, 327, 332, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350], "achiev": [2, 31, 320, 327, 329, 332, 343, 344, 348, 350], "effici": [2, 350], "flexibl": [2, 331, 343, 348], "defin": [2, 3, 4, 5, 6, 10, 13, 23, 28, 29, 31, 35, 45, 46, 50, 57, 58, 65, 66, 68, 70, 72, 75, 76, 90, 91, 115, 122, 124, 128, 131, 153, 156, 159, 163, 166, 169, 172, 175, 178, 182, 186, 188, 196, 201, 203, 224, 263, 281, 320, 327, 328, 329, 332, 333, 337, 338, 339, 340, 344, 348, 350, 351], "sdynpyarrai": [2, 6, 20, 28, 47, 49, 52, 54, 73, 76, 327, 350], "which": [2, 3, 5, 6, 7, 10, 13, 22, 23, 28, 29, 31, 33, 34, 35, 39, 48, 50, 51, 53, 55, 56, 57, 58, 59, 68, 70, 73, 76, 77, 79, 83, 84, 85, 86, 91, 101, 115, 122, 140, 175, 182, 187, 197, 198, 201, 203, 204, 205, 261, 263, 265, 317, 318, 319, 320, 322, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 348, 350, 351], "The": [2, 3, 5, 6, 10, 17, 22, 23, 27, 28, 29, 31, 33, 34, 35, 38, 39, 40, 41, 42, 43, 48, 50, 51, 52, 53, 55, 58, 59, 60, 64, 66, 69, 74, 76, 77, 79, 80, 83, 84, 85, 86, 88, 89, 90, 91, 92, 101, 115, 119, 120, 122, 124, 131, 147, 148, 149, 150, 151, 190, 197, 198, 201, 203, 204, 205, 224, 231, 244, 249, 257, 261, 262, 263, 265, 266, 268, 269, 270, 271, 275, 280, 302, 304, 316, 317, 318, 319, 320, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 343, 344, 350, 351], "inherit": [2, 3, 28, 327, 350], "from": [2, 3, 6, 8, 9, 13, 17, 23, 27, 28, 29, 33, 34, 35, 40, 41, 42, 43, 45, 47, 48, 49, 50, 52, 53, 54, 58, 59, 60, 61, 62, 63, 65, 66, 67, 76, 78, 79, 80, 81, 84, 85, 86, 88, 90, 91, 99, 100, 101, 103, 115, 118, 121, 122, 124, 128, 132, 133, 140, 147, 148, 149, 150, 178, 179, 185, 186, 187, 188, 189, 190, 191, 193, 194, 197, 198, 201, 203, 206, 212, 222, 223, 224, 225, 226, 231, 244, 249, 262, 265, 266, 268, 275, 319, 320, 322, 324, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 343, 344, 350, 351], "main": [2, 50, 55, 332, 338, 339, 340, 343, 348, 350], "contribut": [2, 29, 198, 327, 329, 338, 339, 340, 342, 343, 344, 348], "allow": [2, 3, 22, 28, 31, 34, 38, 50, 55, 76, 77, 190, 201, 206, 212, 302, 320, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 348, 350], "user": [2, 22, 23, 33, 35, 50, 55, 58, 103, 122, 124, 190, 212, 327, 330, 331, 332, 340, 342, 343, 348, 350, 351], "access": [2, 3, 128, 327, 331, 332, 338, 340, 350], "field": [2, 3, 13, 34, 50, 66, 179, 327, 331, 338], "attribut": [2, 3, 6, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 68, 70, 73, 76, 77, 91, 122, 154, 157, 160, 164, 167, 170, 173, 176, 179, 183, 194, 195, 197, 200, 208, 209, 210, 212, 214, 215, 217, 218, 327, 331, 332, 340, 342, 350], "notat": [2, 348], "rather": [2, 31, 51, 53, 55, 203, 263, 265, 275, 320, 327, 329, 330, 332, 333, 338, 339, 340, 342, 343, 344, 348, 350], "than": [2, 6, 10, 28, 29, 31, 33, 34, 35, 41, 50, 51, 53, 55, 76, 122, 124, 190, 203, 263, 265, 271, 275, 280, 302, 320, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 348, 350], "index": [2, 3, 22, 23, 28, 31, 33, 35, 50, 53, 101, 119, 120, 122, 124, 224, 304, 327, 329, 331, 332, 333, 335, 338, 340, 344, 348], "e": [2, 6, 7, 8, 12, 17, 22, 27, 28, 29, 31, 33, 34, 35, 40, 50, 56, 57, 58, 68, 70, 91, 97, 115, 116, 117, 119, 120, 122, 124, 244, 263, 266, 317, 318, 319, 320, 322, 327, 331, 332, 333, 336, 338, 339, 340, 341, 342, 343, 348, 350, 351], "g": [2, 6, 8, 12, 17, 22, 27, 28, 29, 31, 33, 34, 35, 40, 50, 58, 115, 119, 120, 122, 124, 244, 249, 263, 266, 317, 318, 319, 320, 322, 327, 331, 333, 338, 340, 342, 343, 348, 350, 351], "shape": [3, 6, 7, 10, 17, 19, 20, 23, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 39, 47, 48, 49, 50, 52, 53, 54, 55, 56, 63, 64, 67, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 100, 106, 109, 111, 119, 120, 122, 173, 175, 194, 195, 198, 199, 201, 203, 204, 205, 206, 212, 231, 240, 262, 263, 265, 266, 273, 275, 278, 302, 317, 318, 319, 320, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 342, 343, 344, 351], "dtype": [3, 73, 76, 173, 327, 330, 331, 337, 340, 342, 344, 348, 350], "float": [3, 17, 27, 28, 29, 31, 33, 34, 35, 40, 48, 50, 51, 52, 53, 55, 76, 84, 86, 91, 92, 116, 117, 122, 131, 134, 189, 190, 191, 201, 203, 231, 244, 249, 251, 257, 261, 262, 266, 268, 269, 270, 271, 275, 280, 302, 304, 313, 317, 318, 319, 320, 322, 324, 325, 327, 338, 340, 350], "buffer": [3, 6, 17, 19, 20, 23, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 47, 49, 52, 54, 73, 74, 76], "none": [3, 6, 7, 16, 17, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 40, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 64, 65, 68, 70, 73, 74, 76, 77, 79, 82, 83, 86, 87, 88, 89, 91, 92, 100, 101, 102, 108, 109, 111, 112, 117, 122, 124, 128, 131, 134, 135, 136, 137, 139, 141, 142, 143, 144, 147, 149, 150, 154, 164, 170, 181, 186, 194, 197, 201, 202, 203, 206, 208, 212, 217, 228, 230, 235, 237, 238, 239, 240, 241, 242, 244, 254, 255, 256, 258, 262, 263, 264, 266, 269, 270, 273, 275, 277, 278, 290, 298, 302, 307, 315, 316, 319, 320, 323, 327, 328, 329, 330, 331, 332, 333, 337, 338, 342, 348, 350], "offset": [3, 6, 17, 19, 20, 23, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 47, 49, 50, 52, 54, 73, 74, 76, 91, 327, 328, 330, 333, 350], "0": [3, 6, 7, 17, 18, 19, 20, 21, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 68, 70, 73, 74, 76, 84, 88, 89, 91, 97, 100, 101, 106, 107, 108, 109, 110, 111, 117, 122, 131, 154, 167, 173, 187, 190, 197, 200, 201, 203, 204, 205, 208, 215, 217, 224, 228, 230, 232, 239, 244, 258, 263, 266, 273, 275, 278, 279, 280, 302, 304, 307, 314, 317, 318, 319, 320, 323, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350], "stride": [3, 6, 17, 19, 20, 23, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 47, 49, 52, 54, 73, 74, 76], "order": [3, 6, 17, 19, 20, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 47, 49, 50, 52, 54, 73, 74, 76, 115, 116, 131, 186, 188, 190, 253, 266, 297, 302, 327, 329, 331, 332, 333, 336, 337, 338, 339, 340, 342, 343, 344, 350, 351], "sourc": [3, 6, 7, 8, 9, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 63, 64, 65, 67, 68, 69, 70, 73, 74, 76, 77, 82, 84, 85, 86, 88, 89, 91, 95, 97, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 151, 154, 155, 157, 158, 160, 161, 162, 164, 165, 167, 168, 170, 171, 173, 174, 176, 177, 179, 180, 181, 183, 184, 186, 187, 188, 189, 190, 191, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 297, 298, 299, 300, 302, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 331, 342, 343, 348, 351], "superclass": [3, 28], "implement": [3, 29, 34, 35, 76, 207, 213, 327, 329, 331, 332, 343, 348, 350], "thei": [3, 28, 31, 34, 50, 76, 87, 186, 188, 263, 265, 320, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 348, 350], "were": [3, 28, 31, 33, 35, 50, 52, 76, 85, 198, 319, 327, 328, 329, 330, 331, 332, 333, 337, 338, 340, 342, 343, 344, 348, 350], "__init__": [3, 6, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 47, 48, 49, 50, 51, 52, 53, 54, 55, 65, 73, 76, 77, 91, 122, 124, 129, 131, 154, 157, 160, 164, 167, 170, 173, 176, 179, 183, 194, 195, 197, 200, 208, 209, 210, 212, 214, 215, 217, 218], "method": [3, 6, 14, 15, 16, 17, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 40, 47, 48, 49, 50, 51, 52, 53, 54, 55, 65, 66, 73, 76, 77, 84, 85, 91, 122, 124, 129, 131, 154, 157, 160, 164, 167, 170, 173, 176, 179, 183, 194, 195, 197, 208, 209, 210, 212, 214, 217, 218, 262, 265, 266, 269, 270, 271, 302, 307, 326, 327, 328, 330, 331, 332, 334, 335, 337, 338, 339, 340, 342, 343, 348, 350], "assemble_mat_dict": 3, "assembl": [3, 76, 91, 103, 305, 327, 328, 330, 333, 338, 339, 342, 348, 350], "dictionari": [3, 6, 9, 28, 29, 31, 42, 43, 47, 49, 50, 52, 54, 61, 62, 76, 81, 95, 117, 149, 150, 187, 197, 320, 327, 330, 333, 342, 351], "return": [3, 6, 7, 8, 9, 10, 11, 12, 17, 19, 22, 23, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 95, 101, 115, 116, 117, 119, 120, 122, 124, 128, 131, 137, 147, 148, 149, 150, 151, 179, 186, 187, 188, 189, 190, 191, 197, 198, 201, 203, 204, 205, 206, 212, 222, 223, 224, 225, 226, 227, 231, 244, 249, 251, 253, 257, 261, 262, 263, 265, 266, 268, 269, 270, 271, 275, 280, 302, 304, 305, 313, 316, 317, 318, 319, 320, 322, 324, 325, 327, 328, 329, 330, 331, 333, 338, 340, 348, 350, 351], "output_dict": 3, "content": [3, 34, 340, 342, 343], "file": [3, 6, 9, 13, 21, 28, 32, 34, 41, 45, 47, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 66, 71, 76, 79, 80, 81, 88, 91, 101, 121, 122, 124, 128, 132, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 163, 179, 186, 187, 188, 190, 198, 212, 328, 331, 332, 333, 340, 350, 351], "dict": [3, 28, 29, 31, 33, 35, 42, 43, 47, 48, 49, 50, 52, 53, 54, 55, 61, 62, 76, 81, 91, 95, 117, 134, 149, 150, 187, 197, 262, 266, 302], "properti": [3, 17, 19, 23, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 73, 76, 91, 115, 122, 154, 157, 160, 164, 167, 170, 173, 176, 179, 183, 186, 188, 194, 197, 208, 209, 217, 263, 328, 331, 337, 338, 339, 340, 341, 343, 348, 350], "These": [3, 5, 34, 50, 58, 122, 124, 327, 329, 330, 331, 332, 333, 339, 340, 342, 348, 350, 351], "through": [3, 50, 58, 85, 122, 124, 327, 328, 329, 331, 332, 333, 337, 338, 339, 341, 342, 348, 350, 351], "syntax": [3, 327, 348, 350], "classmethod": [3, 6, 28, 29, 34, 50, 73, 76, 91, 131, 154, 157, 160, 164, 167, 170, 173, 176, 179, 183], "load": [3, 6, 9, 28, 41, 47, 49, 50, 52, 54, 60, 76, 80, 81, 91, 122, 124, 133, 198, 212, 328, 329, 332, 334, 337, 342, 350], "filenam": [3, 28, 29, 34, 45, 48, 50, 51, 53, 55, 66, 76, 91, 122, 124, 149, 150, 198, 217, 327, 331], "specifi": [3, 5, 6, 7, 10, 17, 22, 23, 27, 28, 29, 31, 33, 34, 35, 38, 39, 40, 45, 47, 50, 51, 53, 55, 56, 57, 58, 59, 64, 66, 68, 70, 73, 76, 77, 79, 82, 83, 86, 88, 89, 91, 101, 117, 122, 124, 128, 147, 148, 190, 197, 201, 203, 206, 244, 261, 262, 263, 265, 266, 269, 275, 280, 304, 316, 319, 320, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 348, 350], "paramet": [3, 6, 7, 8, 9, 10, 11, 12, 17, 22, 23, 27, 28, 29, 31, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 100, 101, 108, 109, 115, 116, 117, 119, 120, 122, 124, 128, 131, 137, 147, 148, 149, 150, 151, 186, 187, 188, 189, 190, 191, 197, 198, 201, 203, 204, 205, 206, 212, 222, 224, 225, 226, 227, 231, 244, 249, 251, 253, 257, 261, 262, 263, 265, 266, 268, 269, 270, 271, 275, 280, 302, 304, 305, 307, 313, 316, 317, 318, 319, 320, 322, 324, 325, 326, 327, 329, 330, 332, 334, 336, 338, 339, 340, 342, 343, 350], "str": [3, 8, 12, 17, 22, 23, 27, 28, 29, 31, 33, 34, 35, 40, 45, 50, 51, 53, 55, 66, 76, 79, 89, 91, 101, 122, 134, 137, 147, 149, 150, 151, 187, 190, 198, 244, 262, 263, 265, 266, 269, 280, 327, 339, 348], "ha": [3, 28, 45, 50, 58, 72, 122, 124, 128, 197, 231, 317, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350, 351], "extens": [3, 28, 45, 348], "unv": [3, 28, 42, 43, 45, 47, 49, 50, 52, 54, 61, 62, 66, 76, 81, 145, 146, 147, 351], "uff": [3, 28, 45, 145, 351], "univers": [3, 13, 21, 23, 28, 32, 35, 45, 47, 49, 50, 52, 54, 58, 61, 62, 76, 81, 88, 145, 147, 148, 149, 150, 151, 152, 153, 156, 163, 179, 327, 350, 351], "otherwis": [3, 6, 10, 28, 29, 31, 34, 35, 41, 45, 50, 51, 52, 53, 55, 88, 91, 101, 244, 280, 302, 320, 327, 331, 333, 342, 343, 350], "rais": [3, 17, 27, 28, 29, 33, 34, 35, 40, 45, 50, 64, 66, 73, 76, 81, 89, 91, 147, 149, 150, 197, 203, 222, 269, 270, 271, 280, 304], "attributeerror": [3, 28, 45, 50, 66], "doe": [3, 23, 28, 34, 35, 45, 50, 66, 261, 327, 329, 330, 331, 337, 338, 339, 340, 342, 343, 344, 348, 350], "from_unv": [3, 28, 45, 47, 49, 50, 52, 54, 66, 76], "appropri": [3, 28, 33, 35, 45, 206, 327, 328, 329, 332, 338, 343, 350], "cl": [3, 28, 45, 50], "ndenumer": 3, "enumer": [3, 13, 16, 18, 21, 22, 32, 37, 200, 215, 330, 332, 342, 348, 350], "over": [3, 29, 31, 34, 50, 55, 148, 190, 266, 280, 319, 320, 327, 328, 330, 331, 332, 337, 338, 339, 340, 342, 343, 348, 350], "entri": [3, 6, 9, 28, 29, 101, 117, 122, 128, 147, 148, 190, 204, 205, 206, 327, 339, 340, 348, 350], "yield": [3, 69, 302], "tupl": [3, 29, 31, 34, 51, 122, 124, 320], "indic": [3, 6, 23, 26, 28, 34, 35, 73, 91, 100, 115, 119, 120, 122, 124, 197, 206, 208, 327, 331, 332, 333, 340, 348], "correspond": [3, 5, 6, 7, 9, 28, 31, 34, 50, 56, 57, 58, 63, 67, 68, 70, 76, 85, 88, 91, 115, 119, 120, 122, 124, 204, 205, 206, 222, 224, 262, 327, 328, 330, 331, 332, 333, 337, 338, 339, 340, 342, 344, 348, 350], "each": [3, 6, 10, 23, 28, 29, 31, 34, 38, 39, 50, 52, 53, 56, 57, 58, 59, 66, 68, 70, 75, 86, 88, 101, 116, 117, 119, 120, 122, 124, 151, 197, 201, 204, 205, 206, 244, 249, 269, 270, 275, 280, 302, 307, 319, 320, 322, 324, 325, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350], "save": [3, 28, 41, 50, 51, 53, 55, 58, 60, 76, 80, 91, 101, 103, 121, 198, 217, 327, 331, 332, 340, 342, 350], "Will": [3, 28, 147], "append": [3, 28, 50, 76, 122, 327, 328, 330, 332, 333, 338, 340, 342, 348, 350], "npy": [3, 327, 331, 332, 350], "savemat": [3, 28], "matlab": [3, 6, 9, 28, 41, 50, 60, 76, 80], "mat": [3, 6, 9, 28, 41, 50, 60, 76, 80, 140, 143, 190, 351], "name": [3, 7, 29, 34, 35, 47, 50, 53, 56, 57, 58, 68, 70, 91, 101, 122, 124, 128, 244, 327, 330, 331, 332, 338, 339, 340, 350, 351], "color": [4, 47, 49, 50, 52, 54, 56, 57, 58, 68, 70, 76, 83, 166, 167, 170, 183, 190, 327, 328, 331, 332, 333, 337, 338, 340, 343, 348, 350], "scheme": [4, 122, 124, 327, 329, 342], "match": [4, 28, 29, 31, 34, 39, 91, 269, 270, 271, 320, 327, 329, 330, 331, 332, 338, 343, 348, 350], "dea": [4, 275], "coordinatearrai": [5, 7, 9, 10, 11, 28, 29, 34, 35, 38, 50, 73, 74, 76, 84, 85, 88, 90, 91, 134, 202, 327, 328, 329, 331, 339, 340, 350, 351], "node": [5, 6, 7, 8, 10, 12, 28, 34, 46, 49, 50, 52, 54, 57, 58, 59, 63, 66, 67, 68, 70, 76, 86, 88, 89, 91, 92, 115, 116, 122, 124, 128, 166, 175, 183, 190, 281, 328, 329, 330, 331, 332, 333, 340, 342, 343, 351], "number": [5, 8, 12, 17, 23, 27, 28, 29, 31, 34, 35, 40, 48, 50, 51, 52, 53, 55, 58, 65, 73, 76, 84, 86, 91, 92, 100, 101, 103, 106, 107, 115, 116, 117, 119, 120, 122, 124, 128, 147, 148, 149, 150, 190, 201, 203, 224, 234, 244, 253, 261, 262, 263, 265, 266, 269, 270, 271, 275, 302, 313, 320, 322, 324, 325, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 350, 351], "direct": [5, 6, 7, 8, 10, 12, 34, 47, 50, 56, 59, 64, 76, 79, 88, 116, 117, 265, 284, 285, 286, 287, 327, 329, 330, 332, 338, 339, 340, 342, 343, 344, 348, 350, 351], "coordin": [5, 6, 7, 8, 10, 12, 28, 29, 34, 35, 38, 39, 46, 47, 50, 52, 56, 58, 59, 63, 64, 67, 68, 73, 74, 75, 76, 84, 85, 86, 88, 91, 115, 122, 124, 166, 167, 172, 202, 225, 226, 231, 281, 328, 329, 330, 331, 332, 333, 338, 339, 340, 342, 344, 348, 351], "degre": [5, 6, 7, 10, 28, 29, 34, 35, 50, 58, 73, 75, 76, 78, 88, 90, 91, 95, 115, 118, 119, 120, 131, 178, 204, 205, 269, 270, 304, 316, 319, 328, 329, 331, 334, 335, 336, 337, 341, 342, 348, 350, 351], "freedom": [5, 6, 7, 10, 28, 29, 34, 35, 50, 73, 75, 76, 78, 88, 90, 91, 95, 115, 118, 119, 120, 131, 178, 204, 205, 269, 270, 316, 319, 328, 329, 331, 334, 335, 336, 341, 342, 348, 350, 351], "consist": [5, 7, 11, 17, 27, 29, 31, 34, 35, 40, 50, 52, 58, 59, 76, 82, 83, 84, 85, 86, 90, 91, 92, 122, 186, 188, 190, 224, 263, 265, 280, 304, 320, 322, 327, 328, 329, 331, 332, 333, 340, 342, 348, 350], "local": [5, 6, 50, 52, 58, 59, 63, 67, 122, 302, 327, 330, 339, 340, 348, 350], "displac": [5, 31, 32, 34, 50, 53, 55, 58, 68, 75, 76, 79, 91, 131, 190, 201, 203, 204, 205, 225, 263, 265, 319, 320, 322, 327, 328, 331, 332, 337, 339, 340, 348, 350, 351], "system": [5, 28, 29, 46, 47, 50, 52, 56, 58, 59, 63, 64, 67, 68, 76, 86, 90, 92, 94, 95, 96, 131, 134, 156, 166, 172, 203, 224, 265, 275, 281, 302, 316, 317, 318, 319, 328, 329, 330, 332, 333, 335, 336, 341, 342, 343, 344, 351], "translat": [5, 6, 10, 28, 37, 50, 57, 116, 186, 188, 224, 227, 327, 330, 340, 344, 348, 350], "rotat": [5, 28, 37, 50, 51, 57, 58, 76, 79, 91, 116, 186, 188, 189, 191, 224, 227, 303, 304, 327, 330, 338, 340, 344, 348, 350, 351], "about": [5, 50, 58, 76, 115, 116, 189, 191, 304, 327, 331, 332, 336, 337, 338, 339, 342, 343, 344, 348, 350], "princip": [5, 50, 327, 350], "axi": [5, 22, 28, 29, 31, 33, 34, 35, 50, 59, 73, 76, 115, 219, 227, 235, 256, 266, 270, 271, 297, 304, 327, 330, 331, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350], "posit": [5, 6, 7, 10, 22, 31, 34, 47, 50, 52, 58, 59, 68, 76, 166, 190, 210, 218, 222, 224, 226, 231, 280, 317, 319, 320, 327, 328, 333, 338, 339, 340, 342, 343, 348, 350], "neg": [5, 7, 31, 34, 280, 317, 319, 320, 333, 339, 342, 343, 348], "also": [5, 13, 28, 29, 31, 33, 34, 35, 40, 46, 50, 76, 90, 101, 140, 206, 263, 269, 281, 302, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350, 351], "empti": [5, 34, 50, 58, 124, 327, 332, 340, 342, 350], "non": [5, 34, 85, 128, 327, 329, 339, 340, 343, 348, 350], "function": [5, 6, 7, 13, 17, 19, 21, 22, 23, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 68, 70, 72, 73, 75, 76, 80, 86, 90, 91, 94, 96, 98, 99, 100, 103, 113, 114, 115, 117, 118, 119, 120, 121, 122, 124, 128, 131, 132, 133, 140, 143, 145, 153, 156, 159, 163, 166, 169, 172, 175, 178, 179, 182, 185, 186, 188, 192, 196, 197, 199, 201, 204, 205, 206, 213, 221, 224, 225, 226, 234, 236, 243, 244, 260, 261, 262, 263, 265, 266, 267, 269, 270, 271, 272, 275, 281, 292, 294, 301, 302, 303, 311, 318, 320, 328, 329, 330, 331, 332, 333, 335, 336, 337, 340, 341, 343, 351], "inform": [6, 20, 34, 39, 47, 49, 50, 52, 54, 58, 76, 122, 124, 128, 137, 149, 150, 159, 186, 188, 190, 302, 327, 328, 331, 332, 337, 338, 339, 340, 342, 344, 348, 350, 351], "101x": [6, 8, 12, 91, 330, 340, 350, 351], "coordinate_arrai": [6, 10, 50, 327, 329, 330, 331, 332, 337, 338, 339, 340, 342, 343, 344, 348, 350], "helper": [6, 38, 39, 47, 49, 52, 53, 54, 73, 76, 327, 329, 331, 348, 351], "creat": [6, 7, 8, 9, 10, 22, 28, 29, 31, 33, 34, 35, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 68, 70, 71, 73, 74, 76, 77, 79, 80, 84, 85, 86, 88, 91, 95, 98, 99, 101, 103, 113, 114, 122, 124, 128, 131, 190, 196, 197, 212, 262, 266, 275, 304, 311, 322, 328, 329, 332, 333, 334, 335, 337, 338, 339, 340, 342, 344, 348, 351], "ab": [6, 31, 319, 320, 327, 332, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350], "sign": [6, 91, 327, 328, 330, 333, 338, 340, 342, 348, 350], "flip": [6, 76, 87, 327, 328, 330, 333, 338, 339, 342, 348], "data_dtyp": [6, 47, 49, 52, 54, 73], "uint64": [6, 47, 49, 52, 54], "int8": 6, "datatyp": [6, 16], "direction_string_arrai": 6, "string": [6, 7, 8, 9, 12, 17, 22, 27, 28, 29, 31, 33, 34, 35, 40, 50, 58, 71, 76, 79, 89, 91, 101, 122, 124, 147, 148, 151, 190, 201, 266, 280, 327, 331, 338, 348, 350], "represent": [6, 8, 12, 76, 89, 91, 128, 151, 305, 327, 328, 338, 339, 340, 343, 348, 350, 351], "repres": [6, 8, 12, 23, 31, 34, 52, 90, 91, 101, 122, 124, 189, 191, 204, 205, 206, 249, 253, 305, 316, 319, 320, 327, 328, 329, 330, 332, 335, 338, 340, 342, 348, 350, 351], "np": [6, 9, 17, 22, 27, 28, 29, 31, 33, 34, 35, 38, 39, 40, 41, 50, 51, 52, 53, 55, 59, 60, 64, 65, 76, 80, 82, 84, 85, 86, 87, 91, 116, 119, 120, 122, 131, 189, 191, 201, 203, 204, 205, 206, 225, 226, 227, 231, 244, 249, 257, 261, 263, 265, 266, 268, 269, 270, 271, 275, 280, 304, 305, 313, 316, 317, 318, 319, 320, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350], "from_matlab_cellstr": 6, "cellstr_data": [6, 9], "cellstr": [6, 9], "scipi": [6, 9, 17, 23, 27, 28, 29, 33, 34, 35, 40, 41, 50, 60, 76, 80, 244, 266, 316, 327, 333, 340, 343, 348, 350], "io": [6, 9, 28, 41, 50, 60, 76, 80], "loadmat": [6, 9, 41, 50, 60, 76, 80], "cell": [6, 9], "variabl": [6, 9, 23, 31, 34, 35, 76, 79, 91, 122, 124, 128, 320, 327, 331, 332, 340, 348, 350], "built": [6, 9, 327, 329, 340, 348, 351], "provid": [6, 9, 10, 11, 22, 23, 29, 34, 35, 76, 81, 85, 86, 91, 253, 262, 266, 269, 270, 271, 275, 327, 329, 330, 331, 332, 333, 338, 340, 342, 343, 350, 351], "from_nodelist": [6, 327, 350], "1": [6, 7, 8, 10, 12, 16, 17, 18, 20, 21, 23, 25, 27, 28, 29, 31, 32, 33, 34, 35, 37, 39, 40, 48, 50, 52, 53, 55, 56, 57, 58, 59, 68, 70, 76, 87, 88, 91, 97, 104, 106, 111, 115, 116, 122, 124, 128, 131, 164, 167, 170, 173, 183, 187, 190, 200, 201, 203, 204, 205, 208, 215, 219, 224, 227, 231, 235, 239, 249, 253, 255, 258, 262, 266, 269, 270, 273, 275, 276, 278, 279, 280, 293, 297, 302, 304, 307, 316, 317, 319, 320, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 337, 343, 344, 348, 350], "2": [6, 7, 8, 10, 12, 16, 18, 21, 29, 31, 32, 34, 50, 56, 57, 58, 68, 70, 76, 89, 91, 105, 115, 117, 128, 131, 134, 190, 200, 201, 203, 204, 205, 206, 208, 217, 222, 224, 231, 253, 263, 269, 270, 275, 302, 304, 317, 319, 320, 322, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 343, 344, 348, 350], "flatten": [6, 7, 10, 28, 33, 50, 327, 329, 338, 339, 340, 344, 348, 350], "true": [6, 10, 28, 29, 31, 33, 34, 35, 41, 42, 43, 44, 47, 49, 50, 51, 52, 53, 54, 55, 73, 76, 81, 84, 86, 91, 102, 104, 106, 116, 119, 120, 122, 124, 142, 151, 190, 197, 201, 203, 204, 205, 206, 208, 217, 232, 244, 254, 258, 274, 275, 302, 304, 314, 320, 327, 329, 330, 331, 333, 337, 338, 339, 340, 342, 343, 348, 350], "set": [6, 10, 22, 23, 28, 29, 31, 33, 34, 35, 48, 50, 52, 53, 55, 59, 65, 75, 76, 78, 79, 82, 84, 86, 89, 91, 92, 118, 119, 120, 122, 179, 193, 222, 224, 244, 266, 302, 307, 317, 320, 322, 324, 329, 331, 334, 339, 340, 342, 343, 344, 350, 351], "iter": [6, 10, 22, 29, 31, 34, 49, 50, 52, 54, 57, 59, 69, 70, 76, 79, 83, 91, 92, 119, 120, 122, 124, 128, 147, 148, 149, 150, 151, 186, 188, 190, 262, 266, 280, 302, 319, 320, 327, 329, 331], "list": [6, 10, 29, 34, 35, 41, 50, 55, 56, 57, 68, 69, 70, 73, 76, 78, 79, 83, 91, 100, 101, 119, 120, 122, 124, 128, 134, 147, 148, 149, 150, 186, 188, 190, 194, 206, 280, 327, 328, 330, 331, 332, 333, 338, 348, 350, 351], "default": [6, 10, 17, 23, 27, 28, 29, 31, 33, 34, 35, 38, 39, 40, 41, 42, 43, 48, 50, 51, 52, 53, 55, 59, 64, 73, 76, 77, 79, 83, 84, 86, 89, 91, 92, 101, 116, 119, 120, 122, 124, 131, 149, 150, 151, 190, 197, 201, 203, 204, 205, 206, 231, 244, 253, 263, 265, 266, 269, 270, 275, 280, 302, 304, 307, 319, 320, 322, 330, 331, 332, 334, 350], "three": [6, 10, 50, 58, 186, 188, 224, 327, 328, 333, 338, 339, 340, 342, 343, 344, 348, 350], "x": [6, 7, 8, 10, 12, 22, 28, 29, 31, 33, 34, 35, 50, 52, 56, 58, 76, 79, 91, 115, 116, 122, 131, 186, 188, 189, 191, 203, 204, 205, 206, 217, 219, 222, 223, 224, 231, 250, 256, 261, 262, 265, 266, 275, 293, 304, 307, 312, 319, 327, 329, 331, 332, 337, 338, 339, 340, 342, 343, 344, 348, 350], "y": [6, 7, 8, 10, 12, 29, 34, 50, 52, 58, 76, 79, 91, 115, 116, 131, 189, 191, 217, 219, 223, 224, 231, 304, 307, 327, 332, 337, 339, 340, 342, 344, 348, 350], "z": [6, 7, 8, 10, 12, 34, 50, 52, 58, 59, 76, 79, 91, 115, 116, 189, 191, 217, 223, 224, 231, 304, 307, 317, 327, 330, 332, 339, 340, 342, 344, 348, 350], "bool": [6, 7, 10, 28, 29, 31, 33, 34, 35, 41, 42, 43, 44, 47, 49, 50, 51, 52, 53, 54, 55, 59, 73, 76, 81, 84, 91, 116, 119, 120, 122, 124, 128, 149, 150, 151, 190, 197, 201, 203, 204, 205, 206, 212, 244, 266, 304, 320, 331], "prior": [6, 10, 33, 35, 340, 343, 350], "output": [6, 10, 29, 41, 50, 55, 60, 76, 80, 84, 85, 89, 91, 117, 128, 131, 137, 140, 147, 148, 149, 150, 185, 190, 204, 205, 249, 262, 263, 265, 266, 280, 302, 307, 327, 328, 329, 331, 332, 333, 342, 343, 348, 350, 351], "fals": [6, 7, 10, 28, 29, 31, 33, 34, 35, 40, 41, 44, 48, 50, 51, 53, 55, 59, 73, 76, 84, 91, 102, 116, 119, 120, 122, 124, 128, 149, 150, 164, 181, 190, 194, 197, 201, 203, 204, 205, 206, 208, 217, 218, 230, 232, 235, 244, 264, 266, 299, 302, 304, 320, 323, 327, 330, 333, 337, 338, 339, 348, 350], "dimens": [6, 10, 28, 34, 42, 43, 88, 119, 120, 122, 204, 205, 231, 244, 249, 257, 327, 333, 340, 348, 350], "one": [6, 10, 28, 29, 31, 33, 35, 41, 50, 76, 78, 87, 101, 119, 120, 122, 128, 145, 201, 203, 206, 263, 265, 269, 270, 275, 280, 317, 327, 328, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350], "larger": [6, 10, 302, 329, 331, 332, 337, 338, 340, 343, 344, 348, 350], "input": [6, 7, 10, 28, 29, 31, 33, 34, 35, 38, 50, 56, 57, 68, 70, 76, 78, 83, 91, 92, 131, 201, 249, 262, 263, 265, 266, 269, 270, 275, 302, 307, 317, 327, 328, 329, 331, 332, 333, 338, 339, 340, 341, 342, 348, 350], "due": [6, 10, 76, 131, 327, 328, 329, 330, 332, 333, 337, 338, 339, 340, 342, 343, 348, 350], "ad": [6, 10, 22, 28, 34, 51, 86, 89, 190, 327, 332, 333, 335, 336, 342, 343], "size": [6, 10, 29, 34, 35, 50, 55, 91, 101, 115, 122, 204, 205, 217, 222, 266, 269, 270, 307, 316, 319, 327, 328, 329, 330, 331, 332, 333, 338, 340, 342, 343, 348, 350], "local_direct": 6, "local_direction_arrai": 6, "where": [6, 22, 23, 28, 29, 31, 34, 35, 50, 59, 68, 76, 115, 122, 186, 188, 201, 224, 231, 249, 257, 262, 263, 265, 266, 269, 270, 271, 319, 320, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350, 351], "For": [6, 31, 76, 119, 120, 128, 206, 253, 275, 280, 302, 320, 322, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350], "exampl": [6, 31, 33, 35, 50, 128, 206, 253, 275, 280, 320, 322, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 350], "would": [6, 50, 58, 76, 79, 91, 263, 265, 268, 280, 327, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350], "offset_node_id": 6, "offset_valu": 6, "id": [6, 7, 28, 47, 49, 50, 52, 54, 56, 57, 58, 59, 65, 68, 70, 76, 86, 89, 122, 124, 149, 150, 327, 328, 329, 330, 333, 340, 342, 350], "int": [6, 8, 12, 17, 23, 27, 28, 29, 31, 33, 34, 35, 40, 48, 50, 51, 52, 53, 55, 73, 76, 84, 91, 101, 116, 117, 119, 120, 122, 124, 134, 147, 148, 201, 203, 204, 205, 208, 244, 253, 262, 266, 275, 302, 313, 318, 319, 320, 322, 324, 325, 327, 342], "valu": [6, 7, 16, 18, 21, 22, 28, 29, 31, 32, 33, 34, 35, 37, 39, 41, 52, 53, 55, 69, 74, 76, 79, 84, 91, 101, 117, 119, 120, 122, 124, 146, 149, 150, 151, 179, 190, 197, 200, 201, 206, 215, 224, 251, 253, 257, 261, 262, 263, 265, 266, 268, 269, 271, 280, 302, 304, 313, 317, 319, 320, 322, 324, 325, 327, 328, 329, 330, 331, 332, 333, 338, 339, 340, 342, 343, 344, 348, 350, 351], "string_arrai": [6, 7, 327, 329, 330, 331, 337, 340, 342, 350], "structured_arrai": [7, 56, 57, 68, 70, 88], "force_broadcast": [7, 329, 330, 350], "an": [7, 16, 22, 23, 28, 29, 31, 33, 34, 35, 41, 50, 51, 52, 53, 55, 56, 57, 58, 60, 63, 64, 67, 68, 70, 71, 73, 76, 79, 80, 81, 83, 87, 88, 89, 91, 101, 115, 122, 124, 128, 137, 146, 147, 186, 188, 194, 200, 201, 204, 205, 212, 215, 224, 231, 261, 262, 263, 265, 266, 268, 269, 270, 271, 275, 280, 304, 318, 319, 320, 322, 324, 325, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 351], "test": [7, 46, 50, 55, 56, 57, 68, 70, 75, 76, 86, 88, 91, 98, 100, 131, 169, 172, 182, 190, 196, 249, 302, 332, 334, 335, 336, 337, 341, 343, 344, 348, 350], "analysi": [7, 50, 56, 57, 68, 70, 88, 98, 122, 192, 249, 327, 328, 329, 331, 333, 334, 335, 336, 338, 339, 342, 344, 348, 350], "two": [7, 31, 34, 65, 82, 88, 89, 122, 124, 204, 205, 249, 257, 307, 317, 320, 327, 328, 329, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350, 351], "multidimension": [7, 56, 57, 68, 70, 88], "integ": [7, 8, 12, 28, 31, 34, 35, 50, 52, 56, 57, 58, 68, 70, 76, 83, 122, 261, 320, 327, 343], "cast": [7, 56, 57, 68, 70], "9": [7, 21, 31, 32, 34, 56, 57, 68, 70, 131, 164, 190, 217, 253, 319, 320, 322, 323, 327, 328, 330, 331, 332, 338, 340, 342, 343, 348, 350], "pass": [7, 22, 23, 28, 31, 33, 34, 35, 40, 41, 48, 50, 53, 55, 56, 57, 60, 68, 70, 73, 76, 80, 84, 85, 88, 91, 122, 124, 197, 203, 212, 222, 244, 275, 320, 327, 328, 329, 331, 332, 333, 338, 339, 342, 348, 350, 351], "must": [7, 22, 28, 29, 31, 34, 39, 50, 55, 58, 64, 66, 89, 91, 101, 119, 120, 266, 269, 270, 271, 320, 327, 329, 330, 332, 333, 337, 339, 340, 341, 342, 343, 344, 348, 350], "rx": [7, 186, 188, 189, 191, 208, 307, 327, 340, 350], "ry": [7, 186, 188, 189, 191, 327, 340, 350], "rz": [7, 186, 188, 189, 191, 327, 340, 350], "whether": [7, 22, 34, 50, 51, 53, 55, 59, 84, 91, 122, 124, 128, 190, 203, 263, 328, 329, 330, 332, 338, 348, 350], "given": [7, 29, 31, 34, 50, 58, 101, 115, 122, 201, 231, 262, 263, 265, 266, 275, 305, 320, 327, 329, 331, 332, 337, 338, 339, 340, 342, 343, 344, 348, 350, 351], "assum": [7, 31, 34, 89, 101, 117, 122, 263, 316, 320, 322, 329, 332, 337, 338, 340, 342, 343, 348, 350, 351], "altern": [7, 28, 31, 33, 35, 56, 57, 68, 70, 88, 215, 217, 265, 304, 320, 327, 329, 338, 340, 342, 350], "singl": [7, 11, 17, 22, 27, 29, 34, 35, 40, 41, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 68, 70, 76, 81, 83, 101, 117, 193, 194, 275, 280, 316, 319, 327, 328, 330, 332, 333, 336, 337, 339, 342, 343, 348], "pars": [7, 12, 28, 147, 331, 351], "combin": [7, 11, 47, 49, 50, 52, 54, 76, 78, 81, 83, 91, 92, 124, 327, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 348, 350], "regardless": [7, 41, 190, 330, 332, 342, 343, 348], "arg": [11, 122, 129, 195], "nddataarrai": [13, 17, 19, 22, 23, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38, 41, 42, 43, 44, 48, 50, 327, 331, 350, 351], "time": [13, 17, 27, 29, 31, 32, 33, 34, 35, 40, 50, 53, 55, 76, 91, 115, 117, 122, 131, 133, 137, 140, 176, 178, 190, 212, 249, 261, 262, 266, 275, 280, 294, 298, 299, 302, 317, 318, 319, 320, 329, 330, 331, 332, 335, 336, 337, 338, 339, 340, 341, 343, 344, 348, 351], "histori": [13, 17, 27, 29, 33, 34, 35, 40, 137, 140, 178, 212, 249, 266, 318, 327, 329, 337, 338, 341, 350, 351], "sever": [13, 28, 44, 50, 76, 83, 178, 328, 329, 333, 335, 337, 338, 340, 342, 343, 350, 351], "contain": [13, 18, 21, 28, 29, 31, 32, 33, 34, 35, 37, 39, 41, 42, 43, 47, 48, 49, 50, 52, 54, 58, 59, 60, 61, 62, 76, 78, 80, 81, 90, 91, 95, 101, 122, 124, 128, 137, 149, 150, 179, 187, 197, 198, 201, 203, 231, 244, 249, 266, 275, 280, 302, 319, 320, 324, 325, 327, 328, 329, 330, 331, 332, 333, 335, 337, 338, 339, 340, 342, 343, 344, 348, 350, 351], "specif": [13, 22, 28, 91, 151, 201, 253, 329, 331, 337, 339, 340, 342, 348, 350, 351], "capabl": [13, 327, 328, 330, 331, 333, 338, 342, 350, 351], "connect": [13, 22, 49, 50, 54, 57, 58, 59, 70, 91, 115, 122, 124, 128, 170, 327, 328, 330, 332, 333, 339, 340, 348, 350], "format": [13, 22, 28, 31, 33, 35, 50, 53, 58, 61, 62, 76, 88, 89, 91, 101, 122, 140, 145, 147, 148, 151, 152, 327, 328, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 348, 350, 351], "parent": [14, 15, 24, 25, 77, 214], "powerspectraldensityarrai": [16, 17, 27, 34, 329], "compare_data": [16, 29], "qmainwindow": [16, 22, 194, 209, 212, 218], "enum": [16, 18, 21, 28, 32, 37, 200, 215], "coher": [16, 17, 21, 27, 29, 35, 197, 329, 332, 343, 350], "imaginari": [16, 18, 22, 35, 197, 204, 205, 327, 332, 338, 339, 342, 348, 350], "16": [16, 21, 32, 50, 307, 327, 328, 330, 332, 338, 340, 342, 343, 344, 348, 350], "magnitud": [16, 18, 22, 29, 35, 201, 217, 329, 338, 339, 340, 342, 343, 348, 350], "phase": [16, 18, 22, 29, 34, 35, 53, 275, 279, 280, 327, 328, 329, 332, 337, 338, 339, 340, 342, 343, 344, 348, 350], "4": [16, 18, 21, 24, 25, 31, 34, 47, 50, 55, 56, 58, 76, 91, 122, 128, 131, 173, 186, 188, 190, 222, 224, 253, 319, 320, 327, 328, 329, 330, 331, 332, 333, 337, 339, 342, 343, 344, 348, 350], "real": [16, 18, 22, 28, 35, 73, 76, 88, 122, 201, 203, 204, 205, 327, 329, 332, 336, 337, 338, 339, 340, 341, 342, 343, 350], "8": [16, 21, 29, 31, 32, 33, 34, 50, 53, 55, 86, 91, 92, 128, 190, 269, 270, 319, 320, 327, 328, 330, 331, 332, 337, 338, 339, 340, 342, 343, 348, 350], "clear_select": 16, "event": [16, 22, 28, 31, 33, 35, 194, 210, 218], "coherence_st": 16, "connectui": 16, "deselect_diagon": 16, "deselect_lower_triangular": 16, "deselect_upper_triangular": 16, "extend_selection_matrix": 16, "find_function_typ": 16, "imaginary_st": 16, "initui": 16, "init_matrix_plot": 16, "invert_select": 16, "magnitude_st": 16, "phase_st": 16, "plot": [16, 18, 22, 28, 29, 31, 33, 35, 46, 48, 50, 51, 53, 55, 73, 76, 77, 84, 91, 100, 122, 124, 131, 196, 197, 212, 217, 224, 235, 281, 320, 328, 329, 331, 332, 333, 334, 337, 338, 339, 342, 343, 344, 348, 351], "plot_selected_funct": 16, "real_stat": 16, "select_diagon": 16, "select_lower_triangular": 16, "select_plot": 16, "select_upper_triangular": 16, "selector_click": 16, "selector_unclick": 16, "settext": 16, "state_chang": 16, "update_select": [16, 194], "nelement": [17, 19, 23, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36], "static": [17, 27, 28, 29, 31, 34, 35, 47, 49, 50, 52, 54, 73, 76, 124, 195, 214, 319, 320, 328, 329, 330, 331, 333, 337, 338], "from_time_data": [17, 27, 29, 35, 327, 331, 342, 350], "response_data": [17, 27, 29, 35, 40, 332], "timehistoryarrai": [17, 27, 29, 31, 33, 35, 39, 40, 50, 55, 76, 91, 137, 190, 212, 327, 329, 331, 332, 350, 351], "samples_per_averag": [17, 27, 29, 35, 40, 266, 331, 342], "overlap": [17, 27, 29, 34, 35, 40, 91, 197, 244, 266, 327, 328, 331, 332, 342, 343, 350], "window": [17, 22, 23, 27, 29, 34, 35, 40, 50, 55, 76, 77, 194, 197, 212, 244, 266, 327, 331, 332, 337, 340, 342, 343, 350], "reference_data": [17, 27, 29, 35, 40], "comput": [17, 23, 27, 29, 31, 33, 34, 35, 40, 50, 53, 63, 64, 67, 76, 82, 84, 85, 87, 91, 115, 128, 131, 186, 188, 189, 197, 199, 201, 203, 204, 205, 206, 211, 212, 222, 224, 225, 226, 231, 236, 244, 253, 257, 260, 262, 263, 265, 266, 267, 268, 269, 270, 271, 302, 307, 317, 318, 319, 320, 324, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 341, 343, 348, 351], "refer": [17, 23, 27, 28, 29, 34, 35, 40, 50, 76, 91, 193, 194, 197, 201, 203, 204, 205, 207, 253, 262, 264, 266, 269, 270, 271, 302, 320, 326, 327, 329, 330, 331, 332, 337, 338, 339, 340, 342, 343, 344, 348, 350], "respons": [17, 23, 27, 28, 29, 31, 33, 34, 35, 40, 76, 91, 131, 201, 203, 204, 205, 206, 260, 262, 263, 264, 265, 266, 267, 269, 270, 271, 302, 317, 318, 319, 327, 331, 334, 335, 336, 337, 341, 343, 351], "sampl": [17, 23, 27, 29, 31, 34, 35, 40, 50, 55, 244, 249, 261, 266, 275, 318, 319, 320, 322, 324, 325, 327, 331, 332, 338, 342, 343, 350], "split": [17, 27, 28, 29, 34, 35, 40, 69, 340, 343, 348], "up": [17, 27, 28, 29, 34, 35, 40, 50, 58, 69, 76, 101, 224, 329, 331, 334, 337, 339, 340, 342, 343, 350], "signal": [17, 27, 28, 29, 31, 33, 34, 35, 40, 91, 211, 212, 220, 244, 249, 257, 261, 266, 272, 275, 280, 297, 316, 319, 320, 322, 324, 325, 327, 329, 331, 332, 337, 338, 339, 342, 343], "averag": [17, 23, 27, 29, 34, 35, 40, 244, 262, 266, 275, 327, 329, 332, 342, 343, 348, 350], "mean": [17, 27, 28, 29, 34, 35, 39, 40, 76, 91, 257, 327, 328, 329, 332, 337, 338, 339, 340, 342, 343, 348, 350, 351], "treat": [17, 27, 29, 35, 40, 76, 328, 332, 340, 342, 348], "measur": [17, 27, 29, 34, 35, 40, 76, 85, 197, 318, 327, 329, 332, 333, 337, 338, 339, 340, 341, 342, 343, 344, 348, 350], "frame": [17, 27, 29, 34, 35, 40, 51, 53, 55, 100, 104, 106, 107, 111, 244, 266, 275, 327, 332, 342, 343, 350], "fraction": [17, 27, 29, 31, 34, 35, 40, 88, 91, 244, 266, 317, 318, 319, 320, 337, 338, 340, 342, 348], "5": [17, 18, 21, 24, 25, 27, 28, 29, 31, 32, 33, 34, 35, 40, 48, 50, 58, 84, 91, 97, 100, 108, 109, 111, 128, 190, 244, 253, 266, 319, 320, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 342, 343, 344, 348, 350], "50": [17, 27, 29, 34, 35, 40, 48, 50, 55, 244, 266, 319, 328, 329, 330, 332, 337, 338, 339, 340, 342, 343, 344, 348, 350], "1d": [17, 27, 29, 35, 40, 91, 119, 120, 122, 204, 205, 263, 265, 266, 275, 327, 348, 350], "length": [17, 27, 28, 29, 31, 33, 34, 35, 40, 41, 50, 58, 76, 83, 91, 97, 101, 115, 116, 122, 124, 204, 205, 266, 269, 270, 271, 280, 316, 317, 319, 320, 327, 329, 332, 342, 343, 344, 348, 350], "coeffici": [17, 27, 29, 35, 40, 76, 88, 206, 244, 266, 316, 318, 331, 332, 339, 340, 344, 350], "hann": [17, 27, 29, 34, 327, 329, 332, 343, 350], "appli": [17, 22, 23, 27, 28, 29, 31, 33, 34, 35, 40, 50, 52, 53, 55, 76, 84, 91, 92, 101, 266, 275, 316, 320, 327, 328, 329, 330, 332, 333, 335, 337, 338, 339, 340, 341, 342, 343, 348], "obtain": [17, 27, 29, 35, 40, 50, 76, 266, 327, 328, 329, 330, 331, 332, 338, 339, 343, 348, 350], "squar": [17, 27, 29, 91, 117, 204, 205, 206, 257, 263, 265, 269, 307, 329, 332, 333, 340, 342, 348, 350], "matrix": [17, 27, 28, 29, 31, 34, 35, 47, 50, 55, 56, 72, 76, 84, 88, 91, 92, 115, 116, 119, 120, 122, 124, 128, 131, 186, 188, 189, 191, 201, 204, 205, 206, 222, 223, 224, 227, 244, 249, 257, 262, 263, 265, 266, 268, 269, 270, 271, 302, 304, 305, 319, 320, 327, 328, 329, 330, 331, 332, 333, 342, 343, 344, 348, 350, 351], "valueerror": [17, 27, 28, 29, 33, 34, 35, 40, 50, 64, 73, 76, 81, 89, 91, 197, 203, 222, 280, 304], "do": [17, 27, 28, 29, 31, 33, 35, 40, 76, 89, 91, 320, 327, 328, 329, 330, 331, 332, 333, 336, 339, 340, 341, 342, 343, 348, 350], "abscissa": [17, 22, 27, 28, 29, 31, 33, 34, 35, 38, 40, 44, 76, 161, 179, 180, 269, 270, 271, 297, 302, 327, 329, 331, 332, 337, 338, 342, 348, 350], "psd": [17, 27, 29, 329], "function_typ": [17, 19, 23, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 179], "variou": [18, 28, 35, 40, 50, 58, 73, 76, 84, 85, 101, 190, 272, 327, 329, 331, 333, 335, 340, 341, 342, 343, 344, 350, 351], "wai": [18, 327, 329, 330, 331, 332, 337, 338, 340, 342, 343, 344, 348, 350, 351], "magphas": 18, "realimag": 18, "data_dimens": [19, 28], "ordinate_dtyp": [19, 28], "float64": [19, 28, 47, 52, 173, 327], "correl": [19, 190, 213, 224, 236, 327, 328, 331, 332, 333, 337, 342, 343, 351], "num_el": [20, 28, 33, 35, 122], "sum": [20, 31, 275, 320, 324, 325, 340, 342, 343, 348, 351], "decai": [20, 31, 39, 317, 320, 322, 324, 325, 332, 338, 339, 343, 348, 350, 351], "sine": [20, 31, 34, 39, 275, 280, 320, 322, 324, 325, 327, 332, 337, 338, 339, 342, 343, 350, 351], "construct_displac": 20, "sample_r": [20, 31, 134, 244, 249, 315, 318, 320, 322, 323, 324, 325, 327, 337, 342, 343, 350], "block_siz": [20, 31, 315, 320, 322, 323, 324, 325], "acceleration_factor": [20, 31, 320, 322, 323], "construct_sign": 20, "construct_veloc": 20, "found": [21, 34, 35, 50, 149, 150, 307, 332, 337, 340, 348, 350, 351], "autocorrel": 21, "7": [21, 31, 100, 101, 128, 164, 190, 319, 320, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 348, 350], "autospectrum": [21, 343], "6": [21, 31, 32, 100, 128, 131, 190, 253, 319, 320, 327, 328, 329, 330, 331, 332, 337, 338, 339, 340, 342, 343, 344, 348, 350], "crosscorrel": 21, "crossspectrum": 21, "cumulative_frequency_distribut": 21, "13": [21, 32, 190, 327, 328, 330, 331, 332, 338, 340, 342, 343, 348, 350], "eigenvalu": [21, 176, 328, 332, 342], "22": [21, 32, 57, 327, 328, 330, 332, 340, 343, 348, 350], "eigenvector": [21, 332, 342], "23": [21, 32, 57, 311, 327, 328, 330, 332, 340, 343, 348, 350], "energy_spectral_dens": 21, "10": [21, 29, 31, 34, 91, 134, 190, 201, 203, 269, 270, 302, 319, 320, 326, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 348, 350], "finite_impulse_response_filt": 21, "25": [21, 34, 48, 50, 53, 55, 84, 117, 327, 328, 330, 332, 338, 339, 340, 342, 343, 348, 350], "force_pattern": 21, "19": [21, 32, 327, 328, 330, 332, 337, 338, 340, 342, 343, 344, 348, 350], "frequency_response_funct": [21, 337, 342, 348], "impulse_response_funct": 21, "29": [21, 327, 328, 330, 340, 348, 350], "mode_indicator_funct": 21, "18": [21, 32, 128, 327, 328, 330, 332, 338, 340, 342, 343, 344, 348, 350], "multiple_coher": 21, "26": [21, 327, 328, 330, 332, 340, 344, 348, 350], "orbit": 21, "17": [21, 32, 327, 328, 330, 332, 338, 340, 342, 343, 344, 348, 350], "order_funct": 21, "27": [21, 327, 328, 330, 331, 332, 340, 348, 350], "partial_coher": 21, "21": [21, 32, 50, 57, 58, 217, 327, 328, 330, 332, 340, 343, 348, 350], "partial_pow": 21, "20": [21, 32, 48, 50, 51, 53, 55, 58, 84, 100, 104, 106, 107, 111, 217, 327, 328, 329, 330, 332, 337, 338, 340, 342, 343, 348, 350], "peaks_vallei": 21, "14": [21, 190, 327, 328, 330, 331, 332, 338, 340, 342, 343, 344, 348, 350], "phase_compens": 21, "28": [21, 327, 328, 330, 340, 348, 350], "power_spectral_dens": 21, "probability_density_funct": 21, "11": [21, 32, 50, 57, 190, 253, 326, 327, 328, 330, 331, 332, 333, 338, 340, 342, 343, 348, 350], "shock_response_spectrum": 21, "24": [21, 57, 327, 328, 330, 332, 338, 340, 343, 348, 350], "spectrum": [21, 29, 31, 33, 34, 318, 319, 320, 342], "12": [21, 32, 34, 76, 190, 239, 253, 327, 328, 329, 330, 331, 332, 338, 340, 342, 343, 348, 350], "strain_per_cycl": 21, "stress_per_cycl": 21, "15": [21, 32, 131, 190, 208, 327, 328, 330, 332, 333, 338, 339, 340, 342, 343, 348, 350], "time_respons": [21, 332, 350], "transmis": 21, "data_to_plot": 22, "labeled_data_to_plot": 22, "iteract": [22, 212], "visual": [22, 29, 35, 50, 76, 83, 268, 330, 331, 332, 333, 338, 340, 348, 350], "multipl": [22, 28, 31, 33, 34, 35, 41, 76, 78, 91, 101, 148, 206, 222, 249, 326, 327, 329, 332, 335, 336, 338, 340, 341, 342, 348, 350], "dataset": [22, 28, 29, 50, 66, 91, 137, 149, 150, 152, 153, 156, 159, 163, 166, 169, 172, 175, 179, 182, 203, 236, 327, 330, 331, 332, 343, 348, 350, 351], "overlaid": [22, 328, 330, 331, 333, 340, 342, 350], "addit": [22, 23, 28, 31, 33, 34, 35, 40, 50, 51, 73, 76, 84, 85, 91, 159, 262, 266, 320, 329, 332, 338, 340, 343, 350], "argument": [22, 28, 29, 31, 33, 34, 35, 38, 40, 48, 50, 53, 55, 73, 76, 91, 101, 122, 197, 212, 244, 262, 263, 266, 275, 318, 320, 327, 328, 329, 331, 332, 333, 339, 340, 348, 350], "label": [22, 28, 29, 31, 33, 35, 50, 73, 101, 327, 330, 333, 337, 338, 339, 340, 348, 350], "legend": [22, 330, 338, 339, 340, 342, 348], "keyword": [22, 23, 28, 31, 33, 34, 35, 40, 48, 50, 53, 55, 84, 85, 117, 197, 262, 266, 350], "_": [22, 29, 330, 340, 342, 343, 344, 348], "replac": [22, 29, 231, 348], "its": [22, 28, 33, 34, 35, 50, 58, 63, 67, 90, 122, 124, 224, 327, 328, 330, 331, 332, 333, 337, 338, 339, 340, 341, 343, 344, 348, 350, 351], "abscissa_mark": [22, 28, 31, 33, 35], "marker": [22, 28, 31, 33, 35, 76, 348, 350], "place": [22, 50, 188, 327, 330, 337, 338, 340, 344, 348, 350], "curv": [22, 48, 50, 55, 57, 76, 207, 213, 327, 331, 332, 337, 340, 348, 350, 351], "To": [22, 34, 35, 50, 57, 58, 76, 122, 124, 128, 302, 327, 330, 331, 332, 333, 335, 338, 339, 340, 342, 344, 348, 350], "add": [22, 28, 29, 34, 50, 53, 55, 101, 128, 327, 329, 330, 331, 333, 338, 339, 340, 342, 343, 344, 348, 350], "just": [22, 31, 76, 91, 320, 327, 330, 331, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350], "abscissa_markers_": 22, "wa": [22, 28, 33, 44, 50, 327, 328, 329, 330, 332, 333, 337, 338, 339, 340, 342, 343, 348, 350], "via": [22, 23, 29, 34, 35, 268, 269, 270, 327, 332, 340, 342, 350], "abscissa_marker_label": [22, 28, 31, 33, 35], "abscissa_marker_labels_": 22, "abscissa_marker_typ": [22, 28, 31, 33, 35], "vline": [22, 28, 31, 33, 35], "vertic": [22, 197, 224, 337, 342, 348], "line": [22, 29, 33, 34, 35, 50, 54, 55, 57, 58, 91, 122, 131, 147, 148, 151, 197, 201, 203, 244, 249, 253, 257, 262, 263, 265, 266, 268, 269, 270, 275, 319, 327, 329, 331, 332, 337, 338, 339, 342, 343, 344, 348, 350, 351], "across": [22, 28, 34, 330, 337, 340, 343, 348, 350], "pyqtgraph": [22, 101], "symbol": [22, 28, 31, 33, 35, 332, 340, 348, 350], "o": [22, 28, 31, 33, 35, 307, 327, 344, 348, 350], "star": 22, "etc": [22, 50, 58, 101, 122, 124, 253, 331, 335, 350, 351], "abscissa_marker_type_": 22, "connect_callback": [22, 194, 209, 210, 212, 214, 218], "callback": 22, "deselect_all_complex_types_except": 22, "complex_typ": 22, "deselect": [22, 332, 350], "except": [22, 121, 123, 145, 146, 213, 216, 269, 270, 271, 327, 332, 333, 338, 339, 340, 343, 350], "make": [22, 28, 34, 50, 88, 186, 253, 327, 328, 329, 330, 331, 332, 333, 335, 337, 338, 339, 340, 342, 343, 348, 350, 351], "checkbox": [22, 332, 350], "menu": [22, 50, 53, 55, 332, 340, 350], "act": [22, 338, 340, 350], "like": [22, 23, 35, 76, 96, 122, 128, 327, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350], "radiobutton": 22, "complextyp": 22, "select": [22, 28, 50, 52, 77, 101, 118, 122, 124, 193, 194, 266, 269, 302, 327, 328, 331, 332, 333, 334, 336, 341, 342, 343, 350], "selection_chang": 22, "call": [22, 50, 55, 66, 302, 327, 328, 329, 331, 332, 337, 338, 339, 340, 342, 343, 344, 348, 350], "when": [22, 23, 28, 29, 31, 33, 34, 35, 50, 55, 59, 76, 84, 91, 122, 146, 149, 150, 190, 206, 269, 270, 271, 320, 327, 328, 329, 330, 331, 332, 333, 337, 338, 340, 342, 343, 348, 350, 351], "chang": [22, 29, 34, 50, 53, 55, 131, 269, 271, 280, 327, 329, 332, 337, 340, 342, 343, 348, 350], "set_imaginari": 22, "set_magnitud": 22, "set_magnitude_phas": 22, "set_phas": 22, "set_real": 22, "set_real_imag": 22, "updat": [22, 50, 53, 55, 77, 331, 333, 348, 350], "figur": [22, 28, 29, 31, 33, 35, 73, 86, 197, 320, 327, 328, 330, 331, 337, 338, 340, 342, 343, 348, 350], "update_abscissa_log": 22, "log": [22, 29, 34, 201, 280, 320, 327, 337, 338, 339, 340, 342, 348, 350], "scale": [22, 29, 31, 33, 34, 48, 50, 53, 55, 241, 251, 269, 270, 320, 322, 329, 332, 338, 340, 342, 344, 350], "update_checkbox": 22, "disabl": [22, 332, 350], "button": [22, 76, 327, 332, 340, 350], "auto": [22, 33, 100, 329, 332, 342, 350], "update_data": 22, "update_ordinate_log": 22, "ordin": [22, 28, 38, 44, 76, 179, 201, 280, 327, 329, 331, 337, 338, 342, 348, 350], "impuls": [23, 33, 35], "enforce_caus": [23, 35], "exponential_tap": [23, 35], "window_paramet": [23, 35], "end_of_ringdown": [23, 35], "enforc": [23, 35], "causal": [23, 35], "cutoff": [23, 29, 35, 327], "some": [23, 262, 266, 275, 327, 328, 329, 330, 331, 332, 337, 338, 339, 340, 342, 343, 344, 348, 350], "sort": [23, 73, 327, 348], "note": [23, 28, 29, 31, 33, 34, 35, 50, 57, 58, 71, 76, 88, 101, 115, 116, 117, 122, 128, 131, 190, 224, 249, 253, 262, 263, 265, 266, 268, 269, 270, 302, 307, 317, 320, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 350], "necessarili": [23, 35, 340, 350], "tradit": [23, 35, 340], "process": [23, 35, 122, 124, 211, 212, 220, 249, 302, 327, 331, 332, 337, 338, 340, 341, 342, 343, 348, 350], "current": [23, 28, 29, 33, 34, 35, 50, 53, 55, 76, 101, 122, 131, 327, 332, 333, 335, 338, 340, 348, 350, 351], "exponenti": [23, 35, 332, 338, 339, 340, 343, 348, 350], "taper": [23, 35, 57], "end": [23, 28, 35, 50, 55, 280, 302, 317, 327, 328, 330, 331, 332, 338, 339, 340, 342, 343, 348, 350], "boxcar": [23, 35], "irf": [23, 34, 35], "uniform": [23, 35, 116, 117, 201, 307, 350], "cuttoff": [23, 35], "40": [23, 35, 327, 328, 329, 330, 332, 338, 340, 348, 350], "db": [23, 35, 251], "down": [23, 28, 35, 118, 327, 328, 329, 330, 331, 332, 333, 337, 338, 340, 342, 343, 344, 348, 350], "point": [23, 28, 31, 35, 50, 52, 55, 59, 84, 122, 190, 222, 224, 231, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 307, 313, 320, 327, 330, 331, 332, 333, 337, 338, 340, 342, 343, 344, 348, 350], "care": [23, 35, 337, 338, 348, 350], "taken": [23, 34, 35, 91, 338, 350], "sinc": [23, 35, 265, 327, 328, 330, 342, 344, 348, 350], "lead": [23, 34, 35, 329, 348], "errat": [23, 35], "behavior": [23, 35, 302, 339, 348], "exist": [23, 28, 31, 33, 34, 35, 41, 50, 64, 69, 76, 83, 91, 190, 327, 329, 331, 333, 340, 350], "automat": [23, 28, 33, 35, 42, 43, 50, 55, 77, 98, 101, 196, 319, 327, 328, 329, 331, 332, 333, 339, 342, 348, 350, 351], "isn": [23, 35, 269, 270, 271, 328, 333, 343, 348, 350], "t": [23, 33, 34, 35, 50, 100, 101, 122, 124, 140, 224, 227, 269, 270, 271, 293, 307, 317, 327, 328, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350], "window_paramt": [23, 35], "after": [23, 35, 128, 199, 317, 327, 328, 330, 332, 338, 339, 340, 342, 343, 348, 350], "zero": [23, 28, 29, 31, 33, 34, 35, 48, 50, 53, 76, 91, 122, 316, 317, 320, 327, 328, 330, 331, 332, 337, 338, 339, 340, 342, 343, 344, 348, 350], "It": [23, 34, 35, 50, 77, 122, 224, 261, 327, 328, 329, 330, 331, 332, 335, 337, 338, 339, 340, 342, 343, 348, 350, 351], "same": [23, 28, 29, 34, 35, 50, 55, 56, 57, 68, 70, 76, 77, 83, 85, 91, 101, 222, 231, 269, 270, 327, 328, 330, 331, 332, 338, 339, 342, 343, 344, 348, 350], "amplitud": [23, 31, 34, 35, 39, 275, 279, 280, 317, 320, 322, 324, 325, 331, 337, 338, 339, 342, 343, 344, 350], "001": [23, 35, 327, 350], "section": [23, 35, 115, 116, 117, 328, 331, 332, 333, 335, 337, 338, 339, 340, 341, 343, 348, 350], "exponetional_tap": [23, 35], "although": [23, 34, 35], "best": [23, 35, 52, 86, 119, 120, 327, 330, 331, 342, 344, 348], "practic": [23, 35, 337, 340, 342, 343, 348], "suppli": [23, 29, 34, 35, 84, 85, 86, 131, 269, 270, 271, 343], "being": [23, 33, 34, 35, 50, 51, 53, 55, 76, 77, 79, 122, 224, 244, 270, 327, 329, 332, 338, 339, 340, 342, 343, 348, 350], "code": [23, 35, 101, 122, 327, 328, 329, 330, 331, 332, 333, 337, 338, 342, 348, 351], "attempt": [23, 34, 35, 327, 329, 333, 338, 342, 343, 348, 350], "find": [23, 35, 84, 128, 317, 327, 330, 331, 333, 336, 340, 344, 348, 350], "ring": [23, 35], "suggest": [23, 35, 331, 332, 337, 348, 351], "most": [23, 35, 50, 253, 330, 331, 337, 338, 340, 342, 343, 348, 350, 351], "logic": [23, 35, 327], "choic": [23, 35], "zvonkin": [23, 35], "m": [23, 31, 35, 91, 115, 116, 117, 131, 265, 295, 296, 298, 307, 320, 322, 326, 330, 337, 338, 339, 340, 342, 348], "2015": [23, 35, 332], "check": [23, 31, 33, 34, 35, 84, 327, 328, 329, 332, 335, 336, 341, 348, 350], "physic": [23, 35, 76, 90, 91, 327, 328, 333, 337, 339, 340, 344, 348, 350, 351], "qualiti": [23, 31, 35, 122, 190, 320, 336, 341, 343, 348, 350], "linear": [23, 28, 33, 35, 50, 57, 58, 76, 115, 116, 124, 128, 222, 224, 251, 258, 280, 327, 328, 330, 331, 332, 336, 339, 340, 343, 344, 350], "electr": [23, 35, 131], "network": [23, 35], "model": [23, 31, 35, 46, 50, 59, 75, 91, 93, 95, 113, 115, 122, 124, 128, 130, 131, 163, 266, 302, 319, 320, 329, 331, 333, 334, 335, 337, 338, 339, 340, 342, 344, 348], "master": [23, 35], "Theses": [23, 35], "missouri": [23, 35, 326], "scienc": [23, 35, 307], "scholar": [23, 35], "mine": [23, 35], "scholarsmin": [23, 35], "mst": [23, 35], "edu": [23, 35], "masters_thes": [23, 35], "7490": [23, 35], "fft": [23, 28, 33, 34, 35, 91, 261, 262, 266, 275, 327, 332, 337, 339, 341], "norm": [23, 33, 34, 35, 327, 333, 348], "backward": [23, 33, 34, 35], "scipy_rfft_kwarg": [23, 34], "convert": [23, 28, 31, 34, 35, 122, 128, 251, 320, 322, 332, 334, 337, 340, 348, 350], "frequenc": [23, 29, 31, 32, 33, 34, 35, 39, 40, 48, 76, 88, 89, 91, 100, 106, 107, 131, 176, 197, 201, 203, 204, 205, 206, 208, 209, 217, 244, 249, 253, 255, 257, 260, 262, 263, 265, 266, 267, 268, 269, 270, 271, 275, 279, 280, 293, 302, 317, 318, 319, 320, 322, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 340, 341, 343, 344, 351], "normal": [23, 28, 29, 33, 34, 35, 50, 59, 76, 122, 124, 197, 263, 269, 327, 332, 337, 338, 340, 350], "rfft": [23, 34, 327, 332, 342, 343], "transfer": [23, 29, 33, 34, 35, 40, 76, 131, 178, 201, 269, 270, 271, 329, 331, 342, 348], "impusl": 23, "rtype": [23, 35], "transferfunctionarrai": [23, 29, 34, 40, 76, 91, 194, 198, 201, 203, 208, 209, 217, 218, 327, 331, 338, 342, 348, 350], "find_end_of_ringdown": 23, "ringdown": 23, "smooth": [23, 332], "move": [23, 34, 35, 327, 330, 332, 333, 337, 338, 339, 340, 342, 348, 350], "filter": [23, 35, 253, 275, 302, 316, 318, 319, 332, 343, 350], "minimum": [23, 28, 29, 31, 34, 35, 52, 201, 203, 275, 320, 327, 338, 343, 344, 348, 350], "pair": [23, 28, 35, 91, 333, 339, 342, 348, 350], "median": 23, "possibl": [23, 28, 34, 42, 43, 262, 266, 327, 331, 338, 340, 348, 350], "end_of_ringdow": 23, "width": [24, 25, 29, 50, 91, 97, 100, 101, 116, 343, 344, 350], "height": [24, 25, 50, 91, 116, 285, 338, 344, 350], "dpi": [24, 25], "100": [24, 25, 31, 164, 320, 327, 328, 330, 332, 338, 339, 340, 342, 343, 348, 350], "figurecanvasqtagg": [24, 25], "subplot": [25, 28, 31, 33, 35, 91, 197, 327, 330, 331, 332, 337, 338, 339, 340, 342, 343, 344, 348, 350], "ignore_subplot": 25, "mode": [26, 35, 50, 53, 76, 77, 91, 100, 106, 107, 119, 120, 122, 124, 175, 193, 197, 198, 201, 203, 204, 205, 213, 263, 265, 328, 329, 332, 333, 334, 335, 336, 338, 341, 342, 343, 344, 351], "cmif": [26, 35, 100, 197, 208, 217, 331, 332, 348, 350], "nmif": [26, 35, 332, 350], "n": [28, 29, 34, 50, 115, 117, 131, 224, 253, 269, 270, 307, 320, 332, 337, 338, 339, 340, 342, 343, 348, 350], "dimension": [28, 50, 73, 122, 203, 327, 339, 348], "abscissa_spac": [28, 34], "space": [28, 29, 33, 34, 35, 52, 68, 89, 91, 131, 190, 224, 244, 249, 257, 313, 327, 331, 332, 333, 340, 342, 348, 350], "evenli": [28, 35], "argmax": [28, 330, 331, 348], "reduct": [28, 91, 327, 328, 334, 335, 338, 350], "argmax_arg": 28, "argmax_kwarg": 28, "maximum": [28, 29, 31, 34, 35, 48, 50, 52, 55, 86, 91, 101, 120, 190, 201, 203, 275, 317, 319, 320, 327, 330, 333, 338, 340, 343, 348, 350], "absolut": [28, 31, 319, 320, 344], "unravel_index": 28, "self": [28, 29, 34, 76, 77, 91, 122, 195, 330], "get": [28, 29, 41, 50, 52, 60, 76, 80, 91, 119, 120, 122, 124, 253, 327, 328, 329, 330, 331, 332, 333, 335, 337, 338, 339, 340, 342, 343, 344, 348, 350, 351], "unflatten": 28, "argmin": [28, 327, 338, 344], "argmin_arg": 28, "argmin_kwarg": 28, "downsampl": [28, 327, 329, 332, 343], "factor": [28, 29, 31, 50, 55, 84, 122, 131, 203, 204, 205, 251, 263, 265, 275, 320, 322, 327, 329, 332, 338, 340, 350], "keep": [28, 49, 50, 52, 54, 76, 83, 91, 116, 119, 120, 122, 124, 327, 328, 329, 330, 331, 332, 333, 338, 339, 342, 344, 348, 350, 351], "onli": [28, 29, 31, 34, 35, 41, 49, 50, 52, 54, 55, 58, 59, 76, 84, 101, 117, 119, 120, 122, 190, 201, 203, 206, 244, 253, 262, 268, 302, 320, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350, 351], "everi": [28, 55, 327, 330, 332, 340, 342, 348, 350], "th": [28, 115, 122, 253, 340, 348, 350], "abcissa": [28, 302], "kept": [28, 50, 119, 120, 128, 201, 203, 327, 329, 330, 331, 333, 340, 343], "extract_el": [28, 327, 329, 331, 337, 342, 343], "element": [28, 34, 46, 49, 50, 52, 57, 58, 59, 66, 70, 76, 113, 115, 116, 117, 122, 124, 128, 169, 190, 280, 281, 328, 330, 331, 333, 334, 335, 340, 343, 348], "reduc": [28, 42, 43, 49, 50, 52, 54, 76, 91, 128, 302, 327, 328, 329, 330, 331, 332, 334, 339, 340, 342, 343, 344, 348, 350], "extract_elements_by_abscissa": [28, 327, 332, 338, 339, 342], "min_abscissa": 28, "max_abscissa": 28, "extract": [28, 91, 100, 179, 186, 187, 190, 191, 224, 327, 328, 331, 332, 343, 344, 350], "within": [28, 29, 31, 69, 101, 253, 320, 327, 331, 333, 340, 343, 350, 351], "rang": [28, 29, 31, 35, 320, 327, 331, 332, 333, 337, 338, 340, 342, 343, 344, 348, 350], "from_uff": [28, 50, 76, 351], "unv_data_dict": [28, 42, 43, 47, 49, 52, 54, 76, 81], "squeez": [28, 41, 42, 43, 258, 333, 337, 348], "read_unv": [28, 42, 43, 47, 49, 50, 52, 54, 61, 62, 76, 81], "read": [28, 31, 34, 42, 43, 47, 49, 50, 52, 54, 61, 62, 76, 79, 81, 91, 122, 124, 132, 137, 140, 145, 146, 147, 148, 149, 150, 190, 198, 320, 327, 332, 350, 351], "return_funct": [28, 41, 42, 43], "functiontyp": [28, 38, 332, 342, 348, 350], "get_drive_point": 28, "return_indic": 28, "equal": [28, 29, 33, 34, 50, 76, 115, 265, 327, 330, 332, 338, 339, 340, 342, 348, 350], "origin": [28, 31, 34, 44, 50, 58, 76, 83, 85, 122, 124, 190, 231, 284, 285, 286, 287, 327, 328, 329, 330, 333, 337, 338, 340, 343, 348, 350], "drive": [28, 327, 329, 332, 340, 344, 348, 350], "directli": [28, 34, 302, 327, 328, 330, 332, 333, 338, 339, 340, 342, 344, 348, 350], "get_reciprocal_data": 28, "reciproc": [28, 35, 203, 340, 348], "idx_by_ab": 28, "abscissavalueextractor": 28, "idx_by_el": 28, "abscissaindexextractor": 28, "interpol": [28, 29, 33, 35, 76, 302, 320, 332], "interpolated_abscissa": 28, "kind": [28, 327, 332, 337, 338, 340, 342, 348, 350], "kwarg": [28, 50, 51, 55, 76, 117, 122, 125, 129, 195, 255, 262, 327], "interp1d": 28, "multi": [28, 35, 50, 55, 73, 197, 207, 327, 332, 338, 343, 350], "spline": 28, "nearest": [28, 34], "slinear": 28, "quadrat": [28, 128], "cubic": [28, 57], "previou": [28, 327, 329, 330, 333, 338, 339, 340, 341, 342, 343, 344, 348, 350], "next": [28, 337, 339, 340, 342, 348, 350], "zeroth": 28, "first": [28, 34, 50, 55, 58, 59, 88, 89, 91, 101, 115, 119, 120, 122, 186, 188, 190, 197, 224, 249, 257, 265, 270, 271, 275, 317, 320, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350, 351], "second": [28, 50, 51, 53, 55, 76, 82, 89, 91, 115, 119, 120, 122, 190, 224, 249, 257, 263, 265, 270, 271, 302, 317, 320, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 342, 343, 344, 350, 351], "third": [28, 270, 271, 328, 331, 332, 348], "simpli": [28, 34, 52, 76, 86, 91, 122, 128, 327, 329, 330, 331, 332, 333, 338, 340, 342, 343, 344, 348, 350], "differ": [28, 29, 34, 35, 50, 58, 77, 122, 124, 131, 253, 263, 265, 269, 270, 319, 327, 328, 329, 330, 331, 332, 337, 338, 339, 340, 342, 343, 348, 350], "half": [28, 34, 317, 339, 342, 343, 348, 350], "round": [28, 31, 253, 320], "join": 28, "data_arrai": [28, 44, 137, 212, 332, 342, 348, 350], "increment_abscissa": [28, 44], "togeth": [28, 34, 35, 44, 91, 92, 128, 328, 330, 332, 338, 340, 342, 348, 350], "concaten": [28, 44, 91, 227, 327, 329, 330, 332, 333, 337, 338, 340, 342, 343, 348, 350], "determin": [28, 29, 34, 44, 147, 148, 253, 280, 328, 329, 330, 337, 338, 340, 342, 343, 344, 348, 350], "how": [28, 29, 31, 34, 44, 50, 53, 76, 85, 128, 147, 148, 197, 327, 328, 329, 330, 332, 333, 335, 336, 338, 339, 340, 341, 342, 343, 344, 348, 350], "handl": [28, 34, 44, 46, 75, 76, 140, 281, 327, 329, 330, 331, 332, 333, 338, 342, 350], "left": [28, 29, 35, 44, 50, 55, 112, 187, 224, 253, 327, 329, 332, 337, 338, 340, 343, 344, 348, 350], "increment": [28, 44, 76, 86, 330], "so": [28, 29, 31, 34, 35, 44, 50, 58, 91, 122, 128, 269, 270, 271, 320, 327, 328, 329, 330, 331, 332, 333, 336, 338, 339, 340, 342, 343, 344, 348, 350], "continu": [28, 34, 44, 338, 340, 343, 350], "max": [28, 253, 316, 327, 338, 339, 348], "max_arg": 28, "max_kwarg": 28, "min": [28, 253, 327, 338], "min_arg": 28, "min_kwarg": 28, "num_coordin": 28, "one_axi": [28, 31, 33, 35, 338, 339], "subplots_kwarg": [28, 31, 33, 35, 91, 108, 109, 111, 197, 208, 254, 338, 339], "plot_kwarg": [28, 29, 31, 33, 35, 48, 50, 53, 55, 76, 108, 109, 111, 197, 254, 255, 327, 330, 331, 337, 340, 342], "abscissa_marker_plot_kwarg": [28, 31, 33, 35], "matplotlib": [28, 31, 33, 35, 76, 91, 101, 197, 224, 320, 327, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350], "ax": [28, 29, 31, 33, 35, 50, 58, 73, 76, 91, 197, 239, 254, 304, 320, 327, 328, 330, 331, 332, 337, 338, 339, 340, 342, 343, 344, 348, 350], "mark": [28, 31, 33, 35, 76, 331], "denot": [28, 31, 33, 34, 35, 76, 79, 87, 122, 186, 188, 224, 327, 328, 332, 338, 339, 340, 342, 348, 350], "signific": [28, 31, 33, 35, 253, 340, 343, 348], "accept": [28, 31, 33, 34, 35, 50, 77, 101, 119, 120, 327, 328, 329, 331, 332, 338, 339, 343, 348, 350], "2f": [28, 31, 33, 35, 76, 89, 100, 106, 107, 108, 109, 197, 330, 338, 348], "By": [28, 31, 33, 35, 101, 263, 265, 327, 331, 337, 340, 342, 343, 350], "valid": [28, 31, 33, 35, 122, 327, 328, 331, 332, 338, 340, 342, 343, 344, 348], "On": [28, 31, 33, 35, 50, 58, 327, 332, 343, 350], "plot_imag": 28, "reduction_funct": 28, "colorbar_scal": 28, "colorbar_min": 28, "colorbar_max": 28, "reference_coordin": [28, 217, 331, 350], "reshape_to_matrix": 28, "error_if_miss": 28, "reshap": [28, 327, 333, 348], "row": [28, 29, 35, 73, 74, 76, 77, 91, 115, 119, 120, 203, 206, 224, 244, 249, 257, 269, 319, 327, 329, 330, 331, 337, 338, 339, 340, 342, 348, 350], "column": [28, 29, 35, 50, 58, 73, 74, 76, 89, 119, 120, 186, 188, 203, 206, 224, 244, 249, 257, 269, 307, 320, 327, 329, 330, 331, 332, 339, 340, 348, 350], "error": [28, 29, 31, 34, 84, 85, 86, 89, 146, 147, 149, 150, 320, 328, 329, 330, 331, 332, 340, 342, 343, 350], "thrown": 28, "miss": [28, 76, 340, 342, 344, 350], "try": [28, 50, 59, 86, 330, 333, 339, 340, 342, 343, 348], "discard": [28, 34, 128, 190, 210, 327, 330, 332, 333, 340, 344, 348, 350], "output_arrai": [28, 35, 47, 49, 52, 54, 76, 81], "2d": [28, 52, 76, 91, 101, 116, 119, 120, 122, 190, 204, 205, 222, 231, 244, 263, 265, 270, 327, 332, 338, 339, 342, 344, 348, 350, 351], "aarrai": 28, "response_coordin": [28, 91, 134, 327, 331, 350], "npz": [28, 50, 66, 198, 331, 332, 350], "to_imat_struct": 28, "setrecord": 28, "created": 28, "datetim": 28, "modifyd": 28, "ownernam": 28, "abscissadatatyp": 28, "abscissatypequ": 28, "abscissaaxislab": 28, "abscissaunitslab": 28, "ordnumdatatyp": 28, "ordnumtypequ": 28, "orddendatatyp": 28, "orddentypequ": 28, "ordinateaxislab": 28, "ordinateunitslab": 28, "zaxisdatatyp": 28, "zaxistypequ": 28, "zgeneralvalu": 28, "zrpmvalu": 28, "zordervalu": 28, "ztimevalu": 28, "uservalue1": [28, 160], "uservalue2": [28, 160], "uservalue3": [28, 160], "uservalue4": [28, 160], "samplingtyp": 28, "weightingtyp": 28, "windowtyp": 28, "amplitudeunit": 28, "octaveformat": 28, "octaveavgtyp": 28, "expdampingfact": 28, "pulsesperrev": 28, "measurementrun": 28, "loadcas": 28, "irigtim": 28, "imat": [28, 41, 50, 60, 76, 80], "toolbox": 28, "imat_fn": [28, 41], "faster": [28, 34, 302, 337, 342, 348], "to_imat_struct_arrai": 28, "descript": [28, 34, 50, 54, 58, 70, 100, 197, 327, 331, 340, 350], "data_dict": 28, "specificdatatyp": 28, "unknown": [28, 32, 50, 76, 81, 348], "typequ": 28, "verbos": [28, 31, 128, 149, 150, 314, 320, 323], "slower": [28, 338], "record": [28, 122, 327, 343], "date": [28, 122], "now": [28, 76, 327, 328, 329, 330, 331, 332, 333, 338, 339, 340, 342, 343, 344, 348, 350], "owner": 28, "associ": [28, 266, 327, 337, 338, 339, 340, 342, 348, 350], "qualifi": [28, 159, 351], "unit": [28, 31, 34, 115, 119, 120, 156, 263, 265, 302, 319, 320, 322, 327, 330, 338, 339, 340, 342, 351], "numer": [28, 302, 327, 329, 330, 332, 333, 339, 340, 342, 348, 350], "denomin": [28, 338, 340, 348], "output_struct": 28, "to_shape_arrai": 28, "abscissa_valu": 28, "shapearrai": [28, 50, 53, 55, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 194, 198, 203, 327, 328, 329, 330, 331, 333, 340, 350, 351], "closest": [28, 50, 52, 224, 327, 328, 333], "common": [28, 34, 76, 89, 132, 330, 331, 338, 340, 342, 343, 348, 350], "duplic": [28, 91, 327, 340, 350], "occur": [28, 31, 34, 50, 76, 147, 261, 302, 317, 320, 331, 332, 337, 338, 339, 340, 342, 343, 348, 350], "shape_matrix": [28, 88, 119, 120, 239, 327, 329, 330, 340, 344, 350], "transform_coordinate_system": [28, 76, 327, 333], "original_geometri": [28, 76, 333], "new_geometri": [28, 76, 83, 333], "node_id_map": [28, 50, 76, 82, 87, 89, 328, 333], "perform": [28, 31, 34, 35, 50, 55, 76, 84, 91, 192, 262, 265, 266, 280, 317, 320, 327, 328, 331, 332, 333, 334, 335, 338, 339, 341, 342, 343, 348, 351], "transform": [28, 29, 33, 34, 35, 50, 56, 76, 90, 91, 128, 147, 148, 307, 328, 329, 330, 333, 337, 339, 340, 343, 344, 348, 350, 351], "desir": [28, 31, 34, 76, 79, 91, 122, 263, 265, 275, 319, 320, 322, 327, 329, 332, 333, 342, 350], "id_map": [28, 50, 76, 89, 328, 333], "new": [28, 33, 34, 50, 53, 73, 76, 91, 92, 122, 124, 326, 327, 329, 331, 333, 343, 348, 350], "map": [28, 50, 57, 58, 65, 76, 89, 122, 124, 328, 332, 333, 340, 342, 348, 350], "validate_common_abscissa": 28, "allclose_kwarg": 28, "allclos": 28, "toler": [28, 29, 33, 34, 35, 86, 91, 190, 350], "zero_pad": 28, "num_sampl": [28, 277, 279, 319, 337, 338, 339, 342, 343], "update_abscissa": [28, 55], "use_next_fast_len": 28, "begin": [28, 50, 327, 330, 331, 332, 338, 339, 340, 342, 343, 348, 350], "unless": [28, 41, 122, 124, 262], "work": [28, 50, 185, 327, 328, 330, 331, 333, 335, 336, 337, 340, 342, 343, 344, 348, 350, 351], "side": [28, 122, 224, 332, 333, 338, 339, 340, 342, 348, 350], "both": [28, 34, 35, 84, 244, 280, 327, 328, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350, 351], "total": [28, 327, 332, 339, 340, 350], "final": [28, 33, 34, 35, 38, 128, 193, 275, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 348, 350, 351], "reach": [28, 338, 342, 350], "fast": [28, 329, 343], "next_fast_len": 28, "pad": [28, 33, 34, 35, 91, 332, 350], "power": [29, 30, 34, 329, 350, 351], "spectral": [29, 34, 178, 212, 329, 332, 342, 343, 350, 351], "densiti": [29, 34, 91, 115, 116, 117, 178, 244, 327, 329, 350, 351], "angl": [29, 50, 58, 76, 189, 191, 282, 284, 285, 289, 304, 329, 338, 339, 342, 348, 350], "bandwidth_averag": 29, "band_lb": [29, 253], "band_ub": [29, 253], "integr": [29, 76, 91, 275, 294, 329, 332, 335, 337, 338, 339, 340, 342, 343, 351], "bin": [29, 332, 343], "n_band": 29, "bandwidth": [29, 76, 91, 258, 262, 266, 275, 302, 327, 329, 332, 333, 340, 342, 343, 348, 350], "lower": [29, 201, 203, 204, 205, 253, 327, 329, 338, 339, 342, 343, 348, 350], "bound": [29, 50, 350], "upper": [29, 186, 188, 201, 203, 204, 205, 224, 227, 253, 313, 329, 348, 350], "freq": [29, 31, 253, 254, 320, 327, 328, 330, 332, 350], "band": [29, 253, 302, 327, 330, 340, 342, 343, 350], "least": [29, 31, 91, 204, 205, 206, 224, 269, 307, 320, 329, 333, 343, 348, 350], "partial": [29, 342, 348], "limit": [29, 253, 302, 331, 333, 337, 342, 343, 348, 350], "portion": [29, 34, 50, 58, 66, 84, 91, 131, 204, 205, 327, 328, 329, 331, 332, 340, 342, 343, 348, 350, 351], "multipli": [29, 76, 269, 328, 331, 338, 340, 342, 344, 348], "much": [29, 50, 59, 327, 328, 329, 330, 337, 338, 339, 340, 342, 343, 344, 348, 350], "p": [29, 227, 228, 326, 330, 342, 343, 348], "coherencearrai": 29, "compare_asd": 29, "figure_kwarg": [29, 255, 329], "linewidth": [29, 100, 101, 255, 329, 337, 339, 340, 342, 348, 350], "cpsd_matric": 29, "diagon": [29, 34, 50, 73, 91, 269, 327, 329, 333, 339, 340, 348], "cpsd": [29, 34, 211, 243, 245, 246, 248, 249, 254, 257, 259, 329, 351], "well": [29, 31, 46, 90, 137, 140, 281, 320, 327, 328, 329, 330, 331, 332, 333, 335, 337, 338, 339, 340, 342, 343, 344, 348, 350, 351], "level": [29, 34, 327, 329, 332, 338, 342, 343, 350], "ident": [29, 34, 35, 51, 73, 88, 89, 91, 201, 270, 327, 328, 329, 330, 331, 332, 333, 338, 339, 340, 342, 343, 348, 350], "kei": [29, 31, 149, 150, 187, 320, 331, 338, 339, 340, 350, 351], "between": [29, 34, 50, 52, 65, 82, 89, 91, 92, 131, 236, 266, 275, 280, 307, 313, 319, 327, 328, 329, 330, 331, 332, 333, 339, 340, 342, 343, 344, 348, 350], "error_summari": [29, 329], "summari": [29, 334, 335, 336, 341], "compar": [29, 34, 76, 87, 89, 100, 131, 328, 329, 330, 331, 332, 333, 335, 336, 338, 340, 341, 342, 343, 348, 351], "against": [29, 31, 34, 327, 328, 329, 330, 331, 332, 333, 338, 342, 343, 348, 350], "metric": [29, 190, 236, 329, 342, 343, 344, 348, 350], "ey": [29, 50, 73, 329, 348], "rm": [29, 34, 257, 273, 275, 278, 327, 329, 332, 342], "full_matrix": [29, 329], "breakpoint_frequ": [29, 258, 329], "breakpoint_level": [29, 258, 329], "breakpoint_interpol": [29, 258], "lin": [29, 280], "min_frequ": [29, 34, 35, 201, 203, 208, 209, 217, 258], "max_frequ": [29, 34, 35, 100, 111, 201, 203, 208, 209, 217, 258], "construct": [29, 38, 41, 50, 58, 60, 66, 76, 80, 101, 203, 204, 205, 304, 313, 327, 328, 329, 330, 332, 333, 338, 339, 342, 343, 348, 350, 351], "full": [29, 34, 73, 95, 244, 253, 327, 328, 330, 331, 333, 339, 340, 342, 343, 350], "asd": [29, 247], "breakpoint": [29, 280, 320, 329], "low": [29, 201, 203, 313, 328, 330, 332, 338, 340, 342, 343], "below": [29, 327, 329, 330, 331, 332, 337, 342, 343, 350], "high": [29, 35, 201, 203, 302, 313, 327, 328, 330, 332, 338, 340, 343, 344, 350], "abov": [29, 56, 57, 68, 70, 88, 280, 327, 328, 337, 338, 339, 340, 342, 343, 344, 348, 350], "invalid": [29, 35, 50, 76, 89, 330], "inconsist": 29, "only_asd": [29, 34, 244], "generate_time_histori": [29, 329], "time_length": [29, 338], "output_oversampl": [29, 249, 329], "nyquist": [29, 34, 275, 332, 343], "constant": [29, 31, 34, 115, 317, 320, 337, 338, 339, 340, 348], "techniqu": [29, 34, 119, 120, 269, 270, 330, 331, 334, 339, 340, 343, 344], "whole": [29, 333, 348], "realiz": [29, 34, 249, 342, 343, 348, 350], "longer": [29, 76, 101, 122, 302, 332, 338, 340, 343, 350], "oversampl": [29, 91, 275, 327, 329, 332, 338, 342, 350], "time_histori": [29, 197, 350], "satisfi": [29, 31, 34, 224, 320, 329, 333, 340, 343, 348], "get_asd": 29, "mimo_forward": [29, 34, 329], "transfer_funct": [29, 34, 131], "forward": [29, 34, 329, 350], "mimo": [29, 34, 302, 332, 334, 335], "problem": [29, 34, 206, 269, 327, 329, 334, 336, 337, 341, 344, 351], "gxx": 29, "hxv": 29, "gvv": 29, "mimo_invers": [29, 34, 329], "standard": [29, 34, 253, 269, 326, 332, 338, 342, 348, 351], "response_weighting_matrix": [29, 34, 269, 329], "reference_weighting_matrix": [29, 34, 269], "regularization_weighting_matrix": [29, 34, 269, 270], "regularization_paramet": [29, 34, 35, 268, 269, 270, 329], "cond_num_threshold": [29, 34, 269], "num_retained_valu": [29, 34, 269, 271], "estim": [29, 34, 86, 222, 269, 302, 326, 329, 331, 332, 342, 343, 348, 350], "random": [29, 34, 140, 275, 302, 327, 331, 334, 335, 337, 339, 342, 348, 350], "vibrat": [29, 34, 140, 269, 270, 326, 332, 334, 335, 336, 337, 340, 348, 350], "frf": [29, 34, 35, 40, 76, 91, 100, 111, 194, 197, 198, 201, 203, 204, 205, 206, 208, 210, 211, 212, 217, 262, 263, 265, 266, 268, 269, 270, 271, 302, 326, 327, 329, 332, 334, 336, 337, 338, 339, 343, 344, 350, 351], "invers": [29, 34, 35, 265, 267, 268, 269, 270, 271, 329, 342, 348, 351], "avail": [29, 34, 269, 327, 330, 341, 343, 348, 350, 351], "basic": [29, 34, 269, 328, 335, 336, 337, 342, 344, 350], "pseudo": [29, 34, 269, 270, 271], "linalg": [29, 34, 35, 269, 327, 331, 333, 339, 340, 348], "pinv": [29, 34, 35, 269], "rcond": [29, 34, 35, 91, 92, 269], "threshold": [29, 34, 35, 52, 84, 91, 217, 269, 308, 310, 333], "condit": [29, 34, 35, 52, 76, 91, 92, 119, 190, 269, 316, 329, 332, 333, 338, 342, 344, 348, 350, 351], "tikhonov": [29, 34, 35, 268, 269, 270], "regular": [29, 34, 35, 268, 269, 270, 332], "truncat": [29, 33, 34, 35, 269, 271, 327, 332, 348], "fix": [29, 34, 35, 91, 269, 271, 327, 328, 330, 332, 337, 338, 339, 340, 350], "singular": [29, 34, 35, 197, 224, 268, 269, 271, 332, 340, 350], "sdpy": [29, 34, 269, 270, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350, 351], "weight": [29, 34, 201, 208, 217, 269, 270, 307, 318, 319, 348, 350], "solv": [29, 34, 86, 203, 204, 205, 206, 224, 269, 317, 327, 329, 331, 332, 333, 336, 338, 342, 343, 350], "scalar": [29, 31, 257, 269, 320, 340, 344, 348], "3d": [29, 50, 52, 119, 120, 190, 204, 205, 224, 231, 249, 257, 263, 265, 269, 270, 327, 332, 334, 340, 342, 348, 350], "case": [29, 34, 76, 128, 269, 270, 271, 327, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 348, 350], "chosen": [29, 34, 76, 269, 271, 350], "vector": [29, 34, 35, 115, 122, 224, 227, 235, 269, 270, 271, 302, 304, 305, 307, 328, 339, 340, 342, 348, 350], "num_lin": [29, 34, 269, 270], "svd": [29, 34, 35, 269, 270, 307], "vari": [29, 34, 269, 331, 343, 350], "pseudoinvers": [29, 348, 350], "wikipedia": [29, 34, 269, 270], "moor": [29, 34, 269], "penros": [29, 34, 269], "en": [29, 34, 269, 270], "wiki": [29, 34, 269, 270], "e2": [29, 34, 269], "80": [29, 34, 269, 327, 328, 330, 348, 350], "93penrose_invers": [29, 34, 269], "tith": [29, 34, 269, 270], "d": [29, 34, 122, 131, 269, 270, 322, 330, 336, 341], "j": [29, 34, 115, 122, 269, 270, 330, 338, 340, 342, 344, 348, 350], "thompson": [29, 34, 269, 270], "quantif": [29, 34, 269, 270], "born": [29, 34, 269, 270], "transmiss": [29, 34, 36, 95, 269, 270, 334, 335, 350], "pathsbi": [29, 34, 269, 270], "part": [29, 34, 35, 100, 111, 197, 204, 205, 253, 269, 270, 327, 332, 333, 336, 337, 338, 339, 340, 341, 348, 350], "journal": [29, 34, 269, 270], "sound": [29, 34, 269, 270, 338, 348], "volum": [29, 34, 50, 128, 269, 270, 327], "264": [29, 34, 269, 270, 350], "issu": [29, 34, 84, 269, 270, 327, 343, 348, 350], "2003": [29, 34, 269, 270], "page": [29, 34, 101, 128, 269, 270, 327, 329, 331, 335, 350], "433": [29, 34, 269, 270], "451": [29, 34, 269, 270], "issn": [29, 34, 269, 270], "0022": [29, 34, 269, 270], "460x": [29, 34, 269, 270], "doi": [29, 34, 269, 270, 326], "1016": [29, 34, 269, 270], "s0022": [29, 34, 269, 270], "02": [29, 31, 34, 97, 217, 263, 269, 270, 314, 320, 323, 327, 329, 330, 335, 336, 337, 339, 340, 342, 343, 344, 348, 350], "01203": [29, 34, 269, 270], "ridg": [29, 34, 269, 270], "regress": [29, 34, 269, 270], "ridge_regress": [29, 34, 269, 270], "plot_asd": [29, 329], "plot_magnitude_coherence_phas": [29, 329], "plot_ax": 29, "sharex": [29, 254, 327, 330, 331, 337, 338, 339, 340, 342, 348, 350], "sharei": [29, 254, 337, 338, 339, 340, 348, 350], "logx": 29, "logi": 29, "magnitude_plot_kwarg": [29, 329], "coherence_plot_kwarg": [29, 329], "angle_plot_kwarg": [29, 329], "triangl": [29, 50, 52, 57, 58, 122, 124, 329, 332, 333, 348, 350], "tick": 29, "push": [29, 338, 339, 340, 342, 348], "anoth": [29, 128, 327, 328, 329, 330, 331, 332, 333, 335, 337, 338, 339, 340, 342, 343, 344, 348, 351], "room": 29, "share": [29, 253, 331, 339, 343, 350], "logarithm": [29, 33, 280, 350], "logrithm": [29, 338], "keyward": 29, "plot_singular_valu": [29, 35], "min_freq": [29, 35, 217, 275, 332, 348], "small": [29, 34, 35, 51, 327, 328, 332, 338, 340, 342, 343, 348, 350, 351], "largest_singular_valu": [29, 35], "effect": [29, 34, 35, 76, 120, 268, 280, 327, 329, 330, 332, 333, 338, 340, 342, 343, 344, 348, 350, 351], "displai": [29, 35, 50, 53, 55, 76, 77, 327, 332, 348, 350], "rmss": 29, "set_coherence_phas": [29, 329], "coherence_arrai": 29, "angle_arrai": 29, "maintain": [29, 327, 329, 338, 340, 348], "full_matric": [29, 35], "compute_uv": [29, 35], "as_matrix": [29, 35], "matric": [29, 35, 76, 90, 91, 114, 115, 131, 186, 206, 222, 223, 224, 226, 227, 243, 265, 327, 328, 329, 331, 333, 338, 339, 341, 342, 348, 350, 351], "simpl": [29, 35, 94, 332, 335, 336, 337, 339, 340, 342, 343, 344, 348], "hand": [29, 35, 327, 331, 332, 337, 338, 343, 348, 350], "num_respons": [29, 35, 350], "num_refer": [29, 35, 350], "vh": [29, 35], "to_rattlesnake_specif": [29, 34], "coordinate_ord": [29, 34], "upper_warning_db": 29, "lower_warning_db": 29, "upper_abort_db": 29, "lower_abort_db": 29, "upper_warning_psd": 29, "lower_warning_psd": 29, "upper_abort_psd": 29, "lower_abort_psd": 29, "spectra": [30, 33, 34, 48, 178, 343, 351], "shock": [31, 34, 140, 318, 319, 326, 351], "sum_decayed_sin": 31, "sine_frequ": [31, 315, 320, 321, 322, 323, 324, 325], "sine_tone_rang": [31, 320, 323], "sine_tone_per_octav": [31, 320, 323], "sine_amplitud": [31, 315, 320, 321, 322, 323, 324, 325], "sine_decai": [31, 315, 320, 321, 322, 323, 324, 325], "sine_delai": [31, 315, 320, 321, 322, 323, 324, 325], "srs_damp": [31, 315, 320, 323], "03": [31, 34, 317, 318, 319, 320, 327, 328, 330, 332, 335, 336, 340, 348], "srs_type": [31, 34, 315, 320, 323], "mmaa": [31, 34], "compensation_frequ": [31, 315, 320, 321, 323, 325], "compensation_decai": [31, 315, 320, 321, 323, 325], "95": [31, 57, 320, 323, 327, 328, 330, 350], "number_of_iter": [31, 320], "converg": [31, 86, 320, 328, 350], "error_toler": [31, 320], "05": [31, 34, 217, 273, 319, 320, 323, 327, 328, 329, 333, 335, 336, 348, 350], "tau": [31, 320, 323], "num_time_const": [31, 320, 323], "decay_resolut": [31, 320, 323], "scale_factor": [31, 320, 323], "plot_result": [31, 320, 323], "srs_frequenc": [31, 320], "return_veloc": 31, "return_displac": 31, "return_sr": 31, "return_sine_t": 31, "sr": [31, 34, 318, 320, 351], "mani": [31, 34, 101, 320, 327, 328, 329, 330, 332, 340, 342, 343, 344, 348, 350, 351], "approach": [31, 88, 320, 327, 329, 330, 331, 333, 338, 340, 342, 343, 344, 348, 350], "pleas": [31, 320], "document": [31, 50, 71, 98, 101, 320, 327, 334, 348, 350], "carefulli": [31, 320, 327], "understand": [31, 320, 327, 330, 331, 332, 339, 340, 348, 350], "rate": [31, 34, 50, 55, 244, 249, 280, 318, 319, 320, 322, 324, 325, 327, 329, 332, 339, 350], "tone": [31, 320, 322, 324, 325], "per": [31, 34, 50, 51, 53, 55, 115, 122, 124, 128, 131, 244, 249, 253, 263, 265, 266, 275, 313, 320, 327, 328, 331, 338, 340, 342, 348, 350], "octav": [31, 34, 253, 280, 313, 320], "formula": [31, 320, 330, 338, 340, 342, 348], "initi": [31, 50, 51, 65, 76, 91, 302, 316, 320, 327, 329, 331, 332, 339, 340, 344, 348, 350], "optim": [31, 76, 86, 118, 320, 331, 334, 341, 350, 351], "divid": [31, 320, 338, 340, 342, 348], "often": [31, 320, 327, 331, 332, 337, 338, 339, 340, 342, 343, 348, 350], "motion": [31, 34, 50, 76, 116, 265, 294, 307, 320, 327, 329, 330, 335, 338, 340, 342, 344, 348, 351], "63": [31, 57, 320, 328, 330, 340, 348, 350], "equat": [31, 76, 91, 223, 224, 253, 265, 294, 317, 320, 327, 329, 335, 336, 338, 340, 342, 344, 351], "pi": [31, 76, 320, 330, 338, 339, 340, 342, 343, 348, 350], "zeta": [31, 317, 320, 340, 348], "critic": [31, 34, 88, 263, 317, 318, 319, 320, 337, 338, 340, 348], "damp": [31, 34, 39, 53, 76, 88, 89, 90, 91, 100, 106, 107, 131, 201, 203, 217, 263, 265, 317, 318, 319, 320, 327, 328, 329, 330, 331, 332, 333, 336, 337, 341, 342, 343, 344, 350, 351], "instead": [31, 33, 35, 50, 76, 91, 263, 265, 320, 327, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 348, 350], "delai": [31, 39, 261, 320, 322, 324, 325], "compon": [31, 34, 95, 275, 320, 327, 329, 333, 334, 338, 339, 340, 343, 348], "calcul": [31, 34, 91, 92, 203, 317, 318, 319, 320, 327, 329, 332, 333, 340, 350], "po": [31, 319, 320], "acceler": [31, 32, 76, 91, 131, 201, 203, 204, 205, 263, 265, 318, 319, 320, 322, 327, 331, 332, 339, 340, 342, 348, 350], "rel": [31, 33, 34, 86, 101, 319, 320, 343, 350], "express": [31, 319, 320, 337, 338, 340, 342, 348], "equival": [31, 76, 87, 91, 128, 305, 319, 320, 327, 330, 332, 340, 342, 343, 348, 350], "primari": [31, 50, 59, 319, 320, 342], "residu": [31, 84, 85, 86, 198, 201, 203, 204, 205, 206, 217, 317, 319, 320, 327, 332, 350], "largest": [31, 317, 319, 320, 344, 348], "maximax": [31, 319, 320], "fn": [31, 319, 320], "compens": [31, 320, 325], "puls": [31, 34, 320, 325, 343, 350], "lowest": [31, 34, 119, 201, 203, 320, 340], "At": [31, 320, 327, 328, 330, 331, 332, 333, 337, 338, 339, 340, 342, 348, 350], "prefer": [31, 34, 50, 59, 320, 327, 329, 338, 340, 348, 350], "correct": [31, 86, 222, 320, 328, 330, 331, 332, 333, 342, 343, 348, 350], "latter": [31, 320, 327, 331, 338, 340, 343, 350], "ensur": [31, 34, 320, 327, 328, 329, 330, 331, 332, 333, 337, 338, 340, 342, 343, 348, 350], "identifi": [31, 50, 58, 320, 328, 329, 331, 332, 337, 338, 340, 343, 348, 350], "resolut": [31, 302, 320, 338, 350], "known": [31, 199, 320, 337, 338, 340, 344, 348, 350], "better": [31, 50, 55, 73, 88, 201, 302, 320, 327, 332, 333, 337, 339, 340, 342, 343, 344, 348, 350], "touch": [31, 320, 340], "veloc": [31, 32, 76, 91, 131, 201, 203, 204, 205, 263, 265, 320, 322, 339, 340, 348, 350], "inch": [31, 320, 322], "386": [31, 320, 322], "089": [31, 320, 322], "meter": [31, 320, 322, 348, 350], "80665": [31, 320, 322], "show": [31, 50, 51, 53, 55, 73, 100, 122, 124, 195, 320, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 348, 350], "tabl": [31, 76, 77, 89, 103, 122, 137, 327, 328, 330, 331, 332, 340, 348, 350, 351], "diagnost": [31, 320], "print": [31, 302, 320, 327, 328, 330, 332, 333, 338, 339, 340, 348, 350], "consol": [31, 320, 327, 331, 332, 338, 350, 351], "good": [31, 34, 50, 55, 327, 328, 329, 330, 331, 332, 338, 340, 342, 343, 344, 348, 350], "sine_t": 31, "decayedsinet": [31, 39], "excitation_forc": 32, "heat_flux": 32, "mass": [32, 50, 57, 76, 88, 90, 91, 114, 115, 116, 131, 263, 265, 327, 328, 330, 332, 333, 336, 341, 342, 344, 348, 350, 351], "pressur": 32, "reaction_forc": 32, "rpm": [32, 337], "sound_intens": 32, "sound_pow": 32, "sound_pressur": 32, "strain": [32, 57, 330, 337], "stress": [32, 50, 57, 58, 337, 338], "temperatur": 32, "ifft": [33, 35], "rtol": [33, 34], "atol": [33, 34], "1e": [33, 34, 86, 91, 92, 131, 308, 310, 329, 340, 343, 348], "08": [33, 34, 86, 91, 92, 330, 348], "scipy_irfft_kwarg": [33, 35], "abcsissa": [33, 34], "irfft": [33, 35], "notimplementederror": [33, 34, 76, 91], "interpolate_by_zero_pad": [33, 35], "time_response_padded_length": 33, "return_time_respons": 33, "back": [33, 34, 35, 76, 317, 327, 328, 329, 331, 332, 333, 337, 338, 339, 340, 343, 350], "last": [33, 34, 35, 55, 76, 88, 186, 188, 224, 231, 327, 332, 337, 338, 340, 342, 343, 348, 350], "becaus": [33, 34, 35, 280, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350], "won": [33, 35, 333, 344, 348], "accur": [33, 35, 327, 328, 329, 330, 332, 338, 342, 350], "anywai": [33, 35, 348], "less": [33, 34, 35, 327, 328, 329, 338, 339, 340, 342, 343, 344, 348, 350], "plot_spectrogram": 33, "pcolormesh_kwarg": 33, "shade": 33, "log_scal": 33, "spectrogram": 33, "pcolormesh": 33, "colormap": [33, 350], "burst_random_sign": 34, "dt": [34, 35, 76, 91, 190, 261, 266, 273, 274, 276, 278, 279, 280, 319, 327, 332, 337, 338, 339, 340, 342, 343, 350], "signal_length": [34, 274, 276, 337], "signal_rm": [34, 275, 332], "frequency_shap": 34, "on_fract": [34, 273], "delay_fract": [34, 273], "ramp_fract": [34, 273], "comment1": [34, 38, 39, 88, 327, 328, 330, 331, 350], "comment2": [34, 38, 39, 88, 327, 330, 331, 350], "comment3": [34, 38, 39, 88, 327, 330, 331, 350], "comment4": [34, 38, 39, 88, 327, 330, 331, 350], "comment5": [34, 38, 39, 88, 327, 331, 350], "burst": [34, 302], "nonzero": [34, 338, 340, 348], "highest": [34, 201, 203, 340, 350], "broadcast": [34, 38, 327, 339, 348, 350, 351], "essenti": [34, 51, 329, 332, 343, 348], "repeat": [34, 116, 117, 147, 327, 328, 331, 332, 338, 340, 342, 343, 348], "activ": [34, 343], "befor": [34, 266, 317, 327, 332, 338, 339, 343, 348, 350], "start": [34, 48, 50, 53, 55, 280, 313, 327, 329, 330, 331, 332, 333, 338, 339, 340, 342, 343, 348, 350], "ramp": [34, 318, 319, 331, 343, 350], "off": [34, 50, 55, 327, 329, 333, 338, 339, 340, 342, 343, 348], "comment": [34, 38, 39, 53, 76, 77, 88, 327, 328, 330, 340, 350], "describ": [34, 38, 39, 53, 249, 331, 337, 340, 342, 348, 350], "chirp_sign": [34, 337], "start_frequ": [34, 48], "end_frequ": [34, 48], "amplitude_funct": 34, "force_integer_cycl": [34, 274], "chirp": [34, 337, 350], "sweep": [34, 280, 337], "stop": [34, 53, 331, 332, 340, 342, 343, 350], "long": [34, 327, 332, 337, 340, 342, 343, 348, 350], "forc": [34, 76, 91, 131, 204, 205, 263, 298, 328, 329, 330, 331, 332, 337, 338, 339, 340, 341, 342, 343, 344, 348, 350, 351], "cycl": [34, 263, 265, 317, 338, 340, 343], "adjust": [34, 35, 53, 55, 261, 329, 348, 350], "samples_per_fram": [34, 244, 327, 331, 332, 350], "averages_to_keep": [34, 244], "percent": [34, 76, 89, 338, 350], "autospectr": [34, 244], "cpsd_arrai": 34, "cross": [34, 115, 116, 117, 305, 333, 338, 339, 340, 342, 351], "Be": [34, 280], "awar": [34, 280, 340, 343, 348, 350], "period": [34, 343], "mai": [34, 35, 40, 76, 275, 302, 327, 328, 329, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350], "out": [34, 50, 58, 71, 86, 190, 327, 328, 329, 331, 332, 333, 335, 337, 338, 339, 340, 342, 343, 350], "spectrumarrai": 34, "find_signal_shift": 34, "other_sign": 34, "compute_subsample_shift": 34, "good_line_threshold": 34, "01": [34, 48, 53, 208, 217, 327, 328, 330, 332, 333, 335, 336, 340, 342, 343, 344, 348, 350], "shift": [34, 35, 50, 261, 332, 337, 338, 343, 348], "amount": [34, 50, 51, 91, 261, 329, 330, 332, 338, 339, 340, 342, 343, 344, 350], "featur": [34, 327, 329, 332, 338, 339, 340, 342, 350, 351], "earlier": [34, 340], "align": [34, 50, 59, 76, 87, 327, 328, 342, 343, 348], "take": [34, 90, 186, 203, 261, 266, 275, 302, 327, 328, 330, 331, 332, 337, 338, 340, 342, 343, 348, 350], "shift_sign": 34, "subsampl": 34, "ignor": [34, 91, 329, 330, 340, 342, 348], "time_shift": 34, "from_exodu": [34, 50, 76, 327, 328, 331, 332, 333, 351], "exo": [34, 50, 59, 76, 79, 124, 125, 327, 328, 331, 332, 333, 351], "x_disp": [34, 76, 79, 91], "dispx": [34, 76, 79, 91, 331, 332], "y_disp": [34, 76, 79, 91], "dispi": [34, 76, 79, 91, 331, 332], "z_disp": [34, 76, 79, 91], "dispz": [34, 76, 79, 91, 331, 332], "x_rot": [34, 76, 79, 91], "y_rot": [34, 76, 79, 91], "z_rot": [34, 76, 79, 91], "timestep": [34, 55, 76, 79, 91, 122, 124, 331, 332, 350], "exodu": [34, 50, 59, 76, 79, 91, 121, 124, 128, 328, 332, 333, 334, 351], "exodusinmemori": [34, 50, 59, 76, 79, 91, 122, 128, 327, 331, 351], "nodal": [34, 76, 79, 115, 122, 124, 178, 179, 344, 351], "haversine_sign": 34, "pulse_width": [34, 276], "pulse_tim": [34, 276], "pulse_peak": [34, 276], "haversin": 34, "With": [34, 327, 328, 329, 331, 332, 333, 343, 344, 350, 351], "peak": [34, 317, 332, 337, 338, 339, 340, 344, 350], "convolut": 34, "impulseresponsefunctionarrai": [34, 35], "immedi": [34, 76, 327, 332, 343, 348, 350], "don": [34, 317, 327, 331, 333, 337, 340, 342, 343, 348, 350], "time_method": 34, "single_fram": 34, "cola_frame_length": 34, "cola_window": 34, "cola_overlap": 34, "zero_pad_length": 34, "inverse_method": 34, "domain": [34, 302, 326, 327, 332, 337, 339, 340, 343, 348, 350], "transient": [34, 50, 55, 212, 262, 266, 302, 327, 334, 335, 337, 338, 339, 340, 342, 343, 350], "fourier": [34, 35, 343, 350], "deconvolut": 34, "ones": [34, 333, 344, 348, 350], "transer_funct": 34, "encompas": 34, "entir": [34, 124, 190, 253, 327, 329, 330, 338, 340, 342, 343, 348, 350, 351], "cola": 34, "seri": [34, 338, 350], "f": [34, 264, 265, 302, 330, 332, 336, 338, 339, 340, 341, 342, 343, 344, 348], "df": [34, 249, 257, 327, 348, 350], "procedur": [34, 46, 75], "pre": [34, 340, 343, 348], "post": [34, 340, 348], "avoid": [34, 50, 327, 328, 333, 339, 348], "wrap": [34, 124, 339], "around": [34, 35, 124, 190, 201, 203, 327, 332, 337, 339, 348, 350], "determine_zero_pad_length": 34, "Not": [34, 122], "requir": [34, 50, 58, 76, 117, 122, 197, 262, 266, 275, 327, 328, 329, 331, 332, 333, 338, 339, 340, 341, 342, 348, 351], "target": [34, 327, 332, 350], "trace": [34, 50, 58, 337, 348], "h": [34, 101, 117, 131, 262, 263, 264, 265, 266, 302, 329, 339, 340, 342, 343, 348], "add_method": 34, "overlap_and_add": 34, "functions_to_overlap": 34, "overlap_sampl": 34, "other": [34, 76, 84, 87, 128, 212, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 348, 350], "segment": [34, 339], "metadata": [34, 330, 331, 340], "need": [34, 50, 66, 76, 77, 87, 128, 261, 327, 328, 330, 331, 332, 337, 338, 339, 340, 342, 343, 348, 350], "No": [34, 35, 40, 77, 262, 266, 339, 340, 342, 343], "sure": [34, 327, 331, 332, 333, 337, 339, 342, 348, 350], "subsequ": [34, 203, 338, 342], "pseudorandom_sign": [34, 332], "different_r": 34, "pseudorandom": [34, 342, 350, 351], "pulse_sign": 34, "sine_expon": [34, 276], "cosin": [34, 338, 348], "expon": [34, 340, 348], "random_sign": [34, 332], "remove_rigid_body_mot": 34, "remov": [34, 52, 119, 120, 302, 327, 331, 332, 338, 340, 342, 343, 348, 350], "rigid": [34, 50, 57, 84, 85, 86, 307, 328, 330, 334, 339, 340, 342, 350], "bodi": [34, 50, 84, 85, 86, 131, 328, 330, 334, 338, 340, 342, 350], "step": [34, 50, 55, 76, 91, 122, 266, 280, 317, 327, 328, 329, 330, 331, 332, 333, 337, 338, 340, 342, 348, 350], "subtract": [34, 85, 327, 333, 342, 348], "util": [34, 329, 342, 344, 348, 350], "theorem": [34, 275], "caus": [34, 253, 302, 327, 338, 339, 343, 348, 350], "shifted_sign": 34, "sine_sign": 34, "sinusoid": [34, 292, 322, 324, 325, 327, 338, 339, 341, 343, 348], "sine_sweep_sign": 34, "frequency_breakpoint": 34, "sweep_typ": [34, 280], "sweep_rat": [34, 280], "split_into_fram": 34, "frame_length": [34, 91, 342, 343], "check_cola": 34, "allow_fractional_fram": 34, "neither": 34, "quarter": [34, 342, 343], "array_lik": 34, "get_window": 34, "dft": 34, "compat": 34, "remain": [34, 302, 327, 330, 331, 337, 338, 339, 340, 348, 350], "num_fram": [34, 350], "num_point": 34, "points_per_octav": [34, 313], "encod": [34, 327, 348, 350], "srss": [34, 319], "extra": [34, 76, 149, 150, 204, 205, 327, 329, 332, 333, 343, 348, 350], "front": [34, 348], "shockresponsespectrumarrai": 34, "charact": [34, 327, 350], "stft": 34, "short": [34, 338, 340, 343], "frame_abscissa": 34, "center": [34, 50, 253, 302, 327, 332, 338, 350], "min_tim": [34, 142, 143, 144], "max_tim": [34, 142, 143, 144], "compute_cmif": [35, 350], "track": [35, 100, 111, 328, 329, 338, 339, 350], "imag": [35, 51, 53, 55, 100, 101, 103, 111, 190, 197, 222, 224, 338, 339, 342, 343, 348, 350, 351], "modeindicatorfunctionarrai": 35, "compute_mif": 35, "mif_typ": [35, 208, 217], "mif_arg": [35, 208], "mif_kwarg": [35, 208], "mmif": [35, 332, 350], "compute_": 35, "mif": [35, 197], "compute_mmif": [35, 350], "mass_matrix": [35, 241], "compute_nmif": [35, 350], "delay_respons": 35, "had": [35, 327, 333, 340, 348, 350], "been": [35, 122, 124, 197, 231, 328, 329, 330, 332, 333, 337, 338, 343, 344, 348, 350, 351], "shifted_transfer_funct": 35, "convers": 35, "wrapper": 35, "wiser": 35, "h1": [35, 40, 262, 266, 332, 343], "return_model_data": [35, 40, 266], "timedata2frf_kwarg": [35, 40], "lrm": [35, 40, 262, 266, 302], "timedata2frf": [35, 40, 302], "frf_local_model": [35, 40, 262, 266], "warn": [35, 122, 124, 269, 270, 271, 330, 343], "appear": [35, 327, 328, 332, 337, 339, 342, 343, 348, 350], "irf_padded_length": 35, "return_irf": 35, "mag": [35, 348], "plot_cond_num": 35, "number_retained_valu": 35, "condition_numb": 35, "plot_with_coher": 35, "substructure_by_constraint_matrix": 35, "dof": [35, 116, 131, 179, 327, 328, 329, 330, 338, 339, 340, 344, 350, 351], "constraint_matrix": [35, 91, 333], "substructur": [35, 91, 95, 334, 335, 351], "constraint": [35, 50, 57, 59, 91, 92, 203, 302, 328, 330, 333, 335, 343, 348], "constrained_frf": [35, 350], "constrain": [35, 91, 92, 332, 333, 350], "substructure_by_coordin": [35, 91, 350], "dof_pair": [35, 91, 350], "constain": 35, "ground": [35, 57, 91, 338, 339, 340], "cannot": [35, 244, 327, 328, 331, 333, 339, 340, 343, 348, 350], "quantiti": [37, 53, 55, 330, 337, 339, 342, 344, 348, 350], "data_typ": [38, 176, 350], "obj": 38, "wave": [39, 275, 280, 327, 332, 337, 338, 339, 342, 343, 350], "sinet": 39, "imat_fn_struct": 41, "In": [41, 50, 60, 76, 80, 326, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 341, 342, 343, 344, 348, 350], "oper": [46, 75, 204, 205, 327, 330, 331, 332, 333, 342, 348, 350, 351], "subcompon": [46, 281], "tracelin": [46, 50, 54, 66, 70, 182, 281, 330, 331, 333, 340, 351], "coordinate_system_arrai": 47, "u40": [47, 54, 327, 350], "uint16": [47, 49, 52, 54], "cs_type": [47, 56, 173, 327, 350], "coordinatesytemarrai": 47, "deflection_shape_data": [48, 50], "background_plotter_kwarg": [48, 50, 53], "auto_upd": [48, 50, 53, 55], "undeformed_opac": [48, 50, 53, 55, 327, 328, 330, 331, 333], "starting_scal": [48, 50, 53], "deformed_opac": [48, 50, 53, 55, 327, 328, 331, 333], "num_curv": [48, 50, 55], "shapeplott": [48, 50, 77, 342], "anim": [48, 50, 51, 53, 55, 101, 331, 332, 338, 340, 350, 351], "deflect": [48, 50, 64, 212, 327, 330, 332, 337, 338, 340, 342], "backgroundplott": [48, 50, 51, 53, 55], "constructor": [48, 53, 73, 76], "opac": [48, 50, 53, 55], "undeform": [48, 50, 53, 55, 338], "selector": [48, 50, 55, 332], "modify_abscissa": [48, 55], "save_multiline_anim": 48, "frame_r": [48, 51, 53, 55, 104, 106, 107, 111], "phase_change_per_fram": 48, "087": 48, "frequency_change_per_fram": 48, "start_phas": 48, "individual_imag": [48, 51, 53, 55], "element_arrai": 49, "uint8": 49, "node_list": [49, 50, 52, 54], "defc": [50, 327, 340, 350], "disc": [50, 327, 340, 350], "coordinate_system": [50, 63, 64, 66, 67, 327, 333, 340, 350], "spatial": [50, 333], "support": 50, "nodearrai": [50, 68, 327, 328, 333, 340, 350, 351], "coordinatesystemarrai": [50, 52, 56, 63, 64, 67, 327, 340, 350, 351], "tracelinearrai": [50, 70, 327, 340, 350, 351], "elementarrai": [50, 52, 57, 327, 340, 350, 351], "add_el": 50, "elem_typ": [50, 122], "add_tracelin": [50, 327, 331, 333], "node_id": 50, "greater": [50, 271, 348], "modif": [50, 329], "made": [50, 88, 94, 96, 101, 128, 340, 343, 348, 350], "camera_visu": 50, "k": [50, 76, 91, 115, 116, 131, 186, 188, 223, 224, 225, 226, 227, 228, 231, 265, 295, 296, 298, 302, 330, 338, 339, 340, 342, 343, 348], "rt": [50, 186, 188, 223, 224, 225, 226, 231], "image_s": 50, "camera": [50, 55, 185, 186, 187, 188, 190, 221, 222, 223, 224, 225, 226, 227, 231, 338, 343, 350, 351], "intrins": [50, 186, 187, 188, 222, 225, 226, 227, 231], "extrins": [50, 186, 187, 188, 222, 224, 225, 226, 227, 231], "distanc": [50, 84, 91, 92, 231, 333], "rai": 50, "project": [50, 52, 85, 186, 188, 227, 307, 327, 329, 331, 335, 342, 348, 350, 351], "pinhol": [50, 231], "assign": [50, 74, 76, 91, 122, 197, 327, 328, 332, 333, 338, 339, 340], "geoemtri": 50, "compress_id": 50, "compress_nod": 50, "compress_el": 50, "compress_tracelin": 50, "compress_c": 50, "return_map": 50, "compress": [50, 338], "contigu": 50, "done": [50, 270, 327, 329, 331, 332, 340, 342, 348, 350], "mapped_geometri": 50, "node_map": 50, "old": [50, 329, 331], "traceline_map": 50, "element_map": 50, "cs_map": 50, "from_excel_templ": [50, 71], "path_to_xlsx": [50, 58, 71], "excel": [50, 58, 71, 332], "templat": [50, 58, 71, 331], "path": [50, 51, 53, 55, 58, 71, 101, 122, 137, 149, 150, 187, 327, 350, 351], "xlsx": [50, 58, 71], "write_excel_templ": [50, 58], "workbook": [50, 58], "four": [50, 58, 131, 339, 340, 343, 350], "worksheet": [50, 58], "tab": [50, 58, 100, 327, 350], "global": [50, 52, 58, 59, 63, 64, 67, 86, 122, 327, 329, 332, 339, 340, 348], "idea": [50, 58, 343, 344, 350], "cartesian": [50, 56, 58, 327, 340, 350], "polar": [50, 56, 58, 115, 342], "spheric": [50, 56, 58, 64, 327, 340, 350], "locat": [50, 58, 224, 327, 330, 331, 332, 334, 337, 338, 339, 340, 341, 342, 343, 348, 350], "Then": [50, 58, 317, 331, 332, 348, 350], "arbitrari": [50, 58, 329, 348], "compound": [50, 58], "fill": [50, 58, 71, 151, 327, 331], "uniqu": [50, 58, 84, 327, 330, 331, 333, 340, 342, 344, 348, 350], "definit": [50, 58, 152, 327, 332, 338, 339, 340, 342, 348, 350], "hex": [50, 58], "quad": [50, 58, 122, 124], "tet": [50, 58], "tri": [50, 58, 122, 124, 331], "beam": [50, 57, 58, 91, 94, 96, 114, 115, 116, 117, 335, 337, 340, 344, 348, 351], "defult": [50, 58], "41": [50, 57, 58, 253, 328, 330, 332, 340, 343, 344, 348, 350], "plane": [50, 52, 57, 58, 84, 116, 327, 337, 342], "44": [50, 57, 58, 131, 330, 332, 338, 340, 348, 350], "quadrilater": [50, 57, 58], "though": [50, 58, 327, 328, 330, 332, 338, 340, 342, 343, 348, 350], "block": [50, 59, 91, 122, 124, 128, 212, 327, 328, 331, 332, 333, 338, 348, 350], "preferred_local_orient": [50, 59, 327], "secondary_preferred_local_orient": [50, 59, 327], "local_nod": [50, 59], "import": [50, 59, 121, 328, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 344, 348, 351], "flag": [50, 59, 190, 327, 332], "instrumnet": [50, 59], "finit": [50, 59, 76, 113, 128, 302, 328, 330, 331, 333, 334, 335, 340, 343, 348, 350], "sensor": [50, 56, 57, 59, 68, 70, 76, 86, 119, 120, 327, 329, 331, 333, 337, 338, 342, 344], "orient": [50, 59, 86, 115, 327, 331, 350], "perpendicular": [50, 59, 116, 327, 342, 343, 350], "surfac": [50, 57, 59, 91, 122, 124, 128, 327, 328, 333], "mount": [50, 59], "itself": [50, 59, 124, 327, 337, 338, 342, 348, 350], "secondari": [50, 59, 327], "parallel": [50, 59, 302, 350], "from_imat_struct": [50, 76], "imat_fem_struct": [50, 60, 76, 80], "imat_fem": [50, 60], "unv_dict": [50, 61, 62], "readunv": [50, 61, 62, 76, 351], "global_deflect": 50, "deform": [50, 55, 330, 331, 337, 338, 340, 348, 351], "global_node_coordin": 50, "respect": [50, 66, 75, 304, 327, 328, 329, 332, 333, 337, 338, 340, 348, 350], "proper": [50, 66, 327, 329, 331], "map_id": 50, "traceline_id_map": 50, "element_id_map": 50, "coordinate_system_id_map": 50, "unchang": [50, 329, 332, 350], "geom_out": 50, "modify_id": [50, 330], "node_chang": [50, 330], "traceline_chang": 50, "element_chang": 50, "coordinate_system_chang": 50, "node_by_global_posit": 50, "global_position_arrai": 50, "nodarrai": [50, 52], "position_arrai": [50, 52], "overlay_geometri": [50, 333, 350], "color_overrid": [50, 76, 83, 328, 331, 333, 350], "return_node_id_offset": [50, 333, 350], "conflict": [50, 327, 328, 330, 333, 350], "iterbl": [50, 76, 83], "overrid": [50, 76, 83, 348, 350], "node_offset": [50, 333], "node_s": [50, 327, 330, 331, 333, 337], "line_width": [50, 327, 330, 331, 333], "view_up": [50, 327, 331, 333], "view_from": [50, 330, 337], "plotter": [50, 51, 53, 76, 77, 327, 331, 332, 340, 342, 350], "show_edg": [50, 327, 333], "interact": [50, 113, 194, 332, 337, 340, 342, 348, 350, 351], "pixel": [50, 55, 190, 224, 225, 226, 231], "edg": [50, 57, 329, 332, 350], "transpar": [50, 55], "complet": [50, 55, 151, 331, 332, 348, 350], "opaqu": [50, 55], "invis": 50, "view": [50, 222, 332, 337, 340, 342], "draw": [50, 337, 338], "keyerror": 50, "referenc": [50, 327, 339, 340, 348, 350], "face_mesh": 50, "mesh": [50, 122, 124, 128, 327, 328, 332, 333, 350], "point_mesh": 50, "solid_mesh": 50, "plot_coordin": [50, 197, 327, 329, 330, 331, 337, 340, 342, 343, 350], "arrow_scal": [50, 327, 329, 340, 350], "arrow_scale_typ": 50, "bbox": 50, "label_dof": [50, 327, 329, 330, 331, 337, 340, 342, 350], "label_font_s": 50, "arrow_ends_on_nod": 50, "arrow": [50, 331, 348, 350], "proport": [50, 88, 91, 302, 332, 338, 340, 348], "box": [50, 331, 332, 333, 350], "raw": [50, 327, 350], "font": 50, "tip": [50, 131, 327, 329, 330, 337, 343, 344, 350], "defualt": 50, "plot_deflection_shap": [50, 197, 337, 342, 350], "editor": [50, 51, 55], "plot_shap": [50, 194, 209, 218, 327, 328, 330, 331, 332, 333, 340, 342, 350], "plot_transi": [50, 332, 337, 350], "displacement_data": [50, 55, 124], "displacement_scal": [50, 55, 337, 350], "frames_per_second": [50, 55], "transformation_shap": [50, 55, 91], "app": [50, 51, 55], "window_s": [50, 51, 55], "off_screen": [50, 51, 55], "allow_quit_keypress": [50, 51, 55], "toolbar": [50, 51, 53, 55, 340, 350], "menu_bar": [50, 51, 55], "update_app_icon": [50, 51, 55], "transientplott": [50, 350], "expand": [50, 55, 76, 122, 327, 331, 340, 348], "run": [50, 55, 101, 133, 302, 328, 331, 332, 333, 334, 335, 337, 342, 343, 348, 350, 351], "qapplic": [50, 51, 55], "1024": [50, 55], "768": [50, 55], "render": [50, 55], "screen": [50, 55, 327], "autom": [50, 55, 327, 332, 350], "screenshot": [50, 55, 350], "debug": [50, 55], "exit": [50, 55, 332], "press": [50, 55, 76, 327, 332, 340, 350], "q": [50, 55, 124, 331, 340, 344, 348, 350], "vtk": [50, 55], "qt": [50, 51, 55], "icon": [50, 55, 331], "logo": [50, 55], "pyvista": [50, 51, 55, 330], "titl": [50, 55, 104, 105, 108, 109, 110, 111, 122, 331, 342, 343], "multi_sampl": [50, 55], "mitig": [50, 55], "alias": [50, 55, 327, 343], "impact": [50, 55, 302, 332, 342, 343], "line_smooth": [50, 55], "enabl": [50, 55, 124, 327, 332, 350], "smoth": [50, 55], "point_smooth": [50, 55], "polygon_smooth": [50, 55], "polygon": [50, 55], "actor": [50, 55], "rigid_body_shap": [50, 84, 85, 197], "inertia": [50, 115], "cg": [50, 327], "principal_ax": 50, "analyt": [50, 84, 85, 86, 201, 327, 343, 344], "3x3": [50, 189, 191, 225, 226, 227, 231, 304], "moment": [50, 115, 327, 342], "graviti": [50, 327], "articl": [50, 91, 327, 331, 342, 348], "those": [50, 75, 85, 149, 150, 179, 206, 327, 329, 331, 332, 333, 337, 339, 340, 342, 343, 344, 348, 350, 351], "output_shap": [50, 203], "doesn": [50, 122, 124, 333, 340, 342, 343, 348], "write": [50, 71, 76, 122, 124, 140, 145, 151, 331, 332, 338, 340, 342, 348, 350, 351], "noth": [50, 71], "instruct": [50, 71, 253, 339], "write_to_unv": [50, 76], "write_nod": 50, "write_coordinate_system": 50, "write_tracelin": 50, "write_el": 50, "dataset_2412_kwarg": 50, "dataset_2420_kwarg": 50, "unvers": 50, "written": [50, 76, 122, 332, 338], "similar": [50, 76, 327, 328, 332, 337, 338, 339, 343, 348, 350], "2411": [50, 351], "2420": [50, 351], "82": [50, 57, 327, 330, 350, 351], "2412": [50, 327, 350, 351], "app_window_class": 51, "mainwindow": 51, "howev": [51, 263, 265, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350], "save_rotation_anim": 51, "them": [51, 53, 55, 224, 327, 328, 329, 330, 331, 332, 333, 338, 339, 340, 342, 344, 348, 350], "gif": [51, 53, 55, 331, 340, 350], "boolean": [51, 53, 55, 262, 266, 302, 350], "individu": [51, 53, 55, 56, 57, 68, 70, 331, 332, 340, 348], "png": [51, 53, 55, 331], "img": [51, 53, 55], "node_arrai": 52, "by_grid": 52, "grid_spac": [52, 327], "x_min": 52, "y_min": 52, "z_min": 52, "x_max": 52, "y_max": 52, "z_max": 52, "grid": [52, 97, 327, 330, 333, 338, 339, 343, 348], "approxim": [52, 327, 330, 338, 340, 342, 348, 350], "minimun": 52, "by_posit": [52, 327, 328, 333], "def_c": [52, 68, 327, 350], "disp_c": [52, 68, 327, 350], "global_coordin": 52, "cs_arrai": 52, "project_to_minimum_plan": 52, "return_3d": 52, "triangul": [52, 122, 124, 333], "projection_funct": 52, "return_element_arrai": 52, "element_color": 52, "condition_threshold": [52, 333], "delaunai": 52, "simplic": 52, "poorli": 52, "shape_nam": 53, "show_damp": 53, "geometryplott": [53, 55], "add_menu_bar": [53, 55], "bar": [53, 55, 57, 348], "add_toolbar": [53, 55], "compute_displac": 53, "compute_scal": 53, "renorm": 53, "next_shap": 53, "increas": [53, 302, 329, 332, 337, 338, 339, 340, 343, 348], "play_anim": [53, 55], "plai": [53, 329, 332, 342, 343, 350], "prev_shap": 53, "decreas": [53, 302, 332, 338], "reset_shap": 53, "reset": [53, 55], "save_anim": [53, 55, 331], "save_animation_all_shap": 53, "filename_bas": 53, "shape_": 53, "easili": [53, 327, 328, 330, 331, 338, 340, 343, 348, 350], "produc": [53, 91, 327, 328, 329, 330, 331, 332, 333, 335, 338, 340, 342, 343, 344, 348, 351], "actual": [53, 271, 327, 329, 330, 331, 333, 338, 340, 343, 348, 350], "save_animation_from_act": 53, "select_complex": 53, "select_loop": 53, "select_scaling_0p25": [53, 55], "25x": [53, 55], "select_scaling_0p5": [53, 55], "5x": [53, 55, 350], "select_scaling_0p8": [53, 55], "8x": [53, 55, 350], "select_scaling_1": [53, 55], "select_scaling_1p25": [53, 55], "select_scaling_2p0": [53, 55], "2x": [53, 55, 275, 340, 350], "select_scaling_4p0": [53, 55], "4x": [53, 55, 350], "select_shap": 53, "select_speed_0p8": [53, 55], "speed": [53, 55, 340, 343, 350], "select_speed_1": [53, 55], "select_speed_1p25": [53, 55], "show_com": 53, "hide": 53, "stop_anim": [53, 55], "toggle_undeform": 53, "update_shap": 53, "update_shape_mod": 53, "elaps": 53, "traceline_arrai": 54, "fulli": [54, 332, 348], "go_to_first_step": 55, "go_to_last_step": 55, "go_to_next_step": 55, "go_to_previous_step": 55, "play_animation_revers": 55, "start_tim": [55, 197], "stop_tim": 55, "update_abscissa_revers": 55, "update_displac": 55, "update_selector": 55, "here": [57, 327, 328, 329, 331, 332, 337, 338, 339, 340, 342, 343, 344, 348, 350], "rod": 57, "parabol": 57, "31": [57, 327, 328, 330, 332, 340, 344, 348, 350], "straight": 57, "pipe": 57, "32": [57, 327, 328, 330, 332, 340, 344, 348, 350], "42": [57, 131, 330, 340, 344, 348, 350], "43": [57, 327, 330, 332, 340, 348, 350], "45": [57, 76, 100, 101, 328, 330, 332, 340, 342, 343, 344, 348, 350], "46": [57, 327, 328, 330, 340, 348, 350], "51": [57, 328, 330, 340, 344, 348, 350], "52": [57, 327, 328, 330, 332, 340, 348, 350], "53": [57, 327, 328, 330, 340, 348, 350], "54": [57, 330, 340, 348, 350], "55": [57, 328, 330, 340, 348, 350, 351], "56": [57, 328, 330, 340, 348, 350], "61": [57, 330, 332, 340, 344, 348, 350], "plate": [57, 96, 340, 342, 343], "62": [57, 330, 340, 348, 350], "64": [57, 327, 330, 340, 348, 350], "65": [57, 330, 332, 340, 348, 350], "66": [57, 327, 328, 330, 332, 340, 348, 350], "71": [57, 327, 330, 332, 340, 342, 348, 350], "membran": 57, "72": [57, 327, 330, 340], "73": [57, 327, 328, 330, 340], "74": [57, 327, 328, 330, 340, 348], "75": [57, 108, 217, 327, 330, 338, 340, 350], "76": [57, 330, 332, 340, 348], "81": [57, 327, 330, 332, 350], "axisymetr": 57, "solid": [57, 332, 350], "84": [57, 330, 332, 339, 340], "85": [57, 328, 330], "91": [57, 328, 330, 332, 348], "thin": 57, "shell": 57, "92": [57, 327, 330, 332, 348], "93": [57, 328, 330], "94": [57, 327, 330], "96": [57, 327, 328, 330, 332], "101": [57, 329, 330, 340, 350], "thick": [57, 117, 332, 337], "wedg": [57, 122, 124], "102": [57, 340, 344], "103": [57, 327, 330, 344], "104": 57, "brick": 57, "105": [57, 330], "106": 57, "111": [57, 337], "tetrahedron": 57, "112": 57, "113": [57, 330], "114": [57, 330], "115": [57, 330], "116": 57, "117": [57, 330], "118": 57, "121": [57, 330, 350], "122": 57, "136": 57, "spring": [57, 131, 336], "137": 57, "138": [57, 327], "139": 57, "141": 57, "damper": [57, 338, 339, 340], "142": [57, 327], "gound": 57, "151": [57, 351], "gap": [57, 331, 342, 350], "152": 57, "161": [57, 170], "lump": [57, 339], "171": [57, 338], "172": [57, 327], "181": 57, "191": 57, "plastic": 57, "cold": 57, "runner": 57, "192": [57, 327, 350], "hot": 57, "193": 57, "water": 57, "194": 57, "fountain": 57, "195": 57, "baffl": 57, "196": 57, "heater": 57, "201": [57, 329, 342, 350], "interfac": [57, 91, 145, 327, 328, 330, 332, 333, 335, 342, 350, 351], "202": 57, "203": 57, "204": 57, "face": [57, 122, 124, 128, 333], "208": 57, "212": 57, "axisymmetr": 57, "213": 57, "221": [57, 330], "222": 57, "231": 57, "232": [57, 340], "axisymentr": 57, "local_coord": 63, "local_deflect": 64, "global_point": 64, "cylindr": [64, 327, 340, 350], "from_id": [65, 333], "to_id": [65, 333], "global_coord": 67, "seq": 69, "sequenc": [69, 122, 191], "group": [69, 76, 327], "sublist": 69, "separ": [69, 206, 331, 332, 342, 348, 350], "help": [72, 84, 327, 330, 331, 333, 337, 339, 342, 348, 350], "tool": [72, 130, 193, 211, 220, 260, 267, 327, 331, 332, 348, 350, 351], "bookkeep": [72, 73, 327, 329, 330, 331, 333, 350], "nrow": 73, "ncol": 73, "is_complex": [73, 76], "argsort_coordin": 73, "row_indic": 73, "column_indic": 73, "row_coordin": [73, 74], "column_coordin": [73, 74], "num_coordinate_column": 73, "num_coordinate_row": 73, "show_colorbar": 73, "imshow_arg": 73, "colorbar": [73, 350], "imshow": [73, 224, 350], "sort_coordin": 73, "return_v": 73, "ndof": [76, 91, 330], "shape_typ": 76, "shape_arrai": [76, 78, 327, 331, 342], "complex_data_dtyp": 76, "compute_frf": [76, 337, 350], "displacement_deriv": [76, 91, 134, 201, 203, 204, 205, 208, 210, 217, 223, 329, 337, 338, 339, 340, 342, 344, 348, 350], "deriv": [76, 91, 201, 203, 204, 205, 223, 317, 327, 338, 339, 340, 341, 348, 350], "output_data": 76, "concatenate_dof": [76, 333], "edit_com": 76, "open": [76, 122, 137, 249, 327, 331, 332], "edit": [76, 77], "look": [76, 84, 128, 201, 203, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350], "ok": 76, "cancel": [76, 339, 340, 342, 348], "shapecommentt": 76, "modal": [76, 82, 88, 91, 100, 108, 109, 131, 249, 263, 326, 329, 330, 332, 333, 334, 335], "garbag": 76, "collect": [76, 327, 334, 338, 339, 340, 348], "close": [76, 122, 327, 329, 331, 332, 333, 340, 343, 344, 348, 350], "thing": [76, 327, 330, 331, 332, 337, 339, 342, 348, 350], "initial_geometri": 76, "expansion_geometri": 76, "expansion_shap": 76, "expansion_coordin": 76, "return_coeffici": 76, "serep": [76, 331, 334], "expans": [76, 330, 331, 334], "fem": [76, 327, 331, 350], "typic": [76, 79, 88, 196, 327, 331, 337, 340, 342, 343, 348, 350], "rotx": [76, 79], "roti": [76, 79], "rotz": [76, 79], "imat_shp_struct": [76, 80], "imat_shp": [76, 80], "characterist": [76, 81, 337, 342, 343, 348], "mode_t": 76, "table_format": [76, 89, 328, 330], "csv": 76, "frequency_format": [76, 89, 100, 108, 109, 111, 197], "damping_format": [76, 89, 100, 108, 109, 111, 197, 328, 330, 332], "rst": 76, "markdown": [76, 89, 328], "latex": [76, 89, 99, 101, 331, 351], "ascii": 76, "modeshap": [76, 100, 340, 344, 348, 350], "system_or_matrix": 76, "return_modal_matrix": 76, "optimize_degrees_of_freedom": 76, "sensors_to_keep": [76, 119, 120, 327, 329, 344], "group_by_nod": 76, "ei": 76, "triaxial": [76, 119, 120, 327, 344], "acceleromet": [76, 119, 120, 327, 331, 337, 338], "independ": [76, 100, 120, 327, 329, 331, 332, 333, 337, 340, 342, 343, 344, 348, 350, 351], "cond": 76, "overlay_shap": [76, 327, 328, 330, 331, 350], "comparit": [76, 83], "new_shap": [76, 83], "plot_frequ": 76, "interp_abscissa": 76, "interp_ordin": 76, "linestyl": 76, "postiion": [76, 327], "command": [76, 327, 340, 350], "real_data_dtyp": 76, "nodelist_or_coordinate_arrai": 76, "reduce_for_comparison": 76, "comparison_shap": 76, "repack": [76, 124, 331], "linearli": [76, 331, 340, 344], "go": [76, 208, 327, 330, 337, 338, 339, 342, 344, 348, 350], "shape_align": [76, 328, 330], "shape_1": [76, 82, 87, 89, 327], "shape_2": [76, 82, 87, 89, 327], "alreadi": [76, 87, 91, 137, 327, 332, 333, 337, 343, 348, 350], "stiff": [76, 90, 91, 114, 115, 116, 131, 265, 327, 328, 330, 332, 333, 338, 339, 340, 341, 342, 343, 344, 348, 350, 351], "time_integr": [76, 91, 327, 329, 337, 338, 339, 340, 342, 350], "simul": [76, 95, 316, 318, 319, 327, 332, 334, 335, 338, 343, 348, 350], "accuraci": [76, 328, 329, 330, 332, 342, 350], "10x": [76, 327, 329, 350], "higher": [76, 338, 339, 340, 342, 343, 348, 350], "interest": [76, 190, 327, 330, 332, 337, 338, 339, 340, 342, 343, 344, 348, 350], "response_arrai": [76, 91], "reference_arrai": [76, 91], "to_complex": 76, "to_real": 76, "force_angl": [76, 235], "7853981633974483": 76, "collaps": [76, 344, 350], "collapse_complex_to_r": 76, "missing_dofs_are_zero": 76, "specific_data_typ": [76, 176], "load_case_numb": [76, 176], "unveris": 76, "yet": [76, 197, 332, 333, 343, 348, 350], "shape_unv": 76, "sdynpy_uff_dataset_55": 76, "qdialog": [77, 195, 214], "link": [77, 350], "qwidget": [77, 210], "widget": [77, 350], "update_mod": 77, "assur": [82, 100, 122, 327, 329, 331, 350], "critera": [82, 333], "automac": 82, "mac_arrai": 82, "rigid_shap": [84, 85, 86, 350], "distance_numb": 84, "distance_yscal": 84, "residuals_to_label": 84, "return_shape_diagnost": 84, "return_figur": 84, "rigid_shape_kwarg": [84, 85], "nomin": [84, 85, 86, 253, 332, 338, 342, 348, 350], "outlier": 84, "neighbor": 84, "penalti": [84, 329], "top": [84, 112, 204, 205, 224, 327, 331, 332, 333, 337, 338, 340, 348, 350], "highlight": [84, 327, 329, 332, 338, 350], "diagnos": 84, "suspicious_channel": 84, "suspic": 84, "channel": [84, 119, 120, 137, 327, 329, 331, 343, 351], "investig": [84, 86, 327, 329, 330, 331, 332, 333, 339, 340, 342, 343, 348, 350], "analytic_rigid_shap": 84, "shape_matrix_exp": 84, "suspect_nod": 86, "new_cs_id": 86, "gtol": 86, "xtol": 86, "minim": [86, 331, 342], "nonlinear": [86, 302, 332, 343, 348], "give": [86, 253, 317, 327, 329, 332, 333, 338, 340, 342, 343, 348, 350], "newli": 86, "suspect": 86, "corrected_geometri": 86, "modal_mass": [88, 176, 327, 350], "transpos": [88, 327, 331, 340, 342, 344, 348, 350], "itegr": 88, "natur": [88, 201, 203, 263, 327, 331, 332, 333, 337, 338, 340, 342, 343, 348, 350], "percentag": 88, "02f": [89, 111], "mac_format": [89, 108], "0f": [89, 338], "percent_error_format": [89, 327, 350], "1f": [89, 100, 111, 197, 337], "text": [89, 330, 337, 338, 344, 348, 350], "comparison": [89, 107, 108, 327, 328, 329, 331, 334, 350], "mac": [89, 100, 327, 328, 329, 330, 331, 332, 333, 350], "output_str": 89, "necessari": [90, 147, 327, 328, 332, 342, 350], "intern": [90, 91, 249, 327, 330, 333, 338, 339, 340, 350], "state": [90, 91, 131, 316, 327, 332, 333, 337, 338, 339, 340, 342, 343, 348, 350, 351], "improperli": [91, 333], "c": [91, 131, 224, 265, 295, 296, 298, 326, 330, 331, 333, 336, 338, 339, 340, 341, 348], "stffness": 91, "assign_modal_damp": [91, 344, 350], "damping_ratio": [91, 201, 202, 203, 263, 299, 300], "num_nod": [91, 122, 344, 350], "rho": [91, 97, 116, 117], "nu": [91, 97, 116, 117], "materi": [91, 115, 116, 327, 344, 350], "lenghth": 91, "young": [91, 117], "modulu": [91, 115, 116, 117], "poisson": [91, 116, 117], "ratio": [91, 116, 117, 201, 203, 263, 331, 337, 338, 340, 342, 343, 348, 350], "steel": [91, 117, 344, 350], "aluminum": [91, 117], "improp": [91, 304], "coordinate_node_offset": 91, "combint": 91, "b": [91, 101, 117, 131, 208, 305, 315, 316, 318, 330, 333, 336, 338, 339, 340, 341, 348], "literatur": [91, 350], "nullspac": [91, 92], "eigensolut": [91, 328, 329, 330, 331, 332, 333, 337, 340, 342, 343, 344, 348, 350], "num_mod": [91, 204, 205, 330, 348], "maximum_frequ": [91, 329, 330, 337, 340, 342, 343, 344, 350], "complex_mod": [91, 217], "return_shap": [91, 330], "frequency_respons": [91, 329, 338, 339, 342, 344, 350], "from_exodus_superel": [91, 328], "superelement_nc4": 91, "transformation_exodus_fil": 91, "reduce_to_external_surfac": 91, "superel": [91, 334, 335], "sierra": [91, 332, 333, 334, 335], "sd": [91, 332, 333, 334, 335], "netcdf4": [91, 122, 331], "extern": [91, 131, 327, 331, 332, 338, 339, 340], "bad": [91, 190, 343, 348], "boundary_dof": [91, 328], "get_indices_by_coordin": 91, "ignore_sign": 91, "request": [91, 327, 351], "ndof_transform": 91, "reduction_transform": 91, "reduce_craig_bampton": [91, 330], "connection_degrees_of_freedom": 91, "num_fixed_base_mod": 91, "return_shape_matrix": [91, 330], "craig": [91, 334, 335], "bampton": [91, 334, 335], "form": [91, 131, 224, 263, 317, 327, 328, 330, 333, 337, 338, 339, 340, 342, 343, 348, 350], "reduce_dynam": [91, 330], "condens": 91, "preserv": [91, 330], "reduce_guyan": [91, 330], "guyan": 91, "remove_transform": 91, "set_proportional_damp": 91, "mass_fract": 91, "stiffness_fract": 91, "simulate_test": [91, 342, 343], "num_averag": [91, 197, 342, 343], "excit": [91, 272, 275, 327, 331, 334, 336, 337, 341, 348], "excitation_level": 91, "excitation_noise_level": 91, "response_noise_level": [91, 342], "steady_state_tim": [91, 342], "excitation_min_frequ": [91, 343], "excitation_max_frequ": [91, 343], "signal_fract": [91, 343], "extra_time_between_fram": [91, 343], "integration_oversampl": [91, 134, 275, 327, 332, 337, 338, 339, 342, 350], "antialias_filter_cutoff_factor": 91, "antialias_filter_ord": 91, "generator_kwarg": 91, "spy": [91, 327, 333, 340], "figsiz": [91, 329, 330, 337, 338, 339, 340, 342, 348, 350], "spy_kwarg": 91, "pyplot": [91, 224, 327, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350], "return_constrained_system": [91, 333], "substructure_by_posit": [91, 328, 330, 350], "distance_threshold": [91, 92, 333], "coloc": [91, 92], "consid": [91, 92, 327, 328, 329, 330, 337, 338, 340, 342, 343, 344, 348, 350], "combined_system": [91, 92, 328, 333, 350], "combined_geometri": [91, 92, 328, 331, 333, 350], "substructure_by_shap": [91, 333], "constraint_shap": [91, 330], "connection_dofs_0": 91, "connection_dofs_1": 91, "sens": [91, 320, 330, 340, 348], "basi": [91, 327, 330, 331, 333, 339, 348], "initial_st": [91, 338, 339, 340], "to_state_spac": 91, "output_displac": 91, "output_veloc": 91, "output_acceler": 91, "output_forc": 91, "input_coordin": 91, "feedforward": [91, 131], "a_stat": 91, "b_state": 91, "c_state": 91, "d_state": 91, "transformation_matrix_at_coordin": 91, "return_valu": 91, "shape_indic": 91, "demonstr": [93, 94, 95, 96, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 348, 350], "airplan": [94, 95, 329, 330, 334, 335, 337], "full_system": [95, 330], "full_geometri": [95, 328, 330], "transmission_system": 95, "shorter": [95, 122, 350], "wing": [95, 327, 329, 330, 337], "transmission_geometri": 95, "all_system": 95, "all_geometri": 95, "125": [97, 327, 337, 338, 340], "beam_height": 97, "beam_width": 97, "69000000000": 97, "33": [97, 117, 327, 328, 330, 332, 340, 348, 350], "2830": [97, 117], "report": [99, 196, 253, 327, 331, 332, 350], "figure_basenam": [100, 331], "output_fil": [100, 331], "figure_basename_relative_to_latex": 100, "max_shap": [100, 111], "cmif_kwarg": [100, 111, 197], "cmif_subplots_kwarg": 100, "mac_subplots_kwarg": [100, 108, 109], "mac_plot_kwarg": 100, "geometry_plot_kwarg": [100, 104, 106, 111, 331], "shape_plot_kwarg": 100, "save_animation_kwarg": [100, 104, 106, 107, 111], "latex_cmif_graphics_opt": 100, "latex_mac_graphics_opt": 100, "latex_shape_graphics_opt": 100, "loop": [100, 101, 190, 249, 327, 328, 332, 333, 339, 342, 348, 350], "latex_shape_subplot_opt": 100, "latex_max_figures_per_pag": 100, "latex_max_figures_first_pag": 100, "latex_cmif_capt": 100, "experiment": [100, 192, 201, 203, 331, 332, 335, 336, 338, 340, 342, 344, 348, 350], "latex_cmif_label": 100, "fig": [100, 197, 320, 327, 330, 331, 332, 337, 338, 339, 340, 342, 343, 344, 348, 350], "latex_mac_capt": 100, "criterion": [100, 327, 329, 331, 350], "latex_mac_label": 100, "latex_shape_subcapt": 100, "hz": [100, 201, 203, 253, 263, 265, 275, 280, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 348, 350], "latex_shape_sublabel": 100, "latex_shape_capt": 100, "latex_shape_label": 100, "latex_shape_table_column": 100, "lllp": 100, "5in": 100, "latex_shape_table_capt": 100, "shown": [100, 327, 330, 331, 332, 333, 340, 343, 348, 350], "brief": [100, 332, 342, 348], "latex_shape_table_label": 100, "modelist": 100, "figure_label": 101, "figure_capt": 101, "graphics_opt": 101, "animate_graphics_opt": 101, "figure_plac": 101, "subfigure_opt": 101, "subfigure_label": 101, "subfigure_capt": 101, "max_subfigures_per_pag": 101, "max_subfigures_first_pag": 101, "figure_save_nam": 101, "latex_root": [101, 197], "subfigur": 101, "insert": 101, "configur": 101, "caption": [101, 331], "graphic": [101, 193, 211, 327, 331, 332, 342, 351], "r": [101, 122, 189, 191, 224, 227, 249, 307, 308, 327, 331, 338, 339, 348, 350, 351], "7linewidth": 101, "placement": 101, "45linewidth": 101, "broken": 101, "continuedfloat": 101, "environ": [101, 134, 327, 332, 334, 337, 340, 350], "figure_0": 101, "figure_1": 101, "present": [101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 327, 331, 332, 338, 340, 342, 343, 348, 350, 351], "directori": [101, 350], "tex": [101, 197, 331], "save_figure_nam": 101, "latex_str": 101, "plotitem": 101, "byte": [101, 327, 350], "justification_str": 102, "table_label": 102, "table_capt": 102, "longtabl": 102, "header": [102, 153, 163, 351], "horizontal_lin": 102, "powerpoint": [103, 331, 351], "tedious": 103, "put": [103, 122, 327, 330, 337, 338, 339, 344, 348, 350], "larg": [103, 122, 265, 302, 327, 328, 330, 331, 332, 337, 338, 340, 342, 344, 348, 350, 351], "animate_geometri": 104, "200": [104, 217, 327, 337, 338, 350], "content_slide_layout_index": [104, 106, 111, 331], "subtitl": [105, 110, 111, 331], "section_header_slide_layout_index": 105, "title_format": [106, 107], "text_format": [106, 107], "nfrequenc": [106, 107], "ndamp": [106, 107], "3f": [106, 107, 350], "plot_shape_kwarg": 106, "left_right": 106, "geometry_1": 107, "shapes_1": [107, 108, 241], "geometry_2": [107, 350], "shapes_2": [107, 108, 241], "geometry_plot_kwargs_1": 107, "plot_shape_kwargs_1": 107, "geometry_plot_kwargs_2": 107, "plot_shape_kwargs_2": 107, "two_content_slide_layout_index": 107, "shapes_1_label": 108, "shapes_2_label": 108, "axes_modifi": [108, 109], "03f": [108, 109], "matrix_plot_kwarg": [108, 109, 197], "table_threshold": 108, "empty_slide_layout_index": [108, 109, 111, 331], "exp_data": 109, "fit_data": 109, "title_slide_layout_index": [110, 111, 331], "slide_width": 111, "slide_height": 111, "placehold": [112, 331], "bottom": [112, 204, 205, 332, 338, 348, 350], "node_coord": 115, "element_connect": 115, "bend_direction_1": [115, 117], "ae": 115, "jg": 115, "ei1": 115, "ei2": 115, "mass_per_length": 115, "tmmi_per_length": 115, "elast": [115, 116, 327, 328, 344, 350], "nx3": 115, "mx2": 115, "mx3": 115, "bend": [115, 116, 340, 342], "product": [115, 305, 327, 340, 342, 343, 344, 348], "axial": [115, 116], "area": [115, 190, 332, 350], "torsion": [115, 327, 340], "shear": 115, "i1": [115, 327, 350], "i2": [115, 343], "6nx6n": 115, "follow": [115, 128, 131, 327, 329, 331, 339, 348, 350, 351], "disp_x_0": 115, "disp_y_0": 115, "disp_z_0": 115, "rot_x_0": 115, "rot_y_0": 115, "rot_z_0": 115, "disp_x_1": 115, "disp_y_1": 115, "disp_z_1": 115, "rot_x_1": 115, "rot_y_1": 115, "rot_z_1": 115, "disp_x_n": 115, "disp_y_n": 115, "disp_z_n": 115, "rot_x_n": 115, "rot_y_n": 115, "rot_z_n": 115, "nnode": 116, "simplifi": [116, 338, 340, 348], "nelem": 117, "rectangular": [117, 328], "beamkm": [117, 351], "bend_direction_2": 117, "si": 117, "200e9": 117, "7850": 117, "kg": [117, 131, 348], "69e9": 117, "candid": [118, 302, 327, 329], "return_condition_numb": 119, "bundl": [119, 120], "new_shape_matrix": [119, 120], "inci": [119, 120], "returned_condition_numb": 119, "return_efi": [120, 327], "returned_efi": 120, "num_dim": 122, "num_elem": 122, "num_block": 122, "num_node_set": 122, "num_side_set": 122, "clobber": [122, 124, 331], "w": [122, 307, 329, 332, 348], "extract_sharp_edg": 122, "get_block_surfac": [122, 124], "block_id": [122, 124], "keep_midside_nod": [122, 124, 126, 128], "skin": [122, 124], "midsid": [122, 124], "element_block_inform": [122, 124], "element_typ": [122, 124, 127], "node_indic": [122, 124], "block_surface_connect": [122, 124], "block_surface_original_el": [122, 124], "quad4": [122, 124, 128], "tri3": [122, 124], "recov": [122, 124, 332, 338, 340, 342, 348], "came": [122, 124, 343, 350], "get_coord": 122, "retriev": [122, 339], "coord": [122, 225, 226, 332], "get_coord_nam": 122, "coord_nam": 122, "get_displac": 122, "displacement_nam": 122, "disp": [122, 225, 263, 265, 327, 338], "capital_coordin": 122, "get_elem_attr": 122, "num_attribut": 122, "masked_arrai": 122, "get_elem_blk_id": 122, "get_elem_blk_info": 122, "elements_in_block": 122, "nodes_per_el": 122, "attributes_per_el": 122, "get_elem_connect": 122, "num_nodes_per_el": 122, "get_elem_num_map": 122, "elem_num_map": 122, "get_elem_typ": 122, "get_elem_variable_nam": 122, "elem_var_nam": 122, "get_elem_variable_t": 122, "elem_var_t": 122, "num_element_vari": 122, "jth": 122, "ith": [122, 280], "get_elem_variable_valu": 122, "name_or_index": 122, "element_index": 122, "elem_variable_valu": 122, "maskedarrai": 122, "get_element_property_nam": 122, "get_element_property_valu": 122, "get_global_variable_nam": 122, "global_var_nam": 122, "get_global_variable_valu": 122, "global_variable_valu": 122, "get_info_record": 122, "info_record": 122, "get_node_num_map": [122, 332], "node_num_map": 122, "get_node_set_dist_factor": 122, "dist_factor": 122, "get_node_set_id": 122, "ns_id": 122, "get_node_set_nam": 122, "ns_name": 122, "get_node_set_nod": [122, 332], "get_node_set_num_nod": 122, "get_node_variable_nam": 122, "node_var_nam": 122, "get_node_variable_valu": [122, 332], "node_index": 122, "node_variable_valu": 122, "get_qa_record": 122, "qa_record": 122, "nest": 122, "get_side_set_dist_factor": 122, "get_side_set_fac": 122, "sideset": 122, "get_side_set_id": 122, "ss_id": 122, "get_side_set_nam": 122, "exoud": 122, "ss_name": 122, "get_side_set_node_list": 122, "get_side_set_num_fac": 122, "num_fac": 122, "get_tim": 122, "time_arrai": 122, "load_into_memori": [122, 331], "memori": [122, 124, 128, 331, 350, 351], "netcdf": [122, 351], "upon": [122, 348], "fexo": [122, 128, 327, 331, 333], "num_attr": 122, "attr_per_el": 122, "num_blk": 122, "num_dimens": 122, "num_elem_vari": 122, "num_elems_in_blk": 122, "elem_per_el": 122, "num_global_vari": 122, "num_node_vari": 122, "num_nodes_per_elem": 122, "nodes_per_elem": 122, "num_tim": 122, "put_coord_nam": 122, "put_coord": 122, "put_elem_blk_id": 122, "put_elem_blk_info": 122, "num_attrs_per_elem": 122, "shell4": 122, "hex8": [122, 128], "num_attrs_per_el": 122, "put_elem_num_map": 122, "put_elem_variable_nam": 122, "num_el_blk": 122, "num_elem_var": 122, "put_element_property_nam": 122, "put_element_property_valu": 122, "put_global_variable_nam": 122, "put_info_record": 122, "put_node_num_map": 122, "put_node_set_id": 122, "put_node_set_info": 122, "dist_fact": 122, "put_node_set_nam": 122, "put_node_variable_nam": 122, "put_qa_record": 122, "put_side_set_id": 122, "put_side_set_info": 122, "put_side_set_nam": 122, "reduce_to_surfac": [122, 327, 333], "set_elem_attr": 122, "set_elem_connect": 122, "convent": 122, "set_elem_variable_valu": 122, "set_global_variable_valu": 122, "set_node_variable_valu": 122, "set_tim": 122, "len": [122, 261, 316, 319, 327, 337, 338], "triangulate_surface_mesh": [122, 124], "patch": [122, 124], "hasn": [122, 124], "pyexodu": [122, 124], "mesh_triangulation_arrai": [122, 124], "skip": [122, 124], "triangulated_mesh_info": [122, 124], "conveni": [124, 340, 348], "easier": [124, 327, 331, 340, 343, 348, 350, 351], "manipul": [124, 331, 348], "want": [124, 327, 329, 331, 333, 337, 338, 339, 340, 343, 344, 348, 350], "from_sdynpi": [124, 331], "load_from_exodu": 124, "repackag": 124, "write_to_fil": [124, 331], "edge_threshold": 125, "60": [125, 327, 330, 332, 340, 342, 344, 348, 350], "reduced_element_typ": 126, "blocks_to_transform": 128, "variables_to_transform": 128, "eas": [128, 333], "insensit": 128, "corner": [128, 332, 342, 343, 350], "fexo_out": [128, 331], "TO": 128, "we": [128, 317, 327, 328, 329, 330, 331, 332, 333, 336, 338, 339, 340, 341, 342, 343, 344, 348, 350], "tetra4": 128, "hex20": 128, "mash": 128, "lastli": 128, "what": [128, 327, 330, 331, 332, 333, 335, 336, 338, 339, 342, 343, 344, 350, 351], "turn": [128, 327, 332, 344, 348, 350], "reduce_element_typ": 128, "reduce_element_nodes_per_fac": 128, "reduce_element_fac": 128, "reduce_element_substitute_typ": 128, "exodusii": 128, "manual": [128, 340, 350], "prod": [128, 344], "gov": 128, "techlib": 128, "control": [128, 249, 331, 334, 340, 342], "cgi": 128, "1992": 128, "922137": 128, "pdf": [128, 307, 331], "simplenamespac": 129, "shaker": [130, 131, 140, 331, 334, 337, 339, 342, 343, 351], "commerci": 130, "m_armatur": 131, "m_bodi": 131, "m_forcegaug": 131, "k_suspens": 131, "k_stinger": 131, "c_suspens": 131, "c_stinger": 131, "resist": 131, "induct": 131, "force_factor": 131, "electromechan": 131, "armatur": 131, "trunion": 131, "gaug": [131, 327], "stinger": 131, "coil": 131, "electron": 131, "bl": 131, "magnet": 131, "mck": 131, "voltag": [131, 342, 351], "impart": 131, "plu": [131, 327, 348], "modal_shop_100lbf": 131, "shop": 131, "2100e11": 131, "100lbf": 131, "shaker_model": 131, "1e5": 131, "63e6": 131, "ohm": 131, "6e": 131, "henri": 131, "36": [131, 327, 328, 330, 340, 344, 348, 350], "plot_electrical_imped": 131, "3998": 131, "3999": 131, "4000": [131, 332, 343, 348, 350], "test_data": 131, "imped": [131, 338], "arang": [131, 327, 329, 330, 331, 332, 333, 337, 338, 342, 343, 344, 348, 350], "state_spac": 131, "formul": [131, 339, 342, 348], "x_dot": 131, "feedthrough": 131, "forcegaug": 131, "matri": 131, "rattlesnak": [133, 137, 334, 335, 351], "spreadsheet_file_nam": 134, "system_filenam": 134, "excitation_coordin": 134, "rattlesnake_directori": 134, "time_per_read": 134, "time_per_writ": 134, "channel_comment_data": 134, "channel_serial_number_data": 134, "channel_triax_dof_data": 134, "channel_engineering_unit_data": 134, "channel_warning_level_data": 134, "channel_abort_level_data": 134, "channel_active_in_environment_data": 134, "coordinate_override_column": [135, 136, 137, 139], "read_only_indic": [135, 137], "read_vari": 137, "time_data": [137, 331, 351], "nc4": [137, 328, 331], "channel_t": [137, 197, 331], "datafram": [137, 348, 351], "panda": [137, 348, 351], "labview": 140, "laboratori": [140, 327, 329], "tdm": 140, "nativ": 140, "There": [140, 201, 262, 266, 329, 332, 337, 338, 339, 340, 342, 343, 348, 350], "data_fil": [141, 142], "coordinate_properti": [141, 142, 143, 144], "ch_info": [141, 142], "reference_coordinate_properti": 141, "frf_refid": 141, "coordinate_string_map": [141, 142, 143, 144], "invalid_coordinate_valu": [141, 142, 143, 144], "999999": [141, 142, 143, 144], "read_filtered_time_data": 142, "data_directori": 143, "ch_id": 143, "file_pattern": 143, "ch": [143, 307], "_thdata": 143, "file_sort_kei": 143, "lambda": [143, 266, 275, 329, 338, 340, 348], "ch_locat": 144, "channel_indic": 144, "format_spec": [147, 151], "read_numb": [147, 148], "uffreaderror": [147, 149, 150], "line_format_spec": 148, "lines_read": 148, "fill_lin": 151, "model_file_nam": 154, "model_file_descript": 154, "db_program": 154, "db_date_cr": 154, "db_version": 154, "db_subvers": 154, "file_typ": 154, "date_db_last_sav": 154, "writing_program": 154, "sdynpy_uff": 154, "py": [154, 223, 330], "date_written": 154, "releas": [154, 335, 338], "version_numb": [154, 164, 179], "host_id": 154, "test_id": 154, "release_counter_per_host": 154, "dataset_numb": [154, 157, 160, 164, 167, 170, 173, 176, 179, 183], "from_uff_data_arrai": [154, 157, 160, 164, 167, 170, 173, 176, 179, 183], "write_str": [154, 157, 160, 164, 167, 170, 173, 176, 179, 183], "58": [159, 179, 327, 330, 340, 348, 350, 351], "set_record_numb": 160, "octave_format": 160, "measurement_run": 160, "weighting_typ": 160, "window_typ": 160, "amplitude_unit": 160, "normalization_method": 160, "abscissa_data_qualifi": 160, "ordinate_num_data_qualifi": 160, "ordinate_den_data_qualifi": 160, "zaxis_data_qualifi": 160, "sampling_typ": 160, "time_averag": 160, "zrpm": 160, "ztime": 160, "zorder": 160, "number_sampl": 160, "exponential_window_damping_factor": 160, "overall_rm": 160, "weighted_rm": 160, "response_direct": [160, 179], "reference_direct": [160, 179], "model_uid": 164, "entity_typ": 164, "entity_subtyp": 164, "entity_nam": 164, "sdynpy_geometri": [164, 342, 350], "part_numb": 164, "status_mask": 164, "datetime_short_time_format": 164, "idm_item_version_id": 164, "idm_item_id": 164, "primary_parent_uid": 164, "geometry_switch": 164, "p_analysis_switch": 164, "all_selections_switch": 164, "auto_create_dynamic_groups_switch": 164, "acdg_1d_element_switch": 164, "acdg_2d_element_switch": 164, "acdg_3d_element_switch": 164, "acdg_other_element_switch": 164, "acdg_related_nodes_switch": 164, "acdg_related_geometry_switch": 164, "acdg_related_boundary_condition_switch": 164, "node_label": 167, "export_coordinate_system": 167, "displacement_coordinate_system": 167, "element_label": 170, "fe_descriptor_id": 170, "physical_property_table_numb": 170, "material_property_table_numb": 170, "beam_orient": 170, "beam_fore_cross_section_numb": 170, "beam_aft_cross_section_numb": 170, "part_uid": 173, "part_nam": 173, "cs_label": 173, "cs_color": 173, "cs_name": 173, "cs_matric": 173, "idline1": [176, 179], "idline2": [176, 179], "idline3": [176, 179], "idline4": [176, 179], "idline5": [176, 179], "model_typ": 176, "analysis_typ": 176, "data_characterist": 176, "integer_data": 176, "real_data": 176, "node_data_dictionari": 176, "frequency_step_numb": 176, "id_numb": 176, "modal_a": 176, "modal_b": 176, "modal_hysteretic_damp": 176, "modal_viscous_damp": 176, "mode_numb": 176, "time_step_numb": 176, "function_id": 179, "load_cas": 179, "response_entity_nam": 179, "response_nod": 179, "reference_entity_nam": 179, "reference_nod": 179, "abscissa_data_typ": 179, "abscissa_length_expon": 179, "abscissa_force_expon": 179, "abscissa_temp_expon": 179, "abscissa_axis_label": 179, "abscissa_units_label": 179, "ordinate_num_data_typ": 179, "ordinate_num_length_expon": 179, "ordinate_num_force_expon": 179, "ordinate_num_temp_expon": 179, "ordinate_num_axis_label": 179, "ordinate_num_units_label": 179, "ordinate_den_data_typ": 179, "ordinate_den_length_expon": 179, "ordinate_den_force_expon": 179, "ordinate_den_temp_expon": 179, "ordinate_den_axis_label": 179, "ordinate_den_units_label": 179, "zaxis_data_typ": 179, "zaxis_length_expon": 179, "zaxis_force_expon": 179, "zaxis_temp_expon": 179, "zaxis_axis_label": 179, "zaxis_units_label": 179, "zaxis_valu": 179, "block_lin": 179, "is_binari": [179, 181], "byte_ord": [179, 181], "floating_point_format": [179, 181], "num_ascii_lines_follow": [179, 181], "num_bytes_follow": [179, 181], "ds_58": 179, "improv": [182, 302, 329, 330, 331, 332, 343, 348], "visibl": [182, 328, 332, 340], "traceline_numb": 183, "identif": [183, 350], "vic3d": [185, 186, 187, 188, 190, 351], "xml": [186, 188], "calibr": [186, 187, 188, 222], "insid": [186, 188, 331, 333, 337, 351], "unzip": [186, 188], "z3d": [186, 187, 188], "cx": [186, 188], "cy": [186, 188], "fx": [186, 188, 342], "fy": [186, 188], "tx": [186, 188], "ty": [186, 188], "tz": [186, 188], "triangular": [186, 188, 190, 224, 227], "intrinisc": [186, 188, 224], "orthogon": [186, 188, 224], "z3d_file": 187, "out_data": 187, "intrinsics_0": 187, "extrinsics_0": 187, "distortion_0": 187, "intrinsics_1": 187, "extrinsics_1": 187, "distortion_1": 187, "distort": [187, 343], "bryant": [189, 191], "radian": [189, 191, 204, 205, 263, 265, 304, 338, 340, 342, 348], "read_3d": 190, "read_2d": 190, "read_qual": 190, "sigma_tol": 190, "element_triangulation_condit": 190, "element_color_ord": 190, "allow_dropout": 190, "export": [190, 302, 332, 334, 350, 351], "sigma": [190, 329], "subset": [190, 327, 348], "drop": [190, 332, 340, 342, 343, 348], "dropout": 190, "detect": [190, 332, 343, 350], "geometry_3d": 190, "time_data_3d": 190, "geometry_2d": 190, "time_data_2d": 190, "time_data_2d_dispar": 190, "sigma_data": 190, "r_x": 191, "r_y": 191, "r_z": 191, "clear_plot": 194, "clicked_point": 194, "mouse_ev": 194, "cluster_mod": 194, "collect_shap": 194, "compute_and_plot_ccmif": 194, "compute_ccmif": 194, "disable_fil": 194, "enable_fil": 194, "enabled_selected_mod": 194, "enabled_shape_arrai": 194, "export_figur": 194, "export_mode_t": [194, 218], "load_fil": 194, "load_geometri": [194, 209, 218], "load_progress": 194, "plot_ccmif": 194, "plot_cmif": [194, 197], "plot_frf": 194, "remove_fil": 194, "replace_fil": 194, "resynthes": [194, 197, 198, 203, 331, 332, 348, 350], "save_progress": 194, "save_shap": [194, 209, 218], "set_mode_properti": 194, "item": [194, 327, 330, 350], "set_properti": 194, "file_index": 194, "shape_index": 194, "toggle_auto_resynth": 194, "update_line_width": 194, "update_shape_list": 194, "no_load": 194, "autopower_spectra": 197, "fit_mod": 197, "resynthesized_frf": [197, 198], "response_unit": 197, "reference_unit": 197, "compute_resynthesized_frf": 197, "compute_spectral_quant": 197, "reference_indic": [197, 331], "end_tim": 197, "num_samples_per_fram": 197, "frf_estim": 197, "compute_spectral_quantities_signalprocessinggui": 197, "create_documentation_latex": 197, "mif_plot": 197, "figure_fold": 197, "document_filenam": 197, "appendix_filenam": 197, "appendix": 197, "comment1_head": 197, "comment2_head": 197, "comment3_head": 197, "comment4_head": 197, "comment5_head": 197, "create_documentation_pptx": 197, "create_documentation_word": 197, "define_spectral_processing_paramet": 197, "trigger": [197, 327, 332, 343, 350], "trigger_channel_index": 197, "trigger_slop": 197, "trigger_level": 197, "pretrigg": 197, "edit_mode_com": 197, "fit_modes_polypi": 197, "fit_modes_smac": 197, "mark_mod": 197, "measured_plot_kwarg": 197, "resynthesized_plot_kwarg": 197, "plt": [197, 327, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 348, 350], "plot_coherence_imag": 197, "plot_drive_point_frf_coher": 197, "plot_drive_point_frf": 197, "plot_figures_for_document": 197, "plot_geometri": 197, "geometry_kwarg": [197, 331], "coordinate_kwarg": 197, "plot_rigid_body_check": 197, "rigid_body_checks_kwarg": 197, "plot_reference_autospectra": 197, "reference_autospectra_kwarg": 197, "drive_point_frfs_kwarg": 197, "plot_reciprocal_frf": 197, "reciprocal_frfs_kwarg": 197, "plot_frf_coher": 197, "frf_coherence_kwarg": 197, "coherence_image_kwarg": 197, "plot_qmif": 197, "qmif_kwarg": 197, "plot_nmif": 197, "nmif_kwarg": 197, "plot_mmif": 197, "mmif_kwarg": 197, "plot_modeshap": 197, "modeshape_kwarg": 197, "plot_mac": [197, 218], "mac_kwarg": 197, "matrix_plot_arg": 197, "plot_psmif": 197, "response_indic": [197, 331], "retrieve_modes_polypi": 197, "retrieve_modes_smac": 197, "retrieve_spectral_quantities_signalprocessinggui": 197, "set_autopower_spectra": 197, "set_channel_t": 197, "set_coher": 197, "set_fit_mod": 197, "set_frf": 197, "set_geometri": [197, 209, 350], "set_resynthesized_frf": 197, "set_rigid_body_shap": 197, "set_time_histori": 197, "set_unit": 197, "modal_fit_data": 198, "polypy_gui": [198, 210, 327, 331, 348, 350, 351], "npzfile": 198, "fitter": [198, 207, 213, 327, 331, 332, 348, 350], "experimental_frf": [198, 201, 203], "residual_frf": [198, 201, 203], "pole": [199, 204, 205, 208, 210, 327, 331, 332, 350], "drive_point_coeffici": 200, "participation_factor": [200, 202, 203, 204, 205, 348], "natural_frequ": [201, 202, 203, 263, 299, 300], "real_mod": [201, 203, 208], "frequency_lines_at_reson": [201, 203, 208], "frequency_lines_for_residu": [201, 203, 208], "shape_residu": 201, "n_mode": [201, 203, 348], "synthesized_frf": 201, "residue_matrix": 202, "shape_select": 202, "shapeselect": 202, "lower_residu": [203, 204, 205, 348], "upper_residu": [203, 204, 205, 348], "multirefer": 203, "particip": [203, 204, 205, 332, 350], "n_input": [203, 348], "frfs_resynthes": 203, "kernel_frf": 203, "synthes": [203, 213, 343, 351], "kernel": [203, 204, 205, 206], "account": [203, 330, 332, 348], "omega": [204, 205, 263, 265, 338, 339, 340, 344, 348], "angular": [204, 205, 263, 265, 338, 340, 348], "num_freq": [204, 205, 206, 348], "num_input": [204, 205, 206, 348], "recept": [204, 205, 263, 265, 348], "mobil": [204, 205, 348], "kernel_matrix": [204, 205, 206], "invert": [204, 205, 339, 340, 342, 343, 348, 350, 351], "partit": [204, 205, 206, 348], "frf_matrix": [206, 269, 270, 271, 342], "return_reconstruct": 206, "reconstruction_partit": 206, "reconstruction_kernel": 206, "stack": [206, 348], "num_output": [206, 348], "num_frequ": 206, "num_coeffici": 206, "generate_kernel_complex": 206, "generate_kernel_r": 206, "reconstruct": [206, 348, 350], "reconstruction_parit": 206, "polynomi": [207, 327, 331, 332, 348, 350], "analyze_pole_converg": 208, "pole_or_index": 208, "frequency_stability_threshold": 208, "damping_stability_threshold": 208, "modal_participation_threshold": 208, "label_ord": 208, "no_converge_marg": 208, "freq_converge_mark": 208, "damp_converge_mark": 208, "full_converge_mark": 208, "angular_frequ": [208, 217], "compute_pol": [208, 348], "polynomial_ord": 208, "compute_shap": [208, 209, 217, 218], "low_residu": 208, "high_residu": 208, "frequency_spac": [208, 217, 244, 258], "plot_stabl": [208, 348], "label_pol": [208, 348], "order_rang": 208, "pole_list_from_indic": [208, 348], "frf_data": [209, 218, 342], "compute_stabil": 209, "create_cmif_window": 209, "create_frf_window": 209, "create_mmif_window": 209, "create_nmif_window": 209, "create_qmif_window": 209, "export_fit_data": 209, "frequency_slic": 209, "pole_selection_chang": 209, "show_line_selector": 209, "update_data_plot": 209, "update_frequency_from_region": 209, "update_max_frequ": 209, "update_min_frequ": 209, "update_resynthesi": 209, "polypy_tabwidget": 210, "frequency_region": 210, "mouseclick": 210, "mousemov": 210, "plot_pol": 210, "update_stability_plot_view": 210, "update_stabilization_plot": 210, "time_history_arrai": 212, "acceptancechang": 212, "analyzepolypi": 212, "analyzesmac": 212, "block_averaging_sign": 212, "block_data_range_sign": 212, "block_sampling_sign": 212, "compute_trigg": 212, "create_roi": 212, "endtimechang": 212, "framesizechang": 212, "frametimechang": 212, "frameschang": 212, "frequencylineschang": 212, "frequencyspacingchang": 212, "get_abscissa_index_rang": 212, "hysteresischang": 212, "initialize_ui": 212, "levelchang": 212, "loaddata": 212, "loadgeometri": 212, "overlapchang": 212, "overlapsampleschang": 212, "plotdeflect": 212, "plottransi": 212, "pretriggerchang": 212, "referenceviewchang": 212, "referenceschang": 212, "reset_ui": 212, "responseviewchang": 212, "responseschang": 212, "saveautospectra": 212, "savecoher": 212, "savecrossspectra": 212, "savefrf": 212, "savewindowedtimehistori": 212, "sendtorefer": 212, "sendtorespons": 212, "showautospectra": 212, "showcoher": 212, "showcrossspectra": 212, "showfrf": 212, "showwindowedtimehistori": 212, "starttimechang": 212, "toggleroi": 212, "roi": 212, "typechang": 212, "updatehysteresisfromrefer": 212, "updatehysteresisfromrespons": 212, "updatetimefromrefer": 212, "updatetimefromrespons": 212, "updatetriggerfromrefer": 212, "updatetriggerfromrespons": 212, "windowchang": 212, "smac": [213, 326, 327, 331, 351], "add_root": [214, 218], "recompute_correl": 214, "switch_log_plot": 214, "update_plot_rang": 214, "update_range_selector": 214, "paraboloid": 215, "autofit_root_altern": 217, "initial_frequ": 217, "initial_damp": 217, "frequency_rang": 217, "frequency_point": 217, "frequency_converg": 217, "00025": [217, 332], "damping_low": 217, "0025": [217, 327], "damping_high": 217, "damping_point": 217, "damping_converg": 217, "frequency_lines_for_correl": 217, "max_it": 217, "zoom_rat": 217, "plot_converg": 217, "autofit_root_paraboloid": 217, "autofit_root": [217, 218], "autofit_typ": 217, "autofittyp": 217, "compute_correlation_matrix": [217, 218], "low_frequ": 217, "high_frequ": 217, "frequency_sampl": 217, "frequency_resolut": 217, "low_damp": 217, "high_damp": 217, "damping_sampl": 217, "compute_initial_rootlist": 217, "peak_finder_filter_s": 217, "correlation_threshold": 217, "num_roots_mif": 217, "num_roots_frequency_threshold": 217, "005": [217, 327, 350], "plot_correl": 217, "compute_pseudoinvers": [217, 218], "compute_residu": 217, "root": [217, 257, 328, 329, 331, 332, 340, 342, 348, 350], "find_peak": 217, "correlation_matrix": 217, "fit_damp": 217, "min_damp": 217, "max_damp": 217, "fit_frequ": 217, "max_freq": [217, 275], "fit_paraboloid": 217, "frf_sdof_complex": 217, "root_frequ": 217, "root_damp": 217, "frf_sdof_real": 217, "get_num_root": 217, "frequency_threshold": 217, "add_initial_root": 218, "confirm_initial_roots_for_autofit": 218, "delete_initial_root": 218, "delete_root": 218, "load_shap": 218, "paint_mark": 218, "refind_peak": 218, "update_coefficient_and_refind": 218, "update_crosshair": 218, "update_frequency_line_label": 218, "update_initial_rootlist_tab": 218, "no_reset_ax": 218, "update_rootlist_t": 218, "update_selector_and_refind": 218, "deal": [221, 234, 243, 292, 303, 329, 338, 343, 348], "image_point": [222, 224, 228, 230], "plane_point": [222, 230, 288], "n_camera": [222, 232], "n_imag": [222, 232], "n_point": [222, 327], "k_est": 222, "rt_est": 222, "du": 223, "dx": [223, 343], "dy": 223, "dz": 223, "dv": 223, "spatial_point": 224, "six": [224, 340, 350], "intrin": 224, "v": [224, 305, 322, 327, 329, 333, 337, 338, 340, 348], "homogen": 224, "decomposit": [224, 342], "smallest": [224, 327, 329, 342, 348], "null": 224, "horizont": [224, 337], "paint": 224, "gimp": 224, "correpond": 224, "f_u": [224, 348], "u_0": 224, "f_v": 224, "v_0": 224, "And": [224, 338, 340, 348], "r_xx": 224, "r_xy": 224, "r_xz": 224, "t_x": 224, "r_yx": 224, "r_yi": 224, "r_yz": 224, "t_y": 224, "r_zx": 224, "r_zy": 224, "r_zz": 224, "t_z": [224, 348], "3x4": [225, 226, 227, 231], "3xn": [225, 226], "mx": [225, 226], "pixel_disp": 225, "2xn": [225, 226], "world": [226, 339], "pixel_posit": 226, "decompos": 227, "3x1": 227, "k_guess": 230, "rt_guess": 230, "radial_distort": [230, 232], "prismatic_distort": [230, 232], "tangential_distort": [230, 232], "radial_denominator_distort": [230, 232], "k_guess_distort": 230, "least_squares_kwarg": 230, "pixel_coordin": 231, "parameter_arrai": 232, "use_k_for_distort": 232, "preserve_magnitud": 235, "fft_1": 237, "fft_2": 237, "phi_1": [238, 340], "phi_2": [238, 340], "display_valu": 239, "text_siz": [239, 327, 328, 329, 330], "vmin": 239, "vmax": 239, "boundari": [239, 327, 328, 330, 332, 333, 343], "reference_shap": 240, "th_1": 242, "th_2": 242, "reference_sign": [244, 342], "simultan": [244, 327, 332, 333, 342, 343, 348, 350], "response_spectral_matrix": 244, "coh": 247, "ph": 247, "cpsd_matrix": 249, "schultz": 249, "nelson": 249, "synthesi": [249, 350], "proceed": [249, 326], "confer": 249, "2019": 249, "decibel": 251, "cpsd_origin": 252, "cpsd_to_match": 252, "oct_ord": 253, "nominal_band_cent": 253, "ansi": 253, "stander": 253, "band_cent": 253, "exact": [253, 340, 343, 348, 350], "s1": 253, "2014": 253, "electroacoust": 253, "fractionaloctav": 253, "1000": [253, 329, 332, 338, 339, 340, 342, 343, 344, 348, 350], "nth": 253, "depend": [253, 263, 327, 328, 331, 332, 338, 339, 340, 342, 344, 348, 350], "odd": 253, "eqn": 253, "sub": [253, 340, 341, 350], "annex": 253, "digit": [253, 319, 342, 351], "567": 253, "8785": 253, "8800": 253, "spec": [255, 338], "channel_nam": 255, "csd": 257, "num_channel": 258, "target_rm": 258, "phae": 261, "n_signal": 261, "updated_sign": 261, "freqs_in": 262, "nf": [262, 263, 265, 266], "ni": [262, 263, 265, 266], "nt": [262, 266], "h2": [262, 266], "hv": [262, 266], "frquenci": 262, "lrm_kwarg": [262, 266], "f_out": [262, 266, 302], "modelset": [262, 266, 302], "max_parallel": [262, 266, 302], "export_ratio": [262, 266, 302], "sdynpy_lrm": [262, 266], "freqs_out": 262, "model_data": [262, 266, 302], "mode_shap": 263, "input_mode_shap": 263, "frf_type": [263, 265, 342], "evalu": [263, 265, 268, 330, 343, 348, 350], "hertz": [263, 265, 340, 350], "percentang": 263, "nm": 263, "nonsquar": 263, "vel": [263, 265, 338], "accel": [263, 265, 338], "1j": [263, 265, 338, 339, 342, 348], "real_imag": 264, "x_dd": 265, "x_d": 265, "therefor": [265, 327, 328, 330, 331, 332, 333, 337, 338, 339, 340, 341, 342, 343, 344, 348, 350], "advis": 265, "response_fft": [266, 342], "reference_fft": [266, 342], "response_fft_arrai": 266, "reference_fft_arrai": 266, "divis": 266, "number_of_respons": 266, "n_averag": 266, "number_of_refer": 266, "wheter": 266, "print_tim": [266, 302], "void": 266, "original_singular_valu": 268, "seen": [268, 332, 333, 337, 339, 340, 343, 348, 350], "intend": 268, "oringin": 268, "organ": [268, 269, 270, 271], "modified_singular_valu": 268, "mathemat": [268, 339, 340, 343, 348], "rigor": [268, 338], "subject": [268, 340], "declar": [269, 340, 348], "paper": [270, 348], "n_sampl": [273, 278], "low_frequency_cutoff": [273, 278], "high_frequency_cutoff": [273, 278, 327, 332], "frequency_min": [274, 337], "frequency_max": [274, 337], "fft_line": [275, 332], "f_nyq": [275, 332], "filter_oversampl": 275, "shape_funct": 275, "inclus": [275, 348], "acquisit": [275, 343], "antialias": [275, 343], "56x": 275, "replica": 275, "ramp_sampl": 277, "end_ramp_sampl": 277, "ascend": [280, 348], "decend": 280, "rad": [280, 348], "fewer": [280, 350], "ncircum": 285, "naxial": 285, "radiu": 286, "plane_direct": 288, "origin_guess": 290, "direction_guess": 290, "radius_guess": 290, "nharmon": 293, "massless_dof": 295, "fmin": 297, "fmax": 297, "inf": [297, 327, 338, 339, 342], "x0": 298, "modal_forc": 299, "return_accel": 299, "512": 302, "fft2frf": 302, "n_in": 302, "n_freq": [302, 348], "n_out": 302, "n_freqs_out": 302, "finer": 302, "cost": [302, 348, 350], "compuat": 302, "beyond": 302, "f_in": 302, "nois": [302, 327, 329, 332, 342, 343, 344, 350], "risk": 302, "underfit": 302, "whethet": 302, "recommend": [302, 335, 343, 350], "num": [302, 327, 330, 331, 332, 338, 339, 340, 342, 343, 344, 348, 350], "tran": 302, "denom": 302, "complic": [302, 337, 339, 340, 350], "pat": 302, "captur": [302, 327, 332, 343, 350], "volatil": 302, "veri": [302, 327, 328, 329, 330, 331, 332, 337, 338, 339, 340, 342, 343, 344, 348, 350], "ram": 302, "cpu": 302, "thread": 302, "freez": 302, "smaller": [302, 327, 328, 340, 348, 350], "pool": 302, "frm": 302, "info": 302, "practition": [302, 338, 342, 343, 348], "guid": 302, "coletti": 302, "miso": 302, "parameter": 302, "rotatoin": 304, "specfici": 304, "rotmat": 304, "cross_matrix": 305, "rvec": [306, 310], "descib": 307, "sorkin": 307, "hornung": 307, "rabinovich": 307, "depart": 307, "eth": 307, "zurich": 307, "jan": [307, 326, 348], "2017": 307, "onlin": 307, "igl": 307, "ethz": 307, "arap": 307, "svd_rot": 307, "wi": 307, "06": [308, 310, 327, 330, 332, 335, 336], "quat": 309, "fri": 311, "nov": 311, "09": [311, 328, 350], "59": [311, 327, 330, 339, 340, 348, 350], "2023": 311, "author": [311, 331, 348], "dprohe": [311, 330, 331], "xp": 312, "fp": 312, "octave_point": 313, "intermediate_result": 314, "rms_error_threshold": [314, 323], "amplitude_lin_scal": 315, "control_irf": 315, "limit_irf": 315, "control_sr": [315, 323], "control_weight": [315, 323], "limit_sr": 315, "frequency_index": [315, 327], "zi": 316, "lfilter": 316, "filtered_sign": 316, "times_at_respons": 317, "freeli": 317, "sdof": [317, 318], "One": [317, 327, 328, 332, 337, 338, 340, 342, 343, 344, 348, 350], "know": [317, 328, 331, 337, 338, 340, 342, 344, 348, 350], "response_peak": 317, "exp": [317, 342, 348], "wn": 317, "sin": [317, 338, 348, 350], "wd": 317, "co": [317, 330, 338, 348], "substitut": [317, 338, 339, 340, 342, 348], "spectrum_typ": [318, 319], "reson": [318, 327, 337, 338, 339, 342, 343, 350], "invari": [318, 319, 327, 348], "conjunct": 318, "sdof_filt": 318, "compute_sr": 318, "b_filter_weight": 319, "a_filter_weight": 319, "10000": [319, 339, 340, 342], "sdof_ramp_invariant_filter_weight": 319, "required_sr": 320, "srs_breakpoint": 320, "acceleration_sign": 320, "velocity_sign": 320, "displacement_sign": 320, "control_breakpoint": 323, "limit_breakpoint": 323, "limit_transfer_funct": 323, "control_transfer_funct": 323, "minimize_iter": 323, "optimization_pass": 323, "compensation_amplitud": 325, "compensation_delai": 325, "daniel": 326, "henslei": 326, "randi": 326, "l": [326, 342, 348], "may": 326, "extend": [326, 340, 348], "24th": 326, "nternat": 326, "odal": 326, "nalysi": 326, "onfer": 326, "220": 326, "230": 326, "st": 326, "loui": 326, "januari": 326, "2006": 326, "bart": [326, 348], "peeter": [326, 348], "herman": 326, "van": 326, "der": 326, "auwera": 326, "patrick": 326, "guillaum": 326, "leuridan": 326, "polymax": [326, 348, 350], "523692": 326, "2004": [326, 348], "url": 326, "1155": 326, "usag": [327, 329, 331, 335, 348, 350], "walk": [327, 329, 339, 341], "entireti": 327, "workflow": [327, 329, 335, 350], "quicklook": 327, "lot": [327, 337, 339, 340], "plot_opt": [327, 333], "trival": [327, 348], "addition": [327, 329, 332, 333, 339, 342, 343, 348, 350], "onc": [327, 328, 331, 332, 333, 338, 340, 342, 344, 348, 350], "crucial": 327, "success": 327, "reason": [327, 328, 333, 337, 338, 340, 342, 343, 348, 350], "analys": [327, 328, 331, 332, 335, 350], "outer": [327, 333, 343], "abl": [327, 329, 332, 339, 340, 342, 343, 344, 348, 350], "interior": 327, "our": [327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 344, 350], "exterior": 327, "goal": [327, 328, 332, 343, 348, 350], "exclus": 327, "obliqu": 327, "nose": [327, 328, 329, 337], "wise": 327, "ipython": [327, 331, 348, 351], "496": 327, "062": 327, "000": [327, 340, 350], "20497": 327, "500": [327, 337, 338, 339, 340, 343], "429": 327, "256": 327, "290": 327, "407": 327, "489": 327, "063": 327, "reveal": [327, 333, 337, 348, 350], "advantag": [327, 342, 343, 348, 350], "intersect1d": [327, 333, 350, 351], "variant": [327, 350], "fieldnam": [327, 350], "develop": [327, 329, 330, 337, 338, 340, 342, 348, 350], "recogn": [327, 340, 343, 348, 350], "five": [327, 350, 351], "u8": [327, 350], "f8": [327, 350], "u2": [327, 350], "bit": [327, 331, 332, 337, 338, 340, 342, 343, 348, 350], "unsign": [327, 350], "signifi": [327, 350], "12686": 327, "examin": [327, 337, 338, 339, 340, 350], "again": [327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 342, 343, 348, 350], "previous": [327, 330, 337, 339, 340, 342, 343, 344, 348, 350], "recal": [327, 333, 339, 340, 342, 343, 344, 348, 350], "12687": 327, "u1": [327, 350], "might": [327, 332, 337, 338, 340, 348, 350], "similarli": [327, 330, 331, 332, 333, 339, 340, 343, 344, 348, 350, 351], "verifi": [327, 329, 332, 333, 340, 343, 348, 350], "correctli": [327, 330, 331, 332, 333, 348, 350], "triad": [327, 350], "readabl": [327, 350], "1x": [327, 340, 350], "1y": [327, 339, 340, 350], "1z": [327, 340, 342, 350], "20496x": 327, "20496y": 327, "20496z": 327, "u7": [327, 331], "aspect": [327, 339, 344, 350], "zoom": [327, 332, 340, 343, 350], "blue": [327, 328, 329, 330, 332, 339, 348, 350], "alwai": [327, 339, 348, 350], "red": [327, 329, 332, 339, 348, 350], "toward": [327, 337, 338, 339, 343], "finish": [327, 333, 350], "gather": 327, "shapes_glob": 327, "briefli": [327, 338, 342, 343, 350], "38058": 327, "u80": [327, 350], "hold": [327, 328, 330, 337, 339, 342, 348, 350], "belong": [327, 350], "thu": [327, 332, 338, 350], "feel": [327, 350], "relev": [327, 342, 348, 350], "sometim": [327, 332, 339], "slight": [327, 343], "instabl": [327, 350], "easi": [327, 329, 331, 335, 340, 343, 348, 350], "statement": 327, "subtl": [327, 350], "seem": [327, 332, 338, 339, 342, 350], "inde": [327, 330, 332, 338, 340, 342, 343, 344, 348, 350], "79983277e": 327, "35834268e": 327, "75579236e": 327, "66030128e": 327, "39180665e": 327, "experienc": 327, "readili": [327, 328, 341], "advanc": [327, 333, 350], "reiter": 327, "reader": [327, 340, 343, 348, 350, 351], "concept": [327, 342, 343, 348, 350], "encourag": [327, 348, 350], "misappli": [327, 350], "nuanc": [327, 350], "introduc": [327, 329, 337, 338, 340, 343, 348, 350], "bug": [327, 350], "As": [327, 328, 337, 338, 340, 342, 348, 350], "mention": [327, 342, 343], "come": [327, 329, 337, 338, 339, 340, 342, 343, 348], "cordin": 327, "onto": [327, 329, 339, 348, 350], "geometry_glob": 327, "went": 327, "troubl": [327, 344], "downselect": 327, "algorithm": [327, 329, 344, 348], "by_effective_independ": [327, 329, 344], "throw": [327, 329, 333, 348], "awai": [327, 329, 333, 338, 340, 348], "686": 327, "overlai": [327, 328, 330, 331, 332, 337, 348, 350], "meshgrid": [327, 333, 338], "min_coord": 327, "max_coord": 327, "range_coord": 327, "num_grid": 327, "ceil": 327, "astyp": [327, 331], "linspac": [327, 333, 338, 339, 340, 342, 348], "grid_arrai": 327, "zip": [327, 330, 332, 337, 338, 339, 340, 342, 344, 348], "grid_point": 327, "ij": [327, 333, 338, 344, 348], "particularli": [327, 329, 330, 331, 332, 338, 342, 343, 348, 350], "tail": [327, 329, 330], "further": [327, 335, 348, 350], "elimin": [327, 348], "candidate_nod": 327, "candidate_node_id": 327, "candidate_dof": [327, 329], "newaxi": [327, 328, 329, 330, 332, 339, 340, 342, 344, 348, 350], "300": [327, 337, 343], "shape_bandwidth": 327, "target_shap": 327, "30": [327, 328, 329, 330, 331, 332, 338, 339, 340, 342, 343, 348, 350], "illustr": [327, 332, 348, 350], "could": [327, 328, 330, 331, 332, 333, 337, 338, 339, 340, 341, 342, 343, 348, 350], "let": [327, 328, 331, 332, 337, 338, 339, 340, 342, 343, 344, 348, 350], "1217": 327, "almost": [327, 328, 339, 342], "count": 327, "moveaxi": [327, 329, 333, 339], "re": [327, 331, 333, 342, 343, 348, 350], "oridin": 327, "keep_indic": [327, 329, 333], "intuit": [327, 331, 338, 340, 342, 344, 348, 350], "few": [327, 329, 330, 332, 339, 340, 342, 343, 350], "fuselag": [327, 330], "efi": 327, "set_yscal": [327, 337, 338, 339, 340, 342, 348], "set_xlim": [327, 339, 343, 348], "get_xlim": 327, "set_ylabel": [327, 328, 330, 331, 332, 337, 338, 339, 340, 342, 343, 348, 350], "set_xlabel": [327, 328, 330, 331, 332, 337, 338, 339, 340, 342, 343, 348, 350], "keep_dof": 327, "abund": 327, "aid": [327, 331, 332, 350], "test_geometri": [327, 331, 333], "2796": 327, "051": 327, "497": 327, "562": 327, "5248": 327, "095": 327, "031": 327, "6157": 327, "970": 327, "310": [327, 330], "6172": 327, "413": 327, "6214": 327, "989": 327, "224": 327, "6272": 327, "438": 327, "037": 327, "6376": 327, "6392": 327, "6405": 327, "155": 327, "8143": 327, "384": 327, "129": 327, "8160": 327, "11664": 327, "11705": 327, "11722": 327, "11735": 327, "11764": 327, "11892": 327, "11909": 327, "13603": 327, "13647": 327, "13660": 327, "17107": 327, "17563": 327, "17573": 327, "123": 327, "18331": 327, "18416": 327, "185": [327, 340], "18787": 327, "19579": 327, "19651": 327, "19665": 327, "green": [327, 328, 329, 330, 332, 348, 350], "pink": 327, "everyth": [327, 333], "distinguish": [327, 333, 339, 344, 350], "nice": [327, 331, 340, 344, 350, 351], "matrix_plot": [327, 328, 329, 330, 331, 332, 333, 350], "test_shap": [327, 329, 333], "ll": 327, "too": [327, 330, 337, 338, 340, 344, 348, 350], "instal": [327, 335], "tediou": [327, 331, 342, 348], "inevit": [327, 340, 342, 343], "purposefulli": 327, "overwrit": [327, 328], "test_geometry_error": 327, "5th": 327, "elicit": 327, "rest": [327, 338, 348, 350], "fairli": [327, 330], "projector": 327, "mathbf": [327, 329, 330, 339, 340, 342, 343, 344, 348, 350], "phi": [327, 330, 340, 344, 348, 350], "_a": 327, "test_system": 327, "wherea": [327, 332, 340, 348, 350], "90": [327, 328, 330, 337, 338, 339, 348, 350], "2868905": 327, "99964993": 327, "3210105": 327, "88194563": 327, "3289727": 327, "48791008": 327, "67": [327, 330, 340, 348, 350], "75138079": 327, "66707341": 327, "55042371": 327, "76026978e": 327, "40194807e": 327, "58617331e": 327, "73749203e": 327, "09022372e": 327, "04": [327, 330, 335, 336, 348], "68270938e": 327, "53050658e": 327, "80137822e": 327, "07032636e": 327, "46528917e": 327, "02431820e": 327, "76349533e": 327, "69407153e": 327, "83686628e": 327, "59999135e": 327, "49012119e": 327, "74121905e": 327, "04985114e": 327, "55739072e": 327, "65502669e": 327, "38297408e": 327, "34896916e": 327, "71546727e": 327, "47339469e": 327, "93925263e": 327, "19915019e": 327, "66942214e": 327, "39905468e": 327, "48742295e": 327, "91024169e": 327, "55791597e": 327, "30305914e": 327, "16004354e": 327, "31560277e": 327, "15253196e": 327, "19728196e": 327, "2796x": 327, "2796y": 327, "2796z": 327, "5248x": 327, "5248y": 327, "5248z": 327, "6157x": 327, "6157y": 327, "6157z": 327, "6172x": 327, "6172y": 327, "6172z": 327, "6214x": 327, "6214y": 327, "6214z": 327, "6272x": 327, "6272y": 327, "6272z": 327, "6376x": 327, "6376y": 327, "6376z": 327, "6392x": 327, "6392y": 327, "6392z": 327, "6405x": 327, "6405y": 327, "6405z": 327, "8143x": 327, "8143y": 327, "8143z": 327, "8160x": 327, "8160y": 327, "8160z": 327, "11664x": 327, "11664y": 327, "11664z": 327, "11705x": 327, "11705y": 327, "11705z": 327, "11722x": 327, "11722y": 327, "11722z": 327, "11735x": 327, "11735y": 327, "11735z": 327, "11764x": 327, "11764y": 327, "11764z": 327, "11892x": 327, "11892y": 327, "11892z": 327, "11909x": 327, "11909y": 327, "11909z": 327, "13603x": 327, "13603y": 327, "13603z": 327, "13647x": 327, "13647y": 327, "13647z": 327, "13660x": 327, "13660y": 327, "13660z": 327, "17107x": 327, "17107y": 327, "17107z": 327, "17563x": 327, "17563y": 327, "17563z": 327, "17573x": 327, "17573y": 327, "17573z": 327, "18331x": 327, "18331y": 327, "18331z": 327, "18416x": 327, "18416y": 327, "18416z": 327, "18787x": 327, "18787y": 327, "18787z": 327, "19579x": 327, "19579y": 327, "19579z": 327, "19651x": 327, "19651y": 327, "19651z": 327, "19665x": 327, "19665y": 327, "19665z": 327, "aim": [327, 342, 348], "lsim": [327, 350], "test_bandwidth": 327, "rb_frame": 327, "choos": [327, 332, 339, 340, 350], "rb_frequenc": 327, "chose": [327, 343, 350], "rb_coordin": 327, "startup": [327, 332, 338], "queri": [327, 340], "erron": [327, 350], "rb_shape": 327, "incorrect": [327, 348, 350], "throughout": [327, 340, 348], "intention": 327, "opposit": [327, 338, 339, 340, 348], "thoroughli": [327, 342], "analyz": [327, 329, 334, 338, 339, 340, 342, 348, 350], "34": [327, 328, 330, 332, 340, 348, 350], "316000": 327, "35": [327, 328, 330, 332, 340, 344, 348, 350], "f4": 327, "Being": 327, "316": 327, "peculiar": 327, "contrari": 327, "rememb": [327, 342, 343, 348, 350], "37": [327, 328, 330, 340, 348, 350], "contrast": [327, 350], "38": [327, 328, 330, 332, 340, 348, 350], "16000": 327, "39": [327, 328, 330, 332, 337, 338, 339, 340, 344, 348, 350], "c16": [327, 350], "ve": [327, 331, 340, 348], "understood": [327, 340], "task": 327, "discuss": [327, 337, 340, 342, 343, 344, 348, 350], "rigid_body_check": 327, "suspici": 327, "warrant": 327, "quantit": [327, 329], "wrong": [327, 350], "suspicious_dof": 327, "significantli": [327, 329, 330, 332, 342, 343, 348, 350], "behav": [327, 330, 339, 350], "hone": [327, 350], "difficult": [327, 331, 340, 343, 344, 348, 350], "rigid_body_fix_node_orient": 327, "suspicious_nod": 327, "test_geometry_correct": 327, "drive_point": 327, "modal_fram": 327, "random_forc": 327, "statist": 327, "sqrt": [327, 338, 340, 342, 348], "rfftfreq": [327, 332, 342, 343], "sharp": [327, 332, 338, 339, 350], "responses_mod": [327, 340], "references_mod": 327, "responses_sampl": 327, "slice": [327, 329, 331, 337, 342, 343, 348], "references_sampl": 327, "frf_sampl": 327, "guiplot": [327, 329, 331, 332, 342, 350], "quickli": [327, 329, 331, 332, 335, 337, 338, 339, 340, 343, 350], "gui": [327, 331, 332, 343, 350], "pm": 327, "stabil": [327, 331, 332, 350], "diagram": [327, 332, 338, 350], "instanc": [327, 332, 337, 340], "drag": [327, 340, 350], "region": [327, 343, 350], "stabl": [327, 332, 348, 350], "click": [327, 331, 332, 340, 350], "disk": [327, 332, 350, 351], "shape_comparison_t": [327, 328, 330, 332, 350], "test_shapes_polypi": [327, 331], "shapes_polypi": [327, 350], "shape_correspond": 327, "4f": 327, "00": [327, 328, 330, 340, 348, 350], "0067": 327, "9820": 327, "0218": 327, "9605": 327, "0458": 327, "4512": 327, "0344": 327, "4827": 327, "99": [327, 328, 330, 332, 343], "0077": 327, "7148": 327, "3471": 327, "0114": 327, "98": [327, 328, 330, 332, 343, 350], "0855": 327, "78": [327, 330, 332, 348], "77": [327, 330, 332], "0156": 327, "97": [327, 328, 330, 332], "4382": 327, "47": [327, 328, 330, 340, 344, 348, 350], "0189": 327, "0342": 327, "57": [327, 328, 330, 340, 348, 350], "49": [327, 328, 330, 332, 340, 344, 348, 350], "0003": 327, "1664": 327, "0012": 327, "0377": 327, "0000": [327, 340, 344, 350], "0906": 327, "0026": 327, "1076": 327, "0078": 327, "1584": 327, "0061": 327, "3016": 327, "0013": 327, "1005": 327, "107": [327, 330], "0018": 327, "1139": 327, "0065": 327, "5165": 327, "140": [327, 350], "0016": 327, "3194": 327, "0097": 327, "2438": 327, "148": 327, "0045": 327, "3527": 327, "158": 327, "70": [327, 328, 330, 332, 340, 348, 350], "0005": 327, "2717": 327, "164": [327, 351], "0063": 327, "1195": 327, "68": [327, 330, 340, 348, 350], "0183": 327, "8317": 327, "0171": 327, "8663": 327, "183": 327, "0042": 327, "1180": 327, "180": [327, 338, 339, 348, 350], "dot": [327, 338, 339, 340, 348], "shape_phas": 327, "einsum": [327, 348], "test_comparison_geometri": 327, "test_comparison_shap": 327, "fem_comparison_geometri": 327, "fem_comparison_shap": 327, "stick": [327, 348], "insuffici": 327, "commun": 327, "stakehold": 327, "uniaxi": [327, 331, 342], "among": [327, 343], "expansion_basi": 327, "expanded_shap": 327, "Or": [327, 332, 350], "expansion_comparison_geometri": 327, "expansion_comparison_shap": 327, "toi": 328, "cubit": [328, 333], "spaceship": 328, "attach": [328, 330, 333, 338, 339, 340, 350], "execut": [328, 333], "thruster": 328, "nodeset": [328, 332], "block_1": 328, "block_2": 328, "block_al": 328, "truth": [328, 333, 334, 342, 348], "eigen": [328, 333, 348], "cbr": 328, "block_": 328, "degr": 328, "eig": [328, 348], "inp": 328, "popul": [328, 331, 342, 350], "reli": [328, 330, 332, 339, 348, 350], "packag": [328, 330, 332, 335, 338, 340, 342, 343, 348, 350], "check_shap": 328, "reduced_shap": 328, "wish": [328, 329, 332, 333, 340, 342, 348, 350], "symmetri": [328, 348], "perfect": [328, 330, 343, 350], "agreement": [328, 329, 331, 332, 342, 348], "technic": [328, 348], "pertin": 328, "super": 328, "aren": [328, 333], "cb_shape": 328, "full_shap": [328, 330], "compare_geo": 328, "compare_shap": [328, 330], "set_titl": [328, 330, 331, 332, 337, 338, 340, 342, 343, 348, 350], "tend": [328, 332, 338, 339, 340, 342, 343, 344, 350], "break": [328, 337, 343, 348, 350], "poor": [328, 329, 330, 332, 342, 343, 344, 350], "fact": [328, 337, 338, 339, 340, 342, 343, 348], "nearli": [328, 330, 338, 343, 348], "assembli": [328, 330, 333], "colloc": 328, "combined_shap": [328, 331, 350], "successfulli": [328, 330, 332, 333, 348, 350], "stai": [328, 332, 337, 350], "renam": [328, 333], "original_nod": 328, "substructured_nod": 328, "substructure_indic": 328, "truth_indic": 328, "463": 328, "585": 328, "750": [328, 340, 350], "834": [328, 332], "1368": 328, "1434": 328, "1458": 328, "1665": 328, "1727": 328, "2021": 328, "07": [328, 330, 348], "2767": 328, "2766": 328, "3140": 328, "3138": 328, "3432": 328, "48": [328, 330, 332, 340, 348, 350], "3767": 328, "3765": 328, "3871": 328, "3870": 328, "86": [328, 330, 348], "4063": 328, "4062": 328, "4251": 328, "4250": 328, "4312": 328, "4319": 328, "4948": 328, "4947": 328, "5195": 328, "5193": 328, "5713": 328, "5687": 328, "6213": 328, "6198": 328, "6215": 328, "6210": 328, "6945": 328, "7110": 328, "7102": 328, "79": [328, 330, 332, 348], "7247": 328, "83": [328, 330, 340], "7246": 328, "7398": 328, "7397": 328, "7732": 328, "7729": 328, "8052": 328, "87": [328, 330], "8049": 328, "8101": 328, "7992": 328, "8336": 328, "8310": 328, "8877": 328, "8860": 328, "9108": 328, "9069": 328, "9323": 328, "9263": 328, "9627": 328, "9591": 328, "9914": 328, "9875": 328, "10095": 328, "10060": 328, "10308": 328, "10307": 328, "10391": 328, "10369": 328, "12108": 328, "12079": 328, "until": [328, 332, 350], "31st": 328, "cb": [328, 330], "sdynpi": [329, 330, 331, 332, 336, 337, 341, 343, 344, 348], "replic": 329, "tune": [329, 332, 340], "beam_airplan": [329, 330, 337, 342], "demo": [329, 330, 337, 340, 342, 343], "modal_system": [329, 337, 340, 342, 343, 350], "control_dof": 329, "025": [329, 340, 350], "recreat": 329, "dure": [329, 332, 333, 340, 348, 350], "environment_dof": 329, "242": 329, "301": [329, 330], "302": 329, "304": 329, "305": [329, 330], "respond": [329, 337, 338, 339, 340, 342, 344], "uncorrel": [329, 342], "input_cpsd": 329, "predict": [329, 330, 337, 338, 339, 351], "environment_specif": 329, "great": [329, 343], "excitation_loc": [329, 342], "201x": [329, 330, 350], "201z": [329, 330, 337, 350], "233z": [329, 330], "305y": [329, 330], "control_frf": 329, "strategi": [329, 332], "perhap": [329, 330, 337, 338, 342, 348, 350], "simplest": [329, 350], "straightforward": [329, 338, 348], "control_predict": 329, "900": [329, 350], "trivial": [329, 340, 343, 348], "offer": [329, 338, 340, 342, 350], "apsd": 329, "focus": [329, 332, 339, 344], "mainli": 329, "relationship": [329, 338, 342, 343, 348], "ill": 329, "usual": [329, 339, 348], "input_weighting_matrix_tikhonov": 329, "input_weighting_scale_tikhonov": 329, "input_cpsd_tikhonov": 329, "excitation_weighting_matrix": 329, "control_predictions_tikhonov": 329, "expens": 329, "input_weighting_matrix_shaker_eq": 329, "input_weighting_scale_shaker_eq": 329, "5e": 329, "input_cpsd_shaker_eq": 329, "control_predictions_shaker_eq": 329, "shaker_equ": 329, "101y": [329, 330, 337, 350], "serious": 329, "coordinate_to_improv": 329, "input_cpsd_weight": 329, "control_predictions_weight": 329, "weighted_pseudoinvers": 329, "degrad": [329, 330, 343], "driven": [329, 339], "white": [329, 331, 350], "gracefulli": [329, 342], "buzz_input_cpsd": 329, "buzz_predict": 329, "buzz_coher": 329, "buzz_phas": 329, "modified_environment_specif": 329, "trend": [329, 332, 338], "dark": 329, "light": [329, 338], "accomod": 329, "input_cpsd_buzz": 329, "control_predictions_buzz": 329, "attract": [329, 338], "certainli": [329, 342, 348], "input_sign": 329, "input_cpsd_buzz_check": 329, "alpha": [329, 338, 340, 348], "diff": [329, 332], "control_buzz": 329, "buzz_simul": 329, "tutori": [329, 335], "notebook": 330, "component_system": 330, "126": [330, 350], "492": 330, "transmission_simul": 330, "132": 330, "component_geometri": 330, "easiest": [330, 343], "futur": [330, 332, 348], "1xx": 330, "2xx": 330, "3xx": 330, "appdata": 330, "python38": 330, "lib": 330, "site": 330, "core": [330, 331, 342, 350], "1541": 330, "pyvistadeprecationwarn": 330, "cell_arrai": 330, "deprec": 330, "cell_data": 330, "1401": 330, "point_arrai": 330, "point_data": 330, "busi": [330, 350], "interrog": [330, 332, 339], "101z": [330, 337, 350], "101rx": [330, 350], "101ry": [330, 350], "101rz": [330, 350], "102x": 330, "102y": 330, "102z": 330, "102rx": 330, "102ry": 330, "102rz": 330, "103x": 330, "103y": 330, "103z": 330, "103rx": 330, "103ry": 330, "103rz": 330, "104x": 330, "104y": 330, "104z": 330, "104rx": 330, "104ry": 330, "104rz": 330, "105x": 330, "105y": 330, "105z": 330, "105rx": 330, "105ry": 330, "105rz": 330, "106x": 330, "106y": 330, "106z": 330, "106rx": 330, "106ry": 330, "106rz": 330, "107x": 330, "107y": 330, "107z": 330, "107rx": 330, "107ry": 330, "107rz": 330, "108x": 330, "108y": 330, "108z": 330, "108rx": 330, "108ry": 330, "108rz": 330, "109x": 330, "109y": 330, "109z": 330, "109rx": 330, "109ry": 330, "109rz": 330, "110x": 330, "110y": 330, "110z": 330, "110rx": 330, "110ry": 330, "110rz": 330, "111x": 330, "111y": 330, "111z": 330, "111rx": 330, "111ry": 330, "111rz": 330, "112x": 330, "112y": 330, "112z": 330, "112rx": 330, "112ry": 330, "112rz": 330, "113x": 330, "113y": 330, "113z": 330, "113rx": 330, "113ry": 330, "113rz": 330, "114x": 330, "114y": 330, "114z": 330, "114rx": 330, "114ry": 330, "114rz": 330, "115x": 330, "115y": 330, "115z": 330, "115rx": 330, "115ry": 330, "115rz": 330, "116x": 330, "116y": 330, "116z": 330, "116rx": 330, "116ry": 330, "116rz": 330, "117x": 330, "117y": 330, "117z": 330, "117rx": 330, "117ry": 330, "117rz": 330, "118x": 330, "118y": 330, "118z": 330, "118rx": 330, "118ry": 330, "118rz": 330, "119x": 330, "119y": 330, "119z": 330, "119rx": 330, "119ry": 330, "119rz": 330, "120x": 330, "120y": 330, "120z": 330, "120rx": 330, "120ry": 330, "120rz": 330, "121x": 330, "121y": [330, 350], "121z": 330, "121rx": 330, "121ry": 330, "121rz": 330, "lt": [330, 337, 340, 342, 344], "u6": 330, "ahead": [330, 348], "component_shap": 330, "cee": 330, "python_util": 330, "src": 330, "sdynpy_system": 330, "453": 330, "runtimewarn": 330, "encount": 330, "true_divid": 330, "diag": [330, 340], "un": [330, 343], "pick": [330, 331, 337, 348, 350], "fourth": [330, 332, 344], "wing_boundary_dof": 330, "262": 330, "tail_boundary_dof": 330, "119": 330, "303": 330, "308": 330, "all_boundary_dof": 330, "internal_dof": 330, "109": 330, "306": 330, "reduction_dof": 330, "201y": [330, 350], "205x": 330, "205y": 330, "205z": 330, "209x": 330, "209y": 330, "209z": 330, "213x": 330, "213y": 330, "213z": 330, "217x": 330, "217y": 330, "217z": 330, "221x": 330, "221y": 330, "221z": 330, "221rx": 330, "221ry": 330, "221rz": 330, "225x": 330, "225y": 330, "225z": 330, "229x": 330, "229y": 330, "229z": 330, "233x": 330, "233y": 330, "237x": 330, "237y": 330, "237z": 330, "241x": 330, "241y": 330, "241z": [330, 337], "245x": 330, "245y": 330, "245z": 330, "249x": 330, "249y": 330, "249z": [330, 337], "253x": 330, "253y": 330, "253z": 330, "257x": 330, "257y": 330, "257z": 330, "261x": 330, "261y": 330, "261z": 330, "262x": 330, "262y": 330, "262z": 330, "262rx": 330, "262ry": 330, "262rz": 330, "265x": 330, "265y": 330, "265z": 330, "269x": 330, "269y": 330, "269z": 330, "273x": 330, "273y": 330, "273z": 330, "277x": 330, "277y": 330, "277z": 330, "281x": 330, "281y": 330, "281z": 330, "301x": 330, "301y": 330, "301z": 330, "303x": 330, "303y": 330, "303z": 330, "303rx": 330, "303ry": 330, "303rz": 330, "305x": 330, "305z": 330, "306x": 330, "306y": 330, "306z": 330, "308x": 330, "308y": 330, "308z": 330, "308rx": 330, "308ry": 330, "308rz": 330, "310x": 330, "310y": 330, "310z": 330, "bmatrix": [330, 339, 340, 342, 348], "dd": 330, "da": 330, "678": 330, "system_guyan": 330, "component_shapes_guyan": 330, "system_i": 330, "in1d": [330, 333], "full_system_guyan": 330, "full_geometry_guyan": 330, "full_shapes_guyan": 330, "general": 330, "truth_shapes_to_compar": 330, "shapes_to_compar": 330, "frequency_error": 330, "88": [330, 348], "89": 330, "69": [330, 340, 348, 350], "452": 330, "incorpor": [330, 350], "dynamic_frequ": 330, "system_dynam": 330, "component_shapes_dynam": 330, "full_system_dynam": 330, "full_geometry_dynam": 330, "full_shapes_dynam": 330, "431": 330, "elsewher": 330, "famou": 330, "ii": [330, 348], "ib": 330, "bi": 330, "bb": [330, 348], "henc": [330, 342], "system_cb": 330, "component_shapes_cb": 330, "n_fixed_base_mod": 330, "full_system_cb": 330, "full_geometry_cb": 330, "full_shapes_cb": 330, "clearli": [330, 337, 338, 339, 340, 343, 348, 350], "fair": 330, "system_cm": 330, "component_shapes_cm": 330, "full_system_cm": 330, "full_geometry_cm": 330, "full_shapes_cm": 330, "shape_mac": 330, "cm": [330, 350], "geometry_i": 330, "shapes_i": 330, "full_shapes_to_compar": 330, "shapes_i_to_compar": 330, "flip_sign": 330, "compare_geom": 330, "set_ylim": [330, 338, 339, 343, 348], "surprisingli": 330, "special": [330, 339, 348], "struggl": 330, "expect": [330, 331, 332, 338, 340, 342, 343, 348, 350, 351], "reaction": [330, 348], "abil": [330, 331, 340, 344, 350, 351], "focu": [330, 337, 339, 344, 348, 350], "bog": 330, "pptx": 331, "read_rattlesnake_output": [331, 351], "rattlesnake_modal_data": 331, "tight_layout": [331, 332, 337, 338, 339, 340, 342, 343, 350], "worth": [331, 332, 338, 340], "explor": [331, 332, 348, 350], "31745": 331, "tell": [331, 332, 333, 337, 339, 340, 343, 348, 350], "piec": [331, 332, 340], "sdynpy_coordin": 331, "28376x": 331, "28376y": 331, "28376z": 331, "28560x": 331, "28560y": 331, "28560z": 331, "17290x": 331, "17290y": 331, "17290z": 331, "16733x": 331, "16733y": 331, "16733z": 331, "2467x": 331, "2467y": 331, "2467z": 331, "2392x": 331, "2392y": 331, "2392z": 331, "33715y": 331, "36140y": 331, "24046x": 331, "30947x": 331, "8579y": 331, "12664y": 331, "4475z": 331, "2991y": 331, "5457x": 331, "time_start": 331, "time_end": 331, "truncated_time_data": 331, "pull": [331, 337, 338, 339, 340, 348, 350], "launch": 331, "frf_window": 331, "lbf": 331, "realli": [331, 340, 348], "510": 331, "propreti": 331, "obviou": [331, 332, 337, 338, 339, 348, 350], "eventu": [331, 333, 338, 343, 348, 350], "question": 331, "exodus_eigensolut": 331, "fem_geometri": 331, "destroi": 331, "keep_nod": 331, "12664": 331, "17290": 331, "30947": 331, "28560": 331, "36140": 331, "33715": 331, "28376": 331, "24046": 331, "16733": 331, "8579": 331, "4475": 331, "2467": 331, "2991": 331, "2392": 331, "5457": 331, "rc": 331, "rattlesnake_test_geometri": 331, "polypi": [331, 332, 334, 348, 351], "smac_gui": [331, 350, 351], "sdynpy_smac": 331, "0x14fe6f05b80": 331, "guiess": 331, "solver": [331, 332, 348], "autofit": [331, 350], "switch": [331, 338, 350], "rattlesnake_test_shapes_smac": 331, "script": [331, 332, 350], "sdynpy_polypi": 331, "0x14fff4c5d30": 331, "resynthesi": [331, 332, 350], "rattlesnake_test_shapes_polypi": 331, "test_shapes_smac": 331, "fem_shap": 331, "2000": [331, 332, 333, 339, 342, 348, 350], "meaning": [331, 337, 348, 350], "response_dof": [331, 343, 344, 350], "test_shape_matrix_smac": 331, "test_shape_matrix_polypi": 331, "test_shape_matrix_fem": 331, "fem_shapes_reduc": 331, "mac_smac_polypi": 331, "mac_smac_fem": 331, "mac_polypy_fem": 331, "fem_match": 331, "mode_1": 331, "perfectli": [331, 342], "enough": [331, 332, 333, 337, 338, 342, 343], "doc": [331, 351], "create_summary_pptx": [331, 351], "creeat": 331, "design": [331, 337, 350], "slide": [331, 350], "background": 331, "corpor": 331, "reformat": 331, "custom": 331, "layout": [331, 350], "theme": 331, "pr": [331, 348], "powerpoint_sandia_them": 331, "barc": 331, "rattlesnake_test_quicklook": 331, "overview": [331, 335], "create_latex_summari": [331, 351], "strongli": [331, 344], "subdirectori": 331, "snippet": 331, "rattlesnake_test": 331, "rattlesnake_test_memo_cont": 331, "documentclass": 331, "usepackag": 331, "graphicx": 331, "subcapt": 331, "dan": 331, "rohe": 331, "maketitl": 331, "abstract": [331, 338, 348], "obvious": [331, 344], "context": [331, 348], "surround": [331, 337, 343], "setup": [331, 332, 337, 350], "analyst": 331, "who": 331, "postprocess": 331, "gain": [331, 340, 348, 350], "happen": [331, 332, 338, 339, 340, 342, 343, 344, 348, 350], "lstsq": [331, 348], "rebuild": 331, "properli": [331, 343], "assumpt": [331, 343, 348, 350], "fexo_repack": 331, "expanded_shapes_polypi": 331, "combined_expanded_geometri": 331, "combined_expanded_shap": 331, "expanded_mode_1": 331, "rattlesnake_test_output": 331, "rattlesnake_test_output_expand": 331, "paraview": 331, "contact": 332, "solidmechan": 332, "explicit": 332, "cantilev": 332, "fork": 332, "character": [332, 337], "quit": [332, 337, 340, 348, 350], "clumbsi": 332, "scroll": [332, 340], "inc": 332, "pseudorandom_signal_fft": 332, "abruptli": 332, "10th": 332, "shorten": 332, "lose": [332, 344], "intermedi": 332, "leakag": [332, 343], "determinist": [332, 343], "smoothli": 332, "past": [332, 338, 343], "signal_shap": 332, "random_signal_": 332, "random_signal_fft": 332, "repetit": 332, "deck": 332, "wrote": [332, 348], "piecewis": 332, "prescrib": 332, "nodelist_2": 332, "aprepro": 332, "termin": 332, "0000025": 332, "twice": [332, 350], "tuning_fork_pseudorandom": 332, "40002": 332, "333": 332, "144": 332, "displacement_x": 332, "displacement_i": 332, "displacement_z": 332, "acceleration_x": 332, "acceleration_i": 332, "acceleration_z": 332, "force_external_x": 332, "force_external_i": 332, "force_external_z": 332, "external_energi": 332, "internal_energi": 332, "kinetic_energi": 332, "momentum_x": 332, "momentum_i": 332, "momentum_z": 332, "explicitli": [332, 340, 348], "grab": 332, "force_nod": 332, "excitation_force_sign": 332, "force_data": 332, "signalprocessinggui": [332, 343, 350], "all_data": 332, "shortli": [332, 340, 350], "durat": [332, 350], "uncertainti": 332, "sm": 332, "explain": 332, "diverg": [332, 350], "steadi": [332, 338, 342, 343, 350], "vice": [332, 350], "versa": [332, 350], "doubl": [332, 338, 348, 350], "sent": [332, 350], "send": [332, 350], "anyth": 332, "rectangl": 332, "reject": [332, 343], "counter": 332, "notic": 332, "clean": [332, 343], "219": 332, "bring": [332, 340, 348, 350], "spurious": 332, "thoughout": 332, "qmif": [332, 350], "sensit": 332, "dip": [332, 343], "poli": [332, 350], "statu": 332, "messag": 332, "unstabl": [332, 348], "shouldn": [332, 348], "circl": [332, 339, 348, 350], "rule": [332, 338, 340, 343, 348, 350], "thumb": [332, 343, 350], "peopl": 332, "mous": [332, 340, 350], "hover": [332, 350], "black": 332, "frfgui": 332, "332": 332, "judg": [332, 348, 350], "adequaci": [332, 350], "accumul": [332, 348], "overal": [332, 350], "pictur": 332, "tuning_fork_random": 332, "force_external_": 332, "slightli": [332, 343, 348, 350], "leav": [332, 339, 348, 350], "alon": 332, "substanti": 332, "relat": [332, 342, 348], "outsid": [332, 338, 343, 348], "standpoint": 332, "unrel": 332, "suffer": [332, 342], "lessen": 332, "diminish": 332, "middl": [332, 340, 342, 343, 344, 348], "tuning_fork_geometri": 332, "benefici": 332, "exodus_sd": 332, "tuning_fork_sd": 332, "shapes_sd": 332, "shapes_sm_pr": 332, "tuning_fork_pseudorandom_shap": 332, "shapes_sm_ra": 332, "tuning_fork_random_shap": 332, "mechan": [332, 340, 351], "sm_mac": 332, "pr_indic": 332, "ra_indic": 332, "755": 332, "1299": 332, "1717": 332, "1808": 332, "bewteen": 332, "artifici": [332, 343, 350], "coars": 332, "hexahedr": 332, "softer": 332, "refin": 332, "sd_mac": 332, "2500": [332, 339, 340, 342], "sd_indic": 332, "176": 332, "166": 332, "240": 332, "358": 332, "327": 332, "362": 332, "426": 332, "378": 332, "832": 332, "848": 332, "1129": 332, "1011": 332, "1383": 332, "1098": 332, "1445": 332, "1457": 332, "1234": 332, "1860": 332, "1937": 332, "1655": 332, "1947": 332, "1751": 332, "artifact": [332, 343], "heavili": [332, 340, 342, 348, 350], "lid": 333, "bc": 333, "abc": 333, "serv": 333, "qhullerror": 333, "pretend": [333, 338, 350], "container_s": 333, "component_s": 333, "lid_depth": 333, "container_thick": 333, "lid_posit": 333, "component_posit": 333, "grid_siz": 333, "component_grid_s": 333, "grid_inset": 333, "other_dimens": 333, "meshgrid_input": 333, "grid_0": 333, "grid_1": 333, "grid_2": 333, "this_posit": 333, "this_positions_opposit": 333, "exactli": [333, 338, 340, 342, 343, 348], "max_condit": 333, "creation": [333, 343], "n_node": 333, "original_indic": 333, "face_indic": 333, "face_nod": 333, "face_el": 333, "atleast_1d": 333, "proce": [333, 338, 340, 348, 350], "transmission_simulator_mod": 333, "system_ab": 333, "system_bc": 333, "system_b": 333, "geom": 333, "forget": 333, "connection_nod": 333, "connection_map_ab": 333, "connection_map_bc": 333, "connection_map_b": 333, "soften": 333, "connection_shapes_ab": 333, "connection_shapes_bc": 333, "connection_shapes_b": 333, "connection_shap": 333, "connection_dofs_ab": 333, "connection_dofs_bc": 333, "connection_dofs_b": 333, "constraint_matrix_ab_b": 333, "constraint_matrix_bc_b": 333, "constrained_system": [333, 350], "constrained_shap": [333, 350], "instrument": [334, 337, 344], "virtual": 334, "experi": [334, 343], "checkout": 334, "showcas": 335, "bibliographi": 335, "search": 335, "undamp": [336, 339, 348, 350], "harmon": [336, 342, 351], "homework": [336, 341], "differenti": [336, 337, 338], "hard": [336, 340], "studi": [337, 348], "oppos": [337, 339, 340], "boat": 337, "wind": 337, "turbin": 337, "bumpi": 337, "road": [337, 348], "car": 337, "tire": 337, "utmost": [337, 348], "surviv": 337, "failur": 337, "servic": 337, "analogi": 337, "roof": 337, "ultim": 337, "strength": 337, "word": [337, 342, 348], "depth": 337, "worri": [337, 343], "explan": 337, "subpackag": 337, "propel": 337, "load_loc": 337, "275z": 337, "load_sign": 337, "turbul": 337, "slowli": [337, 343], "nightmar": 337, "decod": 337, "responses_fft": [337, 339], "loads_fft": 337, "flat": [337, 338], "pretti": 337, "uniformli": 337, "peaki": 337, "big": [337, 350], "distinct": [337, 344], "preferenti": 337, "bias": 337, "imbalanc": 337, "spin": [337, 340], "imagin": [337, 343], "force_loc": 337, "response_loc": [337, 342], "die": [337, 338, 343], "amplifi": [337, 338], "attenu": [337, 343], "chirp_respons": 337, "chirp_load": 337, "swept": 337, "axessubplot": [337, 344], "ylabel": [337, 344], "gt": [337, 342, 344], "thought": [337, 348], "add_subplot": [337, 338], "ax2": 337, "frame_on": 337, "c0": 337, "tick_param": 337, "c1": [337, 339, 340], "xaxi": 337, "tick_top": 337, "yaxi": 337, "tick_right": 337, "set_label_posit": 337, "amplif": [337, 338, 340], "surpris": 337, "pattern": [337, 348], "cover": [337, 340, 342, 343, 350], "clearer": 337, "saw": [337, 338, 339, 340, 341, 348, 350], "theori": [337, 338, 339, 341, 342, 348], "behind": [337, 338, 342], "fundament": 338, "phenomenon": [338, 343], "primarili": [338, 340], "presenc": 338, "restor": [338, 340], "stretch": 338, "farther": 338, "atom": 338, "molecul": 338, "arriv": [338, 340, 348], "suddenli": 338, "constantli": 338, "slow": [338, 342, 350], "travel": [338, 339], "overcom": [338, 340], "sai": [338, 339, 343, 348, 350], "gridspec": 338, "funcanim": 338, "fa": 338, "def": [338, 348], "draw_spring_mass": 338, "mass_siz": 338, "mass_to_ground_length": 338, "num_wind": 338, "spring_width": 338, "arrow_s": 338, "arrow_label": 338, "arrow_color": 338, "arrow_offset": 338, "fontsiz": 338, "spring_length": 338, "ground_posit": 338, "mass_x": 338, "mass_i": 338, "va": 338, "num_arrow": 338, "els": [338, 348], "arrow_posit": 338, "mean_posit": 338, "quiver": [338, 348], "xy": [338, 342, 348], "scale_unit": [338, 348], "kx": 338, "ddot": [338, 339, 340, 344, 348], "dof_nam": 338, "force_sign": [338, 339, 340], "plot_spring_mass_respons": 338, "displacement_index": 338, "drawing_axi": 338, "disp_axi": 338, "vel_axi": 338, "accel_axi": 338, "force_axi": 338, "constrained_layout": 338, "disp_siz": 338, "vel_siz": 338, "accel_s": 338, "force_s": 338, "axvlin": [338, 343], "signfic": [338, 342], "downward": 338, "acquir": [338, 343], "momentum": 338, "upward": [338, 339], "250": [338, 340], "325": 338, "indefinit": [338, 340, 343], "fortun": 338, "truli": [338, 348], "loss": [338, 348], "ball": 338, "bounc": [338, 348], "never": [338, 339, 344, 348, 350], "guitar": 338, "pluck": [338, 340, 348], "di": 338, "damping_valu": 338, "oscil": 338, "think": [338, 339, 342, 348, 350], "c_": [338, 348], "cr": 338, "km": 338, "applic": [338, 350], "plug": [338, 340, 348], "5000": [338, 350], "amplification_factor": 338, "amplfic": 338, "notabl": 338, "spike": 338, "unintuit": [338, 348], "realist": [338, 340, 343, 350], "lag": 338, "x_1": [338, 339, 340], "x_2": [338, 339, 340], "compact": [338, 348], "euler": 338, "former": [338, 350], "chain": [338, 340, 348], "multiplicand": 338, "goe": [338, 339, 348], "set_ytick": [338, 339, 348], "infin": [338, 343], "transit": 338, "blunt": [338, 350], "span": [338, 350], "probabl": [338, 342], "sharper": [338, 350], "repons": 338, "expos": 338, "laser": [338, 342], "vibromet": 338, "becom": [338, 339, 340, 342, 343, 348], "accustom": 338, "derivative_label": 338, "reduction_label": 338, "ax_row": 338, "undergo": [338, 340], "opportun": [338, 343], "neglig": [338, 350], "ma": 338, "influenc": 338, "domin": 338, "inerti": 338, "undefin": 338, "swap": [338, 340, 348], "infinit": [338, 340, 343, 350], "talk": 338, "unnecessari": 338, "huge": [338, 348], "degree_of_freedom": 338, "strang": [338, 350], "600": 338, "frequency_lin": [338, 343, 350], "frf_valu": 338, "axhlin": 338, "hit": [338, 342], "agre": [338, 348], "own": [338, 339, 348], "15000": 338, "fine": 338, "medium": 338, "vast": 339, "major": [339, 343], "m_1": [339, 340, 342], "k_1": [339, 340, 342], "m_2": [339, 340, 342], "k_2": [339, 340, 342], "f_1": [339, 340], "_1": [339, 340, 342, 343, 348], "f_2": [339, 340], "_2": [339, 340, 342, 348], "rearrang": [339, 348], "whenev": 339, "algebra": [339, 340, 348, 350], "firstli": 339, "equval": 339, "newton": [339, 348], "law": [339, 343, 348], "m1": [339, 340], "m2": [339, 340], "k1": [339, 340], "k2": [339, 340], "1500": [339, 340, 342, 343], "sinusodi": 339, "superposit": 339, "c_1": [339, 340, 342], "c_2": [339, 340, 342], "induc": 339, "affect": [339, 342], "m_0": 339, "_0": 339, "c_0": 339, "k_0": 339, "c2": [339, 340], "interestingli": 339, "vdot": [339, 340, 348], "f_i": 339, "x_i": [339, 340], "far": [339, 342, 348, 350], "1001": [339, 340], "inv": [339, 348], "response_nam": 339, "response_frf": 339, "axes_row": 339, "nphase": [339, 343], "phase_axi": 339, "phase_handl": 339, "mag_axi": 339, "twinx": 339, "magnitude_handl": 339, "input_nam": 339, "unlik": [339, 342, 350], "steep": 339, "vallei": [339, 342, 350], "anti": [339, 342, 343], "consecut": 339, "travers": 339, "360": 339, "circular": 339, "learn": [339, 342, 348], "axis_ext": 339, "incred": 339, "input_force_loc": 339, "output_response_loc": 339, "2y": [339, 350], "excitation_frequ": [339, 342], "3000": [339, 343, 350], "revisit": [339, 344], "m_3": [339, 340, 342], "k_3": [339, 340, 342], "k_4": [339, 340, 342], "shuffl": 339, "unshuffl": 339, "manag": 340, "closer": 340, "asid": [340, 348], "matter": [340, 343, 348], "said": [340, 348], "sympi": 340, "sp": 340, "x1": 340, "x2": 340, "lam": 340, "expr": 340, "char_expr": 340, "det": [340, 348], "eq": 340, "displaystyl": 340, "k_": 340, "m_": 340, "littl": [340, 348, 350], "4500": 340, "1500000": 340, "evalf": 340, "406": 340, "9296691827464": 340, "1843": 340, "0703308172535": 340, "eval": [340, 348], "2105527460540504": 340, "832680064485663": 340, "593": 340, "07033082": 340, "1686": 340, "14066163": 340, "6861406616345074x": 340, "843": 340, "1186": 340, "1861406616345072x": 340, "familiar": [340, 343, 348, 350], "underdetermin": 340, "eachoth": 340, "arbitrarili": [340, 344, 348], "answer": [340, 348], "5930703308172536": 340, "8430703308172537": 340, "foremost": 340, "coeffic": 340, "extrapol": 340, "thankfulli": 340, "q_1": 340, "q_2": 340, "That": 340, "premultipli": [340, 348], "tild": [340, 344, 348], "m_m": 340, "k_m": 340, "array2str": 340, "formatt": 340, "float_kind": 340, "5f": 340, "70346": 340, "00000": 340, "42154": 340, "693": 340, "19038": 340, "4463": 340, "05962": 340, "decoupl": [340, 348], "4460": 340, "remark": 340, "wonder": 340, "scaled_eigenvector": 340, "92967": 340, "07033": 340, "omega_1": [340, 348], "omega_2": [340, 348], "76618": 340, "64262": 340, "45440": 340, "54177": 340, "ruler": 340, "clamp": 340, "desk": 340, "home": 340, "coupl": [340, 348, 350], "incredibli": [340, 342], "beta": [340, 348], "smear": 340, "benefit": 340, "diagonaliz": 340, "tyical": 340, "imposs": [340, 343], "proportion": [340, 348], "over2": 340, "grow": [340, 348], "critid": 340, "disapp": 340, "joint": 340, "energi": 340, "dissap": 340, "discret": [340, 343, 348], "suspens": 340, "automobil": 340, "terribl": [340, 343, 348], "reformul": 340, "c_m": 340, "63771245": 340, "15386436": 340, "48728755": 340, "insignific": [340, 342], "la": [340, 348], "system_physical_damp": 340, "system_modal_damp": 340, "initial_state_mod": 340, "block_diag": 340, "responses_phys": 340, "response_phys": 340, "response_mod": 340, "drastic": 340, "insight": [340, 344], "involv": [340, 342, 348], "zeta_1": 340, "zeta_2": 340, "compactli": [340, 348], "ddots2": [340, 344], "zeta_n": [340, 344], "omega_n": [340, 344], "uncoupl": [340, 348, 350], "summat": [340, 342, 348], "sum_": [340, 342, 343, 348], "phi_k": 340, "2i": 340, "zeta_k": 340, "omega_k": [340, 348], "h_per_mod": 340, "2j": [340, 348], "nforc": 340, "nfrf": 340, "counterintuit": 340, "preval": 340, "beam_plat": [340, 342, 343], "plate_system": 340, "plate_shap": 340, "270": 340, "0002": 340, "4788": 340, "0777": 340, "1884": 340, "214": 340, "7808": 340, "2875": 340, "311": 340, "9626": 340, "355": 340, "5867": 340, "361": 340, "3963": 340, "364": 340, "7936": 340, "370": 340, "0250": 340, "462": 340, "3216": 340, "539": 340, "8559": 340, "8296": 340, "594": 340, "6486": 340, "634": 340, "0691": 340, "643": 340, "6099": 340, "710": 340, "9058": 340, "746": 340, "4506": 340, "776": 340, "8982": 340, "809": 340, "6974": 340, "853": 340, "9038": 340, "857": 340, "0849": 340, "879": 340, "0950": 340, "00000000e": 340, "68587394e": 340, "74788054e": 340, "02077709e": 340, "85188450e": 340, "14780834e": 340, "32287546e": 340, "11962560e": 340, "55586672e": 340, "61396270e": 340, "64793564e": 340, "70025026e": 340, "62321608e": 340, "39855912e": 340, "93829573e": 340, "94648580e": 340, "34069147e": 340, "43609950e": 340, "10905806e": 340, "46450634e": 340, "76898214e": 340, "09697367e": 340, "53903834e": 340, "57084918e": 340, "79095024e": 340, "87845506e": 340, "09847824e": 340, "26589551e": 340, "38717885e": 340, "19171311e": 340, "29348485e": 340, "16437174e": 340, "74485641e": 340, "44773478e": 340, "90028325e": 340, "69589392e": 340, "67067932e": 340, "14736558e": 340, "97525145e": 340, "14529355e": 340, "18747047e": 340, "21629035e": 340, "16191482e": 340, "48712418e": 340, "68911588e": 340, "12167411e": 340, "07189408e": 340, "29814800e": 340, "82376881e": 340, "23884395e": 340, "25809218e": 340, "09546603e": 340, "85048039e": 340, "35203567e": 340, "70009100e": 340, "29780204e": 340, "19001068e": 340, "19373036e": 340, "01245326e": 340, "55525400e": 340, "88140699e": 340, "stiffnesss": 340, "interconnect": 340, "col": 340, "ration": 340, "imaging": 340, "math": [340, 348], "plate_geometri": 340, "375": 340, "625": 340, "875": 340, "preferr": 340, "wheel": 340, "pan": 340, "45rx": 340, "45ry": 340, "45rz": 340, "u5": [340, 350], "twist": 340, "clear": [340, 343, 348], "simpler": 340, "framework": 340, "did": 340, "3x": [340, 350], "unfortun": [341, 343, 348], "broadband": [341, 343], "consider": [341, 344, 348], "discov": 342, "viabl": 342, "drawback": [342, 344], "quicker": 342, "realism": [342, 344], "fly": 342, "41z": 342, "excitation_amplitud": 342, "sample_length": 342, "excitation_sign": 342, "steady_state_respons": 342, "steady_state_refer": 342, "response_magnitud": 342, "response_phas": 342, "harmonic_mag_phas": 342, "response_complex": 342, "reference_magnitud": 342, "reference_phas": 342, "reference_complex": 342, "frf_line": 342, "subplot_kw": 342, "deflection_shap": 342, "0x1b17302cca0": 342, "120": [342, 350], "frf_coordin": 342, "outer_product": [342, 348], "frf_sine": 342, "dsplot": 342, "disadvantag": [342, 343], "rand": 342, "excitation_signal_fft": 342, "excitation_signal_freq": 342, "tile": 342, "frf_broadband": 342, "narrow": [342, 350], "broad": 342, "adventag": 342, "accommod": 342, "bartlett": 342, "welch": 342, "conjug": [342, 348], "xf": [342, 343], "xx": 342, "sequenti": 342, "_i": [342, 343], "ff": [342, 343], "situat": [342, 348, 350], "mental": 342, "harder": [342, 343, 350], "hammer": [342, 343], "rare": 342, "floor": [342, 343, 344, 350], "juxtapos": 342, "antireson": [342, 343], "optic": 342, "vibrometeri": 342, "transduc": 342, "underestim": 342, "overestim": [342, 343], "p_": 342, "commonli": 342, "understim": 342, "implic": 342, "restrict": 342, "greatli": 342, "seldom": 342, "somewher": [342, 350], "_3": 342, "choleski": 342, "cd": 342, "fz": 342, "zf": [342, 348], "xz": 342, "zz": 342, "hermetian": [342, 348], "unmeasur": 342, "gamma": 342, "mcoh": 342, "wingtip": 342, "241": 342, "999": 342, "frf_truth": 342, "wait": [342, 343], "response_sign": 342, "gaussian": 342, "deviat": 342, "noisi": [342, 343], "response_signals_nois": 342, "randn": 342, "reference_noise_level": 342, "reference_signals_nois": 342, "frf_no_nois": 342, "frf_ref_nois": 342, "frf_res_nois": 342, "frf_both_nois": 342, "precis": [342, 343, 344, 350], "outperform": 342, "significatli": 342, "margin": 342, "win": 342, "dreadfulli": 342, "hundr": 342, "thousand": 342, "build": 342, "analog": 342, "difficulti": 342, "inabl": 342, "popular": [342, 343, 344, 348, 350], "favor": 342, "xxx": 342, "tradition": 343, "flavor": 343, "blur": 343, "therefrom": 343, "suppos": 343, "signal_fft": 343, "inclin": 343, "hat": [343, 348], "xi": 343, "int_": 343, "infti": 343, "afford": 343, "stand": 343, "meant": 343, "discontinu": [343, 350], "knowledg": [343, 348], "believ": [343, 348], "someth": [343, 348], "assumed_sign": 343, "resampl": 343, "leak": 343, "lesson": 343, "teach": [343, 348], "isol": 343, "rank": 343, "defici": 343, "unabl": 343, "mind": [343, 348], "reference_dof": [343, 350], "response_random_mimo": 343, "reference_random_mimo": 343, "xlim": 343, "all_sign": 343, "spgui": [343, 350], "unattenu": 343, "degred": 343, "inher": [343, 344, 348], "response_pr_mimo": 343, "reference_pr_mimo": 343, "inexperienc": 343, "claim": 343, "game": 343, "chanc": 343, "response_pr_simo": 343, "reference_pr_simo": 343, "minor": 343, "repeatedli": 343, "suit": 343, "response_chirp_simo": 343, "reference_chirp_simo": 343, "first_fram": 343, "first_frame_fft": 343, "nmagnitud": 343, "lesser": 343, "tailor": 343, "didn": 343, "mutlipl": 343, "randomli": 343, "hour": 343, "dai": 343, "minut": 343, "price": 343, "pai": 343, "response_burst_mimo": 343, "reference_burst_mimo": 343, "nor": [343, 348], "effort": [343, 350], "cut": 343, "keenli": 343, "modern": 343, "unwis": 343, "especi": [343, 350], "response_impact": 343, "reference_impact": 343, "1e1": 343, "roll": 343, "decid": 343, "evolv": 343, "year": 343, "100x": 343, "advent": 343, "rippl": 343, "transmit": 344, "coordinate_indic": 344, "0076": 344, "0864": 344, "7694": 344, "286": 344, "0446": 344, "560": 344, "7624": 344, "926": 344, "9713": 344, "frf_tip": 344, "symmetr": [344, 348], "min_dof_loc": 344, "min_dof": 344, "frf_middl": 344, "lost": [344, 350], "midpoint": 344, "challeng": 344, "propos": 344, "optimum": 344, "odp_i": 344, "prod_": 344, "n_": 344, "phi_": [344, 348], "odp": 344, "xlabel": 344, "midspan": 344, "instrumen": 344, "fisher": 344, "fim": 344, "kept_indic": 344, "cluster": 344, "maxim": 344, "emphasi": 344, "by_condition_numb": 344, "georg": 348, "fox": 348, "lang": 348, "magazin": 348, "mad": 348, "confus": 348, "review": 348, "viewpoint": 348, "he": 348, "topic": 348, "hi": 348, "lack": 348, "him": 348, "himself": 348, "lopez": 348, "brinckner": 348, "et": 348, "al": 348, "lti": 348, "eleg": 348, "bigger": 348, "seed": 348, "vector_scalar": 348, "vector_matrix": 348, "5507979025745755": 348, "70814782": 348, "29090474": 348, "51082761": 348, "89294695": 348, "20x20": 348, "2x1": 348, "mgrid": 348, "20j": 348, "scaled_vector": 348, "vectors_for_plot": 348, "scaled_vectors_for_plot": 348, "prefix": 348, "german": 348, "eigenvectors_to_plot": 348, "centimet": 348, "netwton": 348, "admittedli": 348, "accomplish": 348, "instantan": 348, "mostli": 348, "argu": [348, 350], "unscal": 348, "_r": 348, "frac": 348, "omega_r": 348, "dimensionless": 348, "kilogram": 348, "disregard": 348, "rr": 348, "zeta_r": 348, "luckili": 348, "toolset": 348, "rearang": 348, "2n": 348, "introducton": 348, "psi": 348, "circ": 348, "oscillatori": 348, "theta": 348, "growth": 348, "hear": [348, 350], "lambda_r": 348, "omega_d": 348, "omega_": 348, "dr": 348, "im": 348, "m_r": 348, "pd": 348, "html": 348, "pretty_print_t": 348, "to_html": 348, "br": 348, "6000": 348, "00154865": 348, "c_proport": 348, "c_gener": 348, "a_undamp": 348, "a_proport": 348, "a_gener": 348, "2nd": 348, "eigh": 348, "wari": [348, 350], "overwrite_a": 348, "overwrite_b": 348, "check_finit": 348, "homogeneous_eigv": 348, "ordinari": 348, "vr": 348, "vl": 348, "conj": 348, "hermitian": 348, "lam_2ndord": 348, "e_2ndord": 348, "lam_undamp": 348, "e_undamp": 348, "lam_proport": 348, "e_proport": 348, "lam_gener": 348, "e_gener": 348, "keep_undamp": 348, "keep_proport": 348, "keep_gener": 348, "evect": 348, "isort": 348, "argsort": 348, "omega_2ndord": 348, "omega_undamp": 348, "omega_proport": 348, "omega_gener": 348, "zeta_undamp": 348, "zeta_proport": 348, "zeta_gener": 348, "omega_d_undamp": 348, "omega_d_proport": 348, "omega_d_gener": 348, "00595": 348, "54865": 348, "1373": 348, "2518998j": 348, "77225575j": 348, "92217695j": 348, "62753244": 348, "24467371j": 348, "5014875": 348, "75167153j": 348, "73017173": 348, "89719356j": 348, "73753202": 348, "24242803j": 348, "50037636": 348, "76028673j": 348, "59542495": 348, "89042233j": 348, "2518998": 348, "77225575": 348, "92217695": 348, "25240977": 348, "78083727": 348, "91166888": 348, "02302711": 348, "02741329": 348, "02887365": 348, "027063": 348, "02738871": 348, "02662962": 348, "NOT": 348, "uniti": 348, "sloppi": 348, "deliber": 348, "m_ii": 348, "ji": 348, "jk": 348, "ki": 348, "einstein": 348, "ik": 348, "a_": 348, "b_": 348, "inner": [348, 351], "comma": 348, "il": 348, "kl": 348, "subvert": 348, "strict": 348, "mm_2ndorder": 348, "ma_undamp": 348, "ma_proport": 348, "ma_gener": 348, "But": 348, "psi_undamp": 348, "psi_proport": 348, "psi_gener": 348, "16839552": 348, "20937963j": 348, "7348689": 348, "68391729j": 348, "16635239": 348, "71568777j": 348, "60749708": 348, "75808733j": 348, "10439594": 348, "09881697j": 348, "00036437": 348, "07501753j": 348, "15358519": 348, "22327319j": 348, "46966805": 348, "92680586j": 348, "52944456": 348, "37788878j": 348, "orign": 348, "13061679e": 348, "34176433e": 348, "02j": 348, "43810774e": 348, "83528782e": 348, "06j": 348, "15410477e": 348, "13846966e": 348, "24812005e": 348, "65342888e": 348, "36140173e": 348, "88235958e": 348, "86118173e": 348, "33825843e": 348, "00014982": 348, "10829239j": 348, "00048468": 348, "01181488j": 348, "00045558": 348, "01005105j": 348, "00125664": 348, "1096167j": 348, "00020565": 348, "01561439j": 348, "00140645": 348, "10654111j": 348, "49635076e": 348, "45227499e": 348, "01j": 348, "15177460e": 348, "97517095e": 348, "03j": 348, "87975974e": 348, "36004490e": 348, "51087546e": 348, "09568400e": 348, "46495302e": 348, "79584080e": 348, "57583896e": 348, "19907950e": 348, "ourselv": 348, "2m_r": 348, "laplac": 348, "subsitut": 348, "ir": 348, "jr": 348, "sigma_r": 348, "psi_": 348, "naiv": [348, 350], "pose": 348, "omega_rm_r": 348, "remaind": 348, "omegas_bc": 348, "z_undamp": 348, "z_proport": 348, "z_gener": 348, "h_undamp": 348, "h_proport": 348, "h_gener": 348, "f_p": 348, "f_g": 348, "deg": 348, "zeta_2ndord": 348, "h_2ndorder_frommod": 348, "f_d": 348, "f_m": 348, "h_proportional_frommod": 348, "h_general_frommod": 348, "395": 348, "409": 348, "_l": 348, "_u": 348, "admitt": 348, "apolog": 348, "n_o": 348, "n_i": 348, "_o": 348, "beta_": 348, "alpha_r": 348, "alpha_": 348, "secret": 348, "fire": 348, "omega_0": 348, "omega_z": 348, "delta": 348, "f_0": 348, "f_": 348, "polynomni": 348, "beta_o": 348, "o0": 348, "o1": 348, "o2": 348, "op": 348, "partion": 348, "n_f": 348, "varepsilon_o": 348, "nl": 348, "w_o": 348, "ideal": 348, "mathrm": 348, "tr": 348, "bullet": 348, "e_o": 348, "cdot": 348, "omega_p": 348, "somehow": 348, "pw_o": 348, "alpha_0": 348, "alpha_1": 348, "alpha_p": 348, "kroneck": 348, "otim": 348, "he_o": 348, "e_1": 348, "e_2": 348, "e_": 348, "beta_1": 348, "beta_2": 348, "t_o": 348, "nbsphinx": 348, "aa": 348, "ba": 348, "n_ip": 348, "companion": 348, "whose": 348, "alpha_2": 348, "criteria": 348, "peform": 348, "frequency_lines_to_keep": 348, "nnum": 348, "778": 348, "overfit": 348, "deltat": 348, "elementwis": 348, "progress": [348, 350], "xo": 348, "yo": 348, "ho": 348, "xk": 348, "hk": 348, "kron": 348, "ro": 348, "_p": 348, "maa": 348, "mbb": 348, "c_top_left": 348, "c_top_right": 348, "c_bottom": 348, "zpole": 348, "spole": 348, "keep_pol": 348, "unshift": 348, "omega_general_fit": 348, "zeta_general_fit": 348, "lr": 348, "sort_indic": 348, "rescal": 348, "wm": 348, "wf": 348, "zm": 348, "lm": 348, "lf": 348, "check_index": 348, "check_angl": 348, "this_angl": 348, "check_magnitud": 348, "this_magnitud": 348, "04320045": 348, "04405838j": 348, "09857882": 348, "09838338j": 348, "04318693": 348, "04408044j": 348, "09857685": 348, "09838141j": 348, "06535574": 348, "06999465j": 348, "00185538": 348, "00185558j": 348, "06534612": 348, "06998435j": 348, "00118367": 348, "00286075j": 348, "06059005": 348, "05448316j": 348, "03373321": 348, "03429903j": 348, "06070207": 348, "05458388j": 348, "03320861": 348, "0344524j": 348, "lucki": 348, "priori": [348, 350], "scratch": 348, "tfarrai": 348, "pp": 348, "stabliz": 348, "cmif_axi": 348, "order_axi": 348, "pole_indic": 348, "pole_list": 348, "omega_general_stab": 348, "zeta_general_stab": 348, "lr_stab": 348, "lr_complex": 348, "inaccur": 348, "06059006": 348, "03373322": 348, "03429902j": 348, "ppgui": 348, "v_": 348, "l_": 348, "r_": 348, "lij": 348, "uij": 348, "ri": 348, "h_r": 348, "envis": 348, "somewhat": [348, 350], "contamin": 348, "i_": 348, "job": 348, "particp": 348, "rij": 348, "rii": 348, "scenario": 348, "r11": 348, "r22": 348, "1r": 348, "2r": 348, "BE": 348, "pm2": 348, "concret": 348, "themselv": 348, "p_modal": 348, "li": 348, "p_block": 348, "1556": 348, "h_l": 348, "squash": 348, "shapes_l": 348, "mulipli": 348, "reconstructed_frf": 348, "h_recon": 348, "nleast": 348, "psi_stab": 348, "kij": 348, "drive_indices_respons": 348, "drive_indices_input": 348, "drive_residu": 348, "my": 348, "comparis": 348, "carri": 348, "lr_scale": 348, "18452662": 348, "18416078j": 348, "08928666": 348, "0956242j": 348, "093857": 348, "08439714j": 348, "02160023": 348, "02202919j": 348, "03267784": 348, "03499731j": 348, "03029502": 348, "02724158j": 348, "04928941": 348, "04919169j": 348, "00092769": 348, "00092779j": 348, "01686661": 348, "01714951j": 348, "03267787": 348, "03499732j": 348, "03029503": 348, "0168666": 348, "psi_scal": 348, "70380647": 348, "72025259j": 348, "15973139": 348, "66778918j": 348, "88158134": 348, "30751768j": 348, "02159971": 348, "02202864j": 348, "03316166": 348, "03473379j": 348, "03033178": 348, "02722321j": 348, "04928856": 348, "04919178j": 348, "00094139": 348, "00090236j": 348, "0168663": 348, "01716533j": 348, "02186329": 348, "02176496j": 348, "03539605": 348, "03236945j": 348, "02735936": 348, "03018341j": 348, "02186239": 348, "02176446j": 348, "03496025": 348, "03263839j": 348, "02739619": 348, "03019566j": 348, "71501354": 348, "70963081j": 348, "2165319": 348, "58679996j": 348, "89109483": 348, "29733029j": 348, "saniti": 348, "psi_stab_norm": 348, "bad_indices_posit": 348, "bad_indices_smal": 348, "bad_indic": 348, "remaining_indic": 348, "shape_coeffici": 348, "residue_coeffici": 348, "mess": 348, "scale_vector": 348, "sign_vector": 348, "709418738512416": 348, "7149722671668157j": 348, "211812790651124": 348, "590252990269536j": 348, "886705065831037": 348, "299694143958719j": 348, "h_general_fromunnormmod": 348, "h_general_fromfitmod": 348, "h_general_fromfitresidu": 348, "f_t": 348, "f_r": 348, "unnorm": 348, "p_modal_w_residu": 348, "rl_block": 348, "ru_block": 348, "mode_indic": 348, "p_full": 348, "p_mode": 348, "p_residu": 348, "shapes_mod": 348, "shapes_residu": 348, "h_mode": 348, "h_residu": 348, "h_full": 348, "f_f": 348, "spent": 348, "alia": 350, "classic": 350, "academ": 350, "010": 350, "020": 350, "030": 350, "040": 350, "050": 350, "060": 350, "070": 350, "080": 350, "090": 350, "110": 350, "130": 350, "150": 350, "160": 350, "170": 350, "190": 350, "resum": 350, "mimg": 350, "dimg": 350, "simg": 350, "tight": 350, "timg": 350, "1rx": 350, "1ry": 350, "1rz": 350, "2z": 350, "2rx": 350, "2ry": 350, "2rz": 350, "3y": 350, "3z": 350, "3rx": 350, "3ry": 350, "3rz": 350, "4y": 350, "4z": 350, "4rx": 350, "4ry": 350, "4rz": 350, "5y": 350, "5z": 350, "5rx": 350, "5ry": 350, "5rz": 350, "6x": 350, "6y": 350, "6z": 350, "6rx": 350, "6ry": 350, "6rz": 350, "7x": 350, "7y": 350, "7z": 350, "7rx": 350, "7ry": 350, "7rz": 350, "8y": 350, "8z": 350, "8rx": 350, "8ry": 350, "8rz": 350, "9x": 350, "9y": 350, "9z": 350, "9rx": 350, "9ry": 350, "9rz": 350, "10y": 350, "10z": 350, "10rx": 350, "10ry": 350, "10rz": 350, "11x": 350, "11y": 350, "11z": 350, "11rx": 350, "11ry": 350, "11rz": 350, "12x": 350, "12y": 350, "12z": 350, "12rx": 350, "12ry": 350, "12rz": 350, "13x": 350, "13y": 350, "13z": 350, "13rx": 350, "13ry": 350, "13rz": 350, "14x": 350, "14y": 350, "14z": 350, "14rx": 350, "14ry": 350, "14rz": 350, "15x": 350, "15y": 350, "15z": 350, "15rx": 350, "15ry": 350, "15rz": 350, "16x": 350, "16y": 350, "16z": 350, "16rx": 350, "16ry": 350, "16rz": 350, "17x": 350, "17y": 350, "17z": 350, "17rx": 350, "17ry": 350, "17rz": 350, "18x": 350, "18y": 350, "18z": 350, "18rx": 350, "18ry": 350, "18rz": 350, "19x": 350, "19y": 350, "19z": 350, "19rx": 350, "19ry": 350, "19rz": 350, "20x": 350, "20y": 350, "20z": 350, "20rx": 350, "20ry": 350, "20rz": 350, "21x": 350, "21y": 350, "21z": 350, "21rx": 350, "21ry": 350, "21rz": 350, "0153": 350, "648": 350, "5603": 350, "1297": 350, "1207": 350, "1787": 350, "8068": 350, "3504": 350, "9762": 350, "3575": 350, "6135": 350, "intut": 350, "action": 350, "toggl": 350, "perspect": 350, "hidden": 350, "unintend": 350, "unintention": 350, "treatment": 350, "ramif": 350, "first_shap": 350, "becam": 350, "indexed_shap": 350, "indexed_frequ": 350, "overwritten": 350, "redefinit": 350, "reassign": 350, "ten": 350, "logical_arrai": 350, "redefin": 350, "afterward": 350, "interpret": 350, "unus": 350, "unmodifi": 350, "integer_arrai": 350, "propog": 350, "why": 350, "impos": 350, "burst_random": 350, "signal_bandwidth": 350, "total_sampl": 350, "rms_level": 350, "num_sign": 350, "transvers": 350, "excitation_dof": 350, "8000": 350, "80000": 350, "suffici": 350, "60000": 350, "unsatisfactori": 350, "sdynpy_data": 350, "0xxxxxxxxxxxx": 350, "nonetheless": 350, "valuabl": 350, "003": 350, "forth": 350, "cursor": 350, "plan": 350, "revers": 350, "frfs_system": 350, "frfs_modal_system": 350, "frfs_shape": 350, "frfs_time": 350, "drive_frfs_system": 350, "drive_frfs_modal_system": 350, "drive_frfs_shap": 350, "drive_frfs_tim": 350, "all_time_data": 350, "han": 350, "functino": 350, "frfs_signalprocessinggui": 350, "frfs_spgui": 350, "deflectionshapeplott": 350, "viewer": 350, "matur": 350, "promin": 350, "whatev": 350, "delet": 350, "recomput": 350, "contaimin": 350, "uncheck": 350, "2340": 350, "pure": 350, "synthet": 350, "2200": 350, "stabilizi": 350, "2265": 350, "2076": 350, "strong": 350, "polish": 350, "simlar": 350, "ofth": 350, "stage": 350, "260": 350, "guess": 350, "rootlist": 350, "confirm": 350, "tighten": 350, "loosen": 350, "likewis": 350, "dialog": 350, "unintut": 350, "essenc": 350, "lighter": 350, "fifth": 350, "3550": 350, "3600": 350, "swath": 350, "998": 350, "487": 350, "pin": 350, "rough": 350, "shapes_smac": 350, "mac_polypi": 350, "mac_smac": 350, "tabul": 350, "polypy_correspond": 350, "smac_correspond": 350, "decim": 350, "024": 350, "064": 350, "1296": 350, "014": 350, "307": 350, "008": 350, "028": 350, "3505": 350, "672": 350, "3576": 350, "198": 350, "564": 350, "overlaid_geometri": 350, "overlaid_shap": 350, "system_2": 350, "node_id_offset": 350, "damped_system": 350, "damped_system_2": 350, "combined_frf": 350, "211z": 350, "coincid": 350, "constrained_geometri": 350, "186": 350, "interface_dof": 350, "unconstrain": 350, "201ry": 350, "201rx": 350, "201rz": 350, "constrained_frf_ss": 350, "book": 350, "compare_coordin": 350, "constrained_frf_compar": 350, "pip": 351, "analy": 351, "23rz": 351, "1858": 351, "2400": 351, "uff_dict": 351, "readuff": 351, "vic": 351, "read_vic3d_mat_fil": 351, "glob": 351, "suitabl": 351, "beamkm_2d": 351, "electro": 351, "routin": 351, "microsoft": 351, "geometry_fit": 351, "frf_invers": 351}, "objects": {"": [[0, 0, 0, "-", "sdynpy"]], "sdynpy": [[1, 0, 0, "-", "core"], [93, 0, 0, "-", "demo"], [98, 0, 0, "-", "doc"], [113, 0, 0, "-", "fem"], [132, 0, 0, "-", "fileio"], [192, 0, 0, "-", "modal"], [220, 0, 0, "-", "signal_processing"]], "sdynpy.core": [[2, 0, 0, "-", "sdynpy_array"], [4, 0, 0, "-", "sdynpy_colors"], [5, 0, 0, "-", "sdynpy_coordinate"], [13, 0, 0, "-", "sdynpy_data"], [46, 0, 0, "-", "sdynpy_geometry"], [72, 0, 0, "-", "sdynpy_matrix"], [75, 0, 0, "-", "sdynpy_shape"], [90, 0, 0, "-", "sdynpy_system"]], "sdynpy.core.sdynpy_array": [[3, 1, 1, "", "SdynpyArray"]], "sdynpy.core.sdynpy_array.SdynpyArray": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "assemble_mat_dict"], [3, 3, 1, "", "fields"], [3, 2, 1, "", "load"], [3, 2, 1, "", "ndenumerate"], [3, 2, 1, "", "save"], [3, 2, 1, "", "savemat"]], "sdynpy.core.sdynpy_coordinate": [[6, 1, 1, "", "CoordinateArray"], [7, 5, 1, "", "coordinate_array"], [8, 5, 1, "", "create_coordinate_string"], [9, 5, 1, "", "from_matlab_cellstr"], [10, 5, 1, "", "from_nodelist"], [11, 5, 1, "", "outer_product"], [12, 5, 1, "", "parse_coordinate_string"]], "sdynpy.core.sdynpy_coordinate.CoordinateArray": [[6, 2, 1, "", "__init__"], [6, 2, 1, "", "abs"], [6, 4, 1, "", "data_dtype"], [6, 2, 1, "", "direction_string_array"], [6, 2, 1, "", "from_matlab_cellstr"], [6, 2, 1, "", "from_nodelist"], [6, 2, 1, "", "local_direction"], [6, 2, 1, "", "offset_node_ids"], [6, 2, 1, "", "sign"], [6, 2, 1, "", "string_array"]], "sdynpy.core.sdynpy_data": [[14, 1, 1, "", "AbscissaIndexExtractor"], [15, 1, 1, "", "AbscissaValueExtractor"], [16, 1, 1, "", "CPSDPlot"], [17, 1, 1, "", "CoherenceArray"], [18, 1, 1, "", "ComplexType"], [19, 1, 1, "", "CorrelationArray"], [20, 1, 1, "", "DecayedSineTable"], [21, 1, 1, "", "FunctionTypes"], [22, 1, 1, "", "GUIPlot"], [23, 1, 1, "", "ImpulseResponseFunctionArray"], [24, 1, 1, "", "MPLCanvas"], [25, 1, 1, "", "MPLMultiCanvas"], [26, 1, 1, "", "ModeIndicatorFunctionArray"], [27, 1, 1, "", "MultipleCoherenceArray"], [28, 1, 1, "", "NDDataArray"], [29, 1, 1, "", "PowerSpectralDensityArray"], [30, 1, 1, "", "PowerSpectrumArray"], [31, 1, 1, "", "ShockResponseSpectrumArray"], [32, 1, 1, "", "SpecificDataType"], [33, 1, 1, "", "SpectrumArray"], [34, 1, 1, "", "TimeHistoryArray"], [35, 1, 1, "", "TransferFunctionArray"], [36, 1, 1, "", "TransmissibilityArray"], [37, 1, 1, "", "TypeQual"], [38, 5, 1, "", "data_array"], [39, 5, 1, "", "decayed_sine_table"], [40, 5, 1, "", "frf_from_time_data"], [41, 5, 1, "", "from_imat_struct"], [42, 5, 1, "", "from_uff"], [43, 5, 1, "", "from_unv"], [44, 5, 1, "", "join"], [45, 5, 1, "", "load"]], "sdynpy.core.sdynpy_data.AbscissaIndexExtractor": [[14, 2, 1, "", "__init__"]], "sdynpy.core.sdynpy_data.AbscissaValueExtractor": [[15, 2, 1, "", "__init__"]], "sdynpy.core.sdynpy_data.CPSDPlot": [[16, 1, 1, "", "DataType"], [16, 2, 1, "", "__init__"], [16, 2, 1, "", "clear_selection"], [16, 2, 1, "", "coherence_state"], [16, 2, 1, "", "connectUI"], [16, 2, 1, "", "deselect_diagonal"], [16, 2, 1, "", "deselect_lower_triangular"], [16, 2, 1, "", "deselect_upper_triangular"], [16, 2, 1, "", "extend_selection_matrix"], [16, 2, 1, "", "find_function_types"], [16, 2, 1, "", "imaginary_state"], [16, 2, 1, "", "initUI"], [16, 2, 1, "", "init_matrix_plot"], [16, 2, 1, "", "invert_selection"], [16, 2, 1, "", "magnitude_state"], [16, 2, 1, "", "phase_state"], [16, 2, 1, "", "plot"], [16, 2, 1, "", "plot_selected_function"], [16, 2, 1, "", "real_state"], [16, 2, 1, "", "select_diagonal"], [16, 2, 1, "", "select_lower_triangular"], [16, 2, 1, "", "select_plotted"], [16, 2, 1, "", "select_upper_triangular"], [16, 2, 1, "", "selector_click"], [16, 2, 1, "", "selector_unclick"], [16, 2, 1, "", "settext"], [16, 2, 1, "", "state_changed"], [16, 2, 1, "", "update_selection"]], "sdynpy.core.sdynpy_data.CPSDPlot.DataType": [[16, 4, 1, "", "COHERENCE"], [16, 4, 1, "", "IMAGINARY"], [16, 4, 1, "", "MAGNITUDE"], [16, 4, 1, "", "PHASE"], [16, 4, 1, "", "REAL"]], "sdynpy.core.sdynpy_data.CoherenceArray": [[17, 2, 1, "", "__init__"], [17, 2, 1, "", "from_time_data"], [17, 3, 1, "", "function_type"]], "sdynpy.core.sdynpy_data.ComplexType": [[18, 4, 1, "", "IMAGINARY"], [18, 4, 1, "", "MAGNITUDE"], [18, 4, 1, "", "MAGPHASE"], [18, 4, 1, "", "PHASE"], [18, 4, 1, "", "REAL"], [18, 4, 1, "", "REALIMAG"], [18, 2, 1, "", "__init__"]], "sdynpy.core.sdynpy_data.CorrelationArray": [[19, 2, 1, "", "__init__"], [19, 3, 1, "", "function_type"]], "sdynpy.core.sdynpy_data.DecayedSineTable": [[20, 2, 1, "", "__init__"], [20, 2, 1, "", "construct_displacement"], [20, 2, 1, "", "construct_signal"], [20, 2, 1, "", "construct_velocity"]], "sdynpy.core.sdynpy_data.FunctionTypes": [[21, 4, 1, "", "AUTOCORRELATION"], [21, 4, 1, "", "AUTOSPECTRUM"], [21, 4, 1, "", "COHERENCE"], [21, 4, 1, "", "CROSSCORRELATION"], [21, 4, 1, "", "CROSSSPECTRUM"], [21, 4, 1, "", "CUMULATIVE_FREQUENCY_DISTRIBUTION"], [21, 4, 1, "", "EIGENVALUE"], [21, 4, 1, "", "EIGENVECTOR"], [21, 4, 1, "", "ENERGY_SPECTRAL_DENSITY"], [21, 4, 1, "", "FINITE_IMPULSE_RESPONSE_FILTER"], [21, 4, 1, "", "FORCE_PATTERN"], [21, 4, 1, "", "FREQUENCY_RESPONSE_FUNCTION"], [21, 4, 1, "", "GENERAL"], [21, 4, 1, "", "IMPULSE_RESPONSE_FUNCTION"], [21, 4, 1, "", "MODE_INDICATOR_FUNCTION"], [21, 4, 1, "", "MULTIPLE_COHERENCE"], [21, 4, 1, "", "ORBIT"], [21, 4, 1, "", "ORDER_FUNCTION"], [21, 4, 1, "", "PARTIAL_COHERENCE"], [21, 4, 1, "", "PARTIAL_POWER"], [21, 4, 1, "", "PEAKS_VALLEY"], [21, 4, 1, "", "PHASE_COMPENSATION"], [21, 4, 1, "", "POWER_SPECTRAL_DENSITY"], [21, 4, 1, "", "PROBABILITY_DENSITY_FUNCTION"], [21, 4, 1, "", "SHOCK_RESPONSE_SPECTRUM"], [21, 4, 1, "", "SPECTRUM"], [21, 4, 1, "", "STRAIN_PER_CYCLE"], [21, 4, 1, "", "STRESS_PER_CYCLE"], [21, 4, 1, "", "TIME_RESPONSE"], [21, 4, 1, "", "TRANSMISIBILITY"], [21, 2, 1, "", "__init__"]], "sdynpy.core.sdynpy_data.GUIPlot": [[22, 2, 1, "", "__init__"], [22, 2, 1, "", "connect_callbacks"], [22, 2, 1, "", "deselect_all_complex_types_except"], [22, 2, 1, "", "selection_changed"], [22, 2, 1, "", "set_imaginary"], [22, 2, 1, "", "set_magnitude"], [22, 2, 1, "", "set_magnitude_phase"], [22, 2, 1, "", "set_phase"], [22, 2, 1, "", "set_real"], [22, 2, 1, "", "set_real_imag"], [22, 2, 1, "", "update"], [22, 2, 1, "", "update_abscissa_log"], [22, 2, 1, "", "update_checkbox"], [22, 2, 1, "", "update_data"], [22, 2, 1, "", "update_ordinate_log"]], "sdynpy.core.sdynpy_data.ImpulseResponseFunctionArray": [[23, 2, 1, "", "__init__"], [23, 2, 1, "", "enforce_causality"], [23, 2, 1, "", "fft"], [23, 2, 1, "", "find_end_of_ringdown"], [23, 3, 1, "", "function_type"]], "sdynpy.core.sdynpy_data.MPLCanvas": [[24, 2, 1, "", "__init__"]], "sdynpy.core.sdynpy_data.MPLMultiCanvas": [[25, 2, 1, "", "__init__"]], "sdynpy.core.sdynpy_data.ModeIndicatorFunctionArray": [[26, 2, 1, "", "__init__"], [26, 3, 1, "", "function_type"]], "sdynpy.core.sdynpy_data.MultipleCoherenceArray": [[27, 2, 1, "", "__init__"], [27, 2, 1, "", "from_time_data"], [27, 3, 1, "", "function_type"]], "sdynpy.core.sdynpy_data.NDDataArray": [[28, 2, 1, "", "__init__"], [28, 3, 1, "", "abscissa_spacing"], [28, 2, 1, "", "argmax"], [28, 2, 1, "", "argmin"], [28, 3, 1, "", "data_dimension"], [28, 2, 1, "", "downsample"], [28, 2, 1, "", "extract_elements"], [28, 2, 1, "", "extract_elements_by_abscissa"], [28, 2, 1, "", "from_uff"], [28, 2, 1, "", "from_unv"], [28, 3, 1, "", "function_type"], [28, 2, 1, "", "get_drive_points"], [28, 2, 1, "", "get_reciprocal_data"], [28, 3, 1, "", "idx_by_ab"], [28, 3, 1, "", "idx_by_el"], [28, 2, 1, "", "interpolate"], [28, 2, 1, "", "join"], [28, 2, 1, "", "load"], [28, 2, 1, "", "max"], [28, 2, 1, "", "min"], [28, 3, 1, "", "num_coordinates"], [28, 3, 1, "", "num_elements"], [28, 2, 1, "", "plot"], [28, 2, 1, "", "plot_image"], [28, 3, 1, "", "reference_coordinate"], [28, 2, 1, "", "reshape_to_matrix"], [28, 3, 1, "", "response_coordinate"], [28, 2, 1, "", "save"], [28, 2, 1, "", "to_imat_struct"], [28, 2, 1, "", "to_imat_struct_array"], [28, 2, 1, "", "to_shape_array"], [28, 2, 1, "", "transform_coordinate_system"], [28, 2, 1, "", "validate_common_abscissa"], [28, 2, 1, "", "zero_pad"]], "sdynpy.core.sdynpy_data.PowerSpectralDensityArray": [[29, 2, 1, "", "__init__"], [29, 2, 1, "", "angle"], [29, 2, 1, "", "bandwidth_average"], [29, 2, 1, "", "coherence"], [29, 2, 1, "", "compare_asds"], [29, 2, 1, "", "error_summary"], [29, 2, 1, "", "eye"], [29, 2, 1, "", "from_time_data"], [29, 3, 1, "", "function_type"], [29, 2, 1, "", "generate_time_history"], [29, 2, 1, "", "get_asd"], [29, 2, 1, "", "mimo_forward"], [29, 2, 1, "", "mimo_inverse"], [29, 2, 1, "", "plot_asds"], [29, 2, 1, "", "plot_magnitude_coherence_phase"], [29, 2, 1, "", "plot_singular_values"], [29, 2, 1, "", "rms"], [29, 2, 1, "", "set_coherence_phase"], [29, 2, 1, "", "svd"], [29, 2, 1, "", "to_rattlesnake_specification"]], "sdynpy.core.sdynpy_data.PowerSpectrumArray": [[30, 2, 1, "", "__init__"], [30, 3, 1, "", "function_type"]], "sdynpy.core.sdynpy_data.ShockResponseSpectrumArray": [[31, 2, 1, "", "__init__"], [31, 3, 1, "", "function_type"], [31, 2, 1, "", "plot"], [31, 2, 1, "", "sum_decayed_sines"]], "sdynpy.core.sdynpy_data.SpecificDataType": [[32, 4, 1, "", "ACCELERATION"], [32, 4, 1, "", "DISPLACEMENT"], [32, 4, 1, "", "EXCITATION_FORCE"], [32, 4, 1, "", "FREQUENCY"], [32, 4, 1, "", "GENERAL"], [32, 4, 1, "", "HEAT_FLUX"], [32, 4, 1, "", "MASS"], [32, 4, 1, "", "ORDER"], [32, 4, 1, "", "PRESSURE"], [32, 4, 1, "", "REACTION_FORCE"], [32, 4, 1, "", "RPM"], [32, 4, 1, "", "SOUND_INTENSITY"], [32, 4, 1, "", "SOUND_POWER"], [32, 4, 1, "", "SOUND_PRESSURE"], [32, 4, 1, "", "STRAIN"], [32, 4, 1, "", "STRESS"], [32, 4, 1, "", "TEMPERATURE"], [32, 4, 1, "", "TIME"], [32, 4, 1, "", "UNKNOWN"], [32, 4, 1, "", "VELOCITY"], [32, 2, 1, "", "__init__"]], "sdynpy.core.sdynpy_data.SpectrumArray": [[33, 2, 1, "", "__init__"], [33, 3, 1, "", "function_type"], [33, 2, 1, "", "ifft"], [33, 2, 1, "", "interpolate_by_zero_pad"], [33, 2, 1, "", "plot"], [33, 2, 1, "", "plot_spectrogram"]], "sdynpy.core.sdynpy_data.TimeHistoryArray": [[34, 2, 1, "", "__init__"], [34, 2, 1, "", "burst_random_signal"], [34, 2, 1, "", "chirp_signal"], [34, 2, 1, "", "cpsd"], [34, 2, 1, "", "fft"], [34, 2, 1, "", "find_signal_shift"], [34, 2, 1, "", "from_exodus"], [34, 3, 1, "", "function_type"], [34, 2, 1, "", "haversine_signal"], [34, 2, 1, "", "mimo_forward"], [34, 2, 1, "", "mimo_inverse"], [34, 2, 1, "", "overlap_and_add"], [34, 2, 1, "", "pseudorandom_signal"], [34, 2, 1, "", "pulse_signal"], [34, 2, 1, "", "random_signal"], [34, 2, 1, "", "remove_rigid_body_motion"], [34, 2, 1, "", "rms"], [34, 2, 1, "", "shift_signal"], [34, 2, 1, "", "sine_signal"], [34, 2, 1, "", "sine_sweep_signal"], [34, 2, 1, "", "split_into_frames"], [34, 2, 1, "", "srs"], [34, 2, 1, "", "stft"], [34, 2, 1, "", "to_rattlesnake_specification"]], "sdynpy.core.sdynpy_data.TransferFunctionArray": [[35, 2, 1, "", "__init__"], [35, 2, 1, "", "compute_cmif"], [35, 2, 1, "", "compute_mif"], [35, 2, 1, "", "compute_mmif"], [35, 2, 1, "", "compute_nmif"], [35, 2, 1, "", "delay_response"], [35, 2, 1, "", "enforce_causality"], [35, 2, 1, "", "from_time_data"], [35, 3, 1, "", "function_type"], [35, 2, 1, "", "ifft"], [35, 2, 1, "", "interpolate_by_zero_pad"], [35, 2, 1, "", "plot"], [35, 2, 1, "", "plot_cond_num"], [35, 2, 1, "", "plot_singular_values"], [35, 2, 1, "", "plot_with_coherence"], [35, 2, 1, "", "substructure_by_constraint_matrix"], [35, 2, 1, "", "substructure_by_coordinate"], [35, 2, 1, "", "svd"]], "sdynpy.core.sdynpy_data.TransmissibilityArray": [[36, 2, 1, "", "__init__"], [36, 3, 1, "", "function_type"]], "sdynpy.core.sdynpy_data.TypeQual": [[37, 4, 1, "", "ROTATION"], [37, 4, 1, "", "TRANSLATION"], [37, 2, 1, "", "__init__"]], "sdynpy.core.sdynpy_geometry": [[47, 1, 1, "", "CoordinateSystemArray"], [48, 1, 1, "", "DeflectionShapePlotter"], [49, 1, 1, "", "ElementArray"], [50, 1, 1, "", "Geometry"], [51, 1, 1, "", "GeometryPlotter"], [52, 1, 1, "", "NodeArray"], [53, 1, 1, "", "ShapePlotter"], [54, 1, 1, "", "TracelineArray"], [55, 1, 1, "", "TransientPlotter"], [56, 5, 1, "", "coordinate_system_array"], [57, 5, 1, "", "element_array"], [58, 5, 1, "", "from_excel_template"], [59, 5, 1, "", "from_exodus"], [60, 5, 1, "", "from_imat_struct"], [61, 5, 1, "", "from_uff"], [62, 5, 1, "", "from_unv"], [63, 5, 1, "", "global_coord"], [64, 5, 1, "", "global_deflection"], [65, 1, 1, "", "id_map"], [66, 5, 1, "", "load"], [67, 5, 1, "", "local_coord"], [68, 5, 1, "", "node_array"], [69, 5, 1, "", "split_list"], [70, 5, 1, "", "traceline_array"], [71, 5, 1, "", "write_excel_template"]], "sdynpy.core.sdynpy_geometry.CoordinateSystemArray": [[47, 2, 1, "", "__init__"], [47, 4, 1, "", "data_dtype"], [47, 2, 1, "", "from_unv"]], "sdynpy.core.sdynpy_geometry.DeflectionShapePlotter": [[48, 2, 1, "", "__init__"], [48, 2, 1, "", "modify_abscissa"], [48, 2, 1, "", "save_multiline_animation"]], "sdynpy.core.sdynpy_geometry.ElementArray": [[49, 2, 1, "", "__init__"], [49, 4, 1, "", "data_dtype"], [49, 2, 1, "", "from_unv"], [49, 2, 1, "", "reduce"]], "sdynpy.core.sdynpy_geometry.Geometry": [[50, 2, 1, "", "__init__"], [50, 2, 1, "", "add_element"], [50, 2, 1, "", "add_traceline"], [50, 2, 1, "", "camera_visualization"], [50, 2, 1, "", "compress_ids"], [50, 2, 1, "", "copy"], [50, 2, 1, "", "from_excel_template"], [50, 2, 1, "", "from_exodus"], [50, 2, 1, "", "from_imat_struct"], [50, 2, 1, "", "from_uff"], [50, 2, 1, "", "from_unv"], [50, 2, 1, "", "global_deflection"], [50, 2, 1, "", "global_node_coordinate"], [50, 2, 1, "", "load"], [50, 2, 1, "", "map_ids"], [50, 2, 1, "", "modify_ids"], [50, 2, 1, "", "node_by_global_position"], [50, 2, 1, "", "overlay_geometries"], [50, 2, 1, "", "plot"], [50, 2, 1, "", "plot_coordinate"], [50, 2, 1, "", "plot_deflection_shape"], [50, 2, 1, "", "plot_shape"], [50, 2, 1, "", "plot_transient"], [50, 2, 1, "", "reduce"], [50, 2, 1, "", "rigid_body_shapes"], [50, 2, 1, "", "save"], [50, 2, 1, "", "write_excel_template"], [50, 2, 1, "", "write_to_unv"]], "sdynpy.core.sdynpy_geometry.GeometryPlotter": [[51, 2, 1, "", "__init__"], [51, 2, 1, "", "save_rotation_animation"]], "sdynpy.core.sdynpy_geometry.NodeArray": [[52, 2, 1, "", "__init__"], [52, 2, 1, "", "by_grid"], [52, 2, 1, "", "by_position"], [52, 4, 1, "", "data_dtype"], [52, 2, 1, "", "from_unv"], [52, 2, 1, "", "global_coordinate"], [52, 2, 1, "", "project_to_minimum_plane"], [52, 2, 1, "", "reduce"], [52, 2, 1, "", "triangulate"]], "sdynpy.core.sdynpy_geometry.ShapePlotter": [[53, 2, 1, "", "__init__"], [53, 2, 1, "", "add_menu_bar"], [53, 2, 1, "", "add_toolbars"], [53, 2, 1, "", "compute_displacements"], [53, 2, 1, "", "next_shape"], [53, 2, 1, "", "play_animation"], [53, 2, 1, "", "prev_shape"], [53, 2, 1, "", "reset_shape"], [53, 2, 1, "", "save_animation"], [53, 2, 1, "", "save_animation_all_shapes"], [53, 2, 1, "", "save_animation_from_action"], [53, 2, 1, "", "select_complex"], [53, 2, 1, "", "select_loop"], [53, 2, 1, "", "select_scaling_0p25"], [53, 2, 1, "", "select_scaling_0p5"], [53, 2, 1, "", "select_scaling_0p8"], [53, 2, 1, "", "select_scaling_1"], [53, 2, 1, "", "select_scaling_1p25"], [53, 2, 1, "", "select_scaling_2p0"], [53, 2, 1, "", "select_scaling_4p0"], [53, 2, 1, "", "select_shape"], [53, 2, 1, "", "select_speed_0p8"], [53, 2, 1, "", "select_speed_1"], [53, 2, 1, "", "select_speed_1p25"], [53, 2, 1, "", "show_comment"], [53, 2, 1, "", "stop_animation"], [53, 2, 1, "", "toggle_undeformed"], [53, 2, 1, "", "update_shape"], [53, 2, 1, "", "update_shape_mode"]], "sdynpy.core.sdynpy_geometry.TracelineArray": [[54, 2, 1, "", "__init__"], [54, 4, 1, "", "data_dtype"], [54, 2, 1, "", "from_unv"], [54, 2, 1, "", "reduce"]], "sdynpy.core.sdynpy_geometry.TransientPlotter": [[55, 2, 1, "", "__init__"], [55, 2, 1, "", "add_menu_bar"], [55, 2, 1, "", "add_toolbars"], [55, 2, 1, "", "go_to_first_step"], [55, 2, 1, "", "go_to_last_step"], [55, 2, 1, "", "go_to_next_step"], [55, 2, 1, "", "go_to_previous_step"], [55, 2, 1, "", "modify_abscissa"], [55, 2, 1, "", "play_animation"], [55, 2, 1, "", "play_animation_reverse"], [55, 2, 1, "", "save_animation"], [55, 2, 1, "", "select_scaling_0p25"], [55, 2, 1, "", "select_scaling_0p5"], [55, 2, 1, "", "select_scaling_0p8"], [55, 2, 1, "", "select_scaling_1"], [55, 2, 1, "", "select_scaling_1p25"], [55, 2, 1, "", "select_scaling_2p0"], [55, 2, 1, "", "select_scaling_4p0"], [55, 2, 1, "", "select_speed_0p8"], [55, 2, 1, "", "select_speed_1"], [55, 2, 1, "", "select_speed_1p25"], [55, 2, 1, "", "stop_animation"], [55, 2, 1, "", "update_abscissa"], [55, 2, 1, "", "update_abscissa_reverse"], [55, 2, 1, "", "update_displacement"]], "sdynpy.core.sdynpy_geometry.id_map": [[65, 2, 1, "", "__init__"]], "sdynpy.core.sdynpy_matrix": [[73, 1, 1, "", "Matrix"], [74, 5, 1, "", "matrix"]], "sdynpy.core.sdynpy_matrix.Matrix": [[73, 2, 1, "", "__init__"], [73, 2, 1, "", "argsort_coordinate"], [73, 3, 1, "", "coordinate"], [73, 2, 1, "", "data_dtype"], [73, 2, 1, "", "eye"], [73, 3, 1, "", "num_coordinate_columns"], [73, 3, 1, "", "num_coordinate_rows"], [73, 2, 1, "", "plot"], [73, 2, 1, "", "sort_coordinate"]], "sdynpy.core.sdynpy_shape": [[76, 1, 1, "", "ShapeArray"], [77, 1, 1, "", "ShapeCommentTable"], [78, 5, 1, "", "concatenate_dofs"], [79, 5, 1, "", "from_exodus"], [80, 5, 1, "", "from_imat_struct"], [81, 5, 1, "", "from_unv"], [82, 5, 1, "", "mac"], [83, 5, 1, "", "overlay_shapes"], [84, 5, 1, "", "rigid_body_check"], [85, 5, 1, "", "rigid_body_error"], [86, 5, 1, "", "rigid_body_fix_node_orientation"], [87, 5, 1, "", "shape_alignment"], [88, 5, 1, "", "shape_array"], [89, 5, 1, "", "shape_comparison_table"]], "sdynpy.core.sdynpy_shape.ShapeArray": [[76, 2, 1, "", "__init__"], [76, 2, 1, "", "complex_data_dtype"], [76, 2, 1, "", "compute_frf"], [76, 2, 1, "", "concatenate_dofs"], [76, 2, 1, "", "edit_comments"], [76, 2, 1, "", "expand"], [76, 2, 1, "", "from_exodus"], [76, 2, 1, "", "from_imat_struct"], [76, 2, 1, "", "from_uff"], [76, 2, 1, "", "from_unv"], [76, 2, 1, "", "is_complex"], [76, 2, 1, "", "mode_table"], [76, 3, 1, "", "modeshape"], [76, 3, 1, "", "ndof"], [76, 2, 1, "", "normalize"], [76, 2, 1, "", "optimize_degrees_of_freedom"], [76, 2, 1, "", "overlay_shapes"], [76, 2, 1, "", "plot_frequency"], [76, 2, 1, "", "real_data_dtype"], [76, 2, 1, "", "reduce"], [76, 2, 1, "", "reduce_for_comparison"], [76, 2, 1, "", "repack"], [76, 2, 1, "", "shape_alignment"], [76, 2, 1, "", "system"], [76, 2, 1, "", "time_integrate"], [76, 2, 1, "", "to_complex"], [76, 2, 1, "", "to_real"], [76, 2, 1, "", "transform_coordinate_system"], [76, 2, 1, "", "write_to_unv"]], "sdynpy.core.sdynpy_shape.ShapeCommentTable": [[77, 2, 1, "", "__init__"], [77, 2, 1, "", "accept"], [77, 2, 1, "", "update_mode"]], "sdynpy.core.sdynpy_system": [[91, 1, 1, "", "System"], [92, 5, 1, "", "substructure_by_position"]], "sdynpy.core.sdynpy_system.System": [[91, 3, 1, "", "C"], [91, 3, 1, "", "K"], [91, 3, 1, "", "M"], [91, 2, 1, "", "__init__"], [91, 2, 1, "", "assign_modal_damping"], [91, 2, 1, "", "beam"], [91, 2, 1, "", "concatenate"], [91, 2, 1, "", "constrain"], [91, 3, 1, "", "coordinate"], [91, 2, 1, "", "copy"], [91, 3, 1, "", "damping"], [91, 2, 1, "", "eigensolution"], [91, 2, 1, "", "frequency_response"], [91, 2, 1, "", "from_exodus_superelement"], [91, 2, 1, "", "get_indices_by_coordinate"], [91, 2, 1, "", "load"], [91, 3, 1, "", "mass"], [91, 3, 1, "", "ndof"], [91, 3, 1, "", "ndof_transformed"], [91, 2, 1, "", "reduce"], [91, 2, 1, "", "reduce_craig_bampton"], [91, 2, 1, "", "reduce_dynamic"], [91, 2, 1, "", "reduce_guyan"], [91, 2, 1, "", "remove_transformation"], [91, 2, 1, "", "save"], [91, 2, 1, "", "set_proportional_damping"], [91, 2, 1, "", "simulate_test"], [91, 2, 1, "", "spy"], [91, 3, 1, "", "stiffness"], [91, 2, 1, "", "substructure_by_coordinate"], [91, 2, 1, "", "substructure_by_position"], [91, 2, 1, "", "substructure_by_shape"], [91, 2, 1, "", "time_integrate"], [91, 2, 1, "", "to_state_space"], [91, 3, 1, "", "transformation"], [91, 2, 1, "", "transformation_matrix_at_coordinates"], [91, 2, 1, "", "transformation_shapes"]], "sdynpy.demo": [[94, 0, 0, "-", "beam_airplane"], [96, 0, 0, "-", "beam_plate"]], "sdynpy.demo.beam_airplane": [[95, 5, 1, "", "create_models"]], "sdynpy.demo.beam_plate": [[97, 5, 1, "", "create_models"]], "sdynpy.doc": [[99, 0, 0, "-", "sdynpy_latex"], [103, 0, 0, "-", "sdynpy_ppt"]], "sdynpy.doc.sdynpy_latex": [[100, 5, 1, "", "create_latex_summary"], [101, 5, 1, "", "figure"], [102, 5, 1, "", "table"]], "sdynpy.doc.sdynpy_ppt": [[104, 5, 1, "", "add_geometry_overview_slide"], [105, 5, 1, "", "add_section_header_slide"], [106, 5, 1, "", "add_shape_animation_slides"], [107, 5, 1, "", "add_shape_comparison_animation_slides"], [108, 5, 1, "", "add_shape_comparison_overview_slide"], [109, 5, 1, "", "add_shape_overview_slide"], [110, 5, 1, "", "add_title_slide"], [111, 5, 1, "", "create_summary_pptx"], [112, 5, 1, "", "position_placeholder"]], "sdynpy.fem": [[114, 0, 0, "-", "sdynpy_beam"], [118, 0, 0, "-", "sdynpy_dof"], [121, 0, 0, "-", "sdynpy_exodus"], [130, 0, 0, "-", "sdynpy_shaker"]], "sdynpy.fem.sdynpy_beam": [[115, 5, 1, "", "beamkm"], [116, 5, 1, "", "beamkm_2d"], [117, 5, 1, "", "rect_beam_props"]], "sdynpy.fem.sdynpy_dof": [[119, 5, 1, "", "by_condition_number"], [120, 5, 1, "", "by_effective_independence"]], "sdynpy.fem.sdynpy_exodus": [[122, 1, 1, "", "Exodus"], [123, 6, 1, "", "ExodusError"], [124, 1, 1, "", "ExodusInMemory"], [125, 5, 1, "", "extract_sharp_edges"], [126, 5, 1, "", "face_connectivity"], [127, 5, 1, "", "mesh_triangulation_array"], [128, 5, 1, "", "reduce_exodus_to_surfaces"], [129, 1, 1, "", "subfield"]], "sdynpy.fem.sdynpy_exodus.Exodus": [[122, 2, 1, "", "__init__"], [122, 2, 1, "", "close"], [122, 2, 1, "", "extract_sharp_edges"], [122, 2, 1, "", "get_block_surface"], [122, 2, 1, "", "get_coord"], [122, 2, 1, "", "get_coord_names"], [122, 2, 1, "", "get_coords"], [122, 2, 1, "", "get_displacements"], [122, 2, 1, "", "get_elem_attr"], [122, 2, 1, "", "get_elem_blk_ids"], [122, 2, 1, "", "get_elem_blk_info"], [122, 2, 1, "", "get_elem_connectivity"], [122, 2, 1, "", "get_elem_num_map"], [122, 2, 1, "", "get_elem_type"], [122, 2, 1, "", "get_elem_variable_names"], [122, 2, 1, "", "get_elem_variable_table"], [122, 2, 1, "", "get_elem_variable_value"], [122, 2, 1, "", "get_elem_variable_values"], [122, 2, 1, "", "get_element_property_names"], [122, 2, 1, "", "get_element_property_value"], [122, 2, 1, "", "get_global_variable_names"], [122, 2, 1, "", "get_global_variable_values"], [122, 2, 1, "", "get_info_records"], [122, 2, 1, "", "get_node_num_map"], [122, 2, 1, "", "get_node_set_dist_factors"], [122, 2, 1, "", "get_node_set_ids"], [122, 2, 1, "", "get_node_set_names"], [122, 2, 1, "", "get_node_set_nodes"], [122, 2, 1, "", "get_node_set_num_nodes"], [122, 2, 1, "", "get_node_variable_names"], [122, 2, 1, "", "get_node_variable_value"], [122, 2, 1, "", "get_node_variable_values"], [122, 2, 1, "", "get_qa_records"], [122, 2, 1, "", "get_side_set_dist_factors"], [122, 2, 1, "", "get_side_set_faces"], [122, 2, 1, "", "get_side_set_ids"], [122, 2, 1, "", "get_side_set_names"], [122, 2, 1, "", "get_side_set_node_list"], [122, 2, 1, "", "get_side_set_num_faces"], [122, 2, 1, "", "get_times"], [122, 2, 1, "", "load_into_memory"], [122, 2, 1, "", "num_attr"], [122, 3, 1, "", "num_blks"], [122, 3, 1, "", "num_dimensions"], [122, 3, 1, "", "num_elem_variables"], [122, 3, 1, "", "num_elems"], [122, 2, 1, "", "num_elems_in_blk"], [122, 3, 1, "", "num_global_variables"], [122, 3, 1, "", "num_node_sets"], [122, 3, 1, "", "num_node_variables"], [122, 3, 1, "", "num_nodes"], [122, 2, 1, "", "num_nodes_per_elem"], [122, 3, 1, "", "num_side_sets"], [122, 3, 1, "", "num_times"], [122, 2, 1, "", "put_coord_names"], [122, 2, 1, "", "put_coords"], [122, 2, 1, "", "put_elem_blk_ids"], [122, 2, 1, "", "put_elem_blk_info"], [122, 2, 1, "", "put_elem_num_map"], [122, 2, 1, "", "put_elem_variable_names"], [122, 2, 1, "", "put_element_property_names"], [122, 2, 1, "", "put_element_property_value"], [122, 2, 1, "", "put_global_variable_names"], [122, 2, 1, "", "put_info_records"], [122, 2, 1, "", "put_node_num_map"], [122, 2, 1, "", "put_node_set_ids"], [122, 2, 1, "", "put_node_set_info"], [122, 2, 1, "", "put_node_set_names"], [122, 2, 1, "", "put_node_variable_names"], [122, 2, 1, "", "put_qa_records"], [122, 2, 1, "", "put_side_set_ids"], [122, 2, 1, "", "put_side_set_info"], [122, 2, 1, "", "put_side_set_names"], [122, 2, 1, "", "reduce_to_surfaces"], [122, 2, 1, "", "set_elem_attr"], [122, 2, 1, "", "set_elem_connectivity"], [122, 2, 1, "", "set_elem_variable_value"], [122, 2, 1, "", "set_elem_variable_values"], [122, 2, 1, "", "set_global_variable_values"], [122, 2, 1, "", "set_node_variable_value"], [122, 2, 1, "", "set_node_variable_values"], [122, 2, 1, "", "set_time"], [122, 2, 1, "", "set_times"], [122, 3, 1, "", "title"], [122, 2, 1, "", "triangulate_surface_mesh"]], "sdynpy.fem.sdynpy_exodus.ExodusInMemory": [[124, 2, 1, "", "__init__"], [124, 2, 1, "", "from_sdynpy"], [124, 2, 1, "", "get_block_surface"], [124, 2, 1, "", "load_from_exodus"], [124, 2, 1, "", "repack"], [124, 2, 1, "", "triangulate_surface_mesh"], [124, 2, 1, "", "write_to_file"]], "sdynpy.fem.sdynpy_exodus.subfield": [[129, 2, 1, "", "__init__"]], "sdynpy.fem.sdynpy_shaker": [[131, 1, 1, "", "Shaker4DoF"]], "sdynpy.fem.sdynpy_shaker.Shaker4DoF": [[131, 2, 1, "", "MCK"], [131, 2, 1, "", "__init__"], [131, 2, 1, "", "modal_shop_100lbf"], [131, 2, 1, "", "plot_electrical_impedance"], [131, 2, 1, "", "state_space"], [131, 2, 1, "", "transfer_function"]], "sdynpy.fileio": [[133, 0, 0, "-", "sdynpy_rattlesnake"], [140, 0, 0, "-", "sdynpy_tshaker"], [145, 0, 0, "-", "sdynpy_uff"], [152, 0, 0, "-", "sdynpy_uff_datasets"], [185, 0, 0, "-", "sdynpy_vic"]], "sdynpy.fileio.sdynpy_rattlesnake": [[134, 5, 1, "", "create_synthetic_test"], [135, 5, 1, "", "read_modal_data"], [136, 5, 1, "", "read_random_spectral_data"], [137, 5, 1, "", "read_rattlesnake_output"], [138, 5, 1, "", "read_system_id_data"], [139, 5, 1, "", "read_transient_control_data"]], "sdynpy.fileio.sdynpy_tshaker": [[141, 5, 1, "", "read_mat_random"], [142, 5, 1, "", "read_mat_shock"], [143, 5, 1, "", "read_mat_time_history"], [144, 5, 1, "", "read_tdms"]], "sdynpy.fileio.sdynpy_uff": [[146, 6, 1, "", "UFFReadError"], [147, 5, 1, "", "parse_uff_line"], [148, 5, 1, "", "parse_uff_lines"], [149, 5, 1, "", "readuff"], [150, 5, 1, "", "readunv"], [151, 5, 1, "", "write_uff_line"]], "sdynpy.fileio.sdynpy_uff_datasets": [[153, 0, 0, "-", "sdynpy_uff_dataset_151"], [156, 0, 0, "-", "sdynpy_uff_dataset_164"], [159, 0, 0, "-", "sdynpy_uff_dataset_1858"], [163, 0, 0, "-", "sdynpy_uff_dataset_2400"], [166, 0, 0, "-", "sdynpy_uff_dataset_2411"], [169, 0, 0, "-", "sdynpy_uff_dataset_2412"], [172, 0, 0, "-", "sdynpy_uff_dataset_2420"], [175, 0, 0, "-", "sdynpy_uff_dataset_55"], [178, 0, 0, "-", "sdynpy_uff_dataset_58"], [182, 0, 0, "-", "sdynpy_uff_dataset_82"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_151": [[154, 1, 1, "", "Sdynpy_UFF_Dataset_151"], [155, 5, 1, "", "read"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_151.Sdynpy_UFF_Dataset_151": [[154, 2, 1, "", "__init__"], [154, 3, 1, "", "dataset_number"], [154, 2, 1, "", "from_uff_data_array"], [154, 2, 1, "", "write_string"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_164": [[157, 1, 1, "", "Sdynpy_UFF_Dataset_164"], [158, 5, 1, "", "read"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_164.Sdynpy_UFF_Dataset_164": [[157, 2, 1, "", "__init__"], [157, 3, 1, "", "dataset_number"], [157, 2, 1, "", "from_uff_data_array"], [157, 2, 1, "", "write_string"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_1858": [[160, 1, 1, "", "Sdynpy_UFF_Dataset_1858"], [161, 5, 1, "", "is_abscissa_even"], [162, 5, 1, "", "read"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_1858.Sdynpy_UFF_Dataset_1858": [[160, 2, 1, "", "__init__"], [160, 3, 1, "", "dataset_number"], [160, 2, 1, "", "from_uff_data_array"], [160, 2, 1, "", "write_string"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2400": [[164, 1, 1, "", "Sdynpy_UFF_Dataset_2400"], [165, 5, 1, "", "read"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2400.Sdynpy_UFF_Dataset_2400": [[164, 2, 1, "", "__init__"], [164, 3, 1, "", "dataset_number"], [164, 2, 1, "", "from_uff_data_array"], [164, 2, 1, "", "write_string"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2411": [[167, 1, 1, "", "Sdynpy_UFF_Dataset_2411"], [168, 5, 1, "", "read"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2411.Sdynpy_UFF_Dataset_2411": [[167, 2, 1, "", "__init__"], [167, 3, 1, "", "dataset_number"], [167, 2, 1, "", "from_uff_data_array"], [167, 2, 1, "", "write_string"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2412": [[170, 1, 1, "", "Sdynpy_UFF_Dataset_2412"], [171, 5, 1, "", "read"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2412.Sdynpy_UFF_Dataset_2412": [[170, 2, 1, "", "__init__"], [170, 3, 1, "", "dataset_number"], [170, 2, 1, "", "from_uff_data_array"], [170, 2, 1, "", "write_string"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2420": [[173, 1, 1, "", "Sdynpy_UFF_Dataset_2420"], [174, 5, 1, "", "read"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2420.Sdynpy_UFF_Dataset_2420": [[173, 2, 1, "", "__init__"], [173, 3, 1, "", "dataset_number"], [173, 2, 1, "", "from_uff_data_array"], [173, 2, 1, "", "write_string"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55": [[176, 1, 1, "", "Sdynpy_UFF_Dataset_55"], [177, 5, 1, "", "read"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55.Sdynpy_UFF_Dataset_55": [[176, 2, 1, "", "__init__"], [176, 3, 1, "", "dataset_number"], [176, 3, 1, "", "eigenvalue"], [176, 3, 1, "", "frequency"], [176, 3, 1, "", "frequency_step_number"], [176, 2, 1, "", "from_uff_data_array"], [176, 3, 1, "", "id_number"], [176, 3, 1, "", "load_case_number"], [176, 3, 1, "", "modal_a"], [176, 3, 1, "", "modal_b"], [176, 3, 1, "", "modal_hysteretic_damping"], [176, 3, 1, "", "modal_mass"], [176, 3, 1, "", "modal_viscous_damping"], [176, 3, 1, "", "mode_number"], [176, 3, 1, "", "time"], [176, 3, 1, "", "time_step_number"], [176, 2, 1, "", "write_string"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_58": [[179, 1, 1, "", "Sdynpy_UFF_Dataset_58"], [180, 5, 1, "", "is_abscissa_even"], [181, 5, 1, "", "read"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_58.Sdynpy_UFF_Dataset_58": [[179, 2, 1, "", "__init__"], [179, 3, 1, "", "dataset_number"], [179, 2, 1, "", "from_uff_data_array"], [179, 2, 1, "", "write_string"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_82": [[183, 1, 1, "", "Sdynpy_UFF_Dataset_82"], [184, 5, 1, "", "read"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_82.Sdynpy_UFF_Dataset_82": [[183, 2, 1, "", "__init__"], [183, 3, 1, "", "dataset_number"], [183, 2, 1, "", "from_uff_data_array"], [183, 2, 1, "", "write_string"]], "sdynpy.fileio.sdynpy_vic": [[186, 5, 1, "", "camera_matrix_from_vic_parameters"], [187, 5, 1, "", "extract_vic_cal_parameters"], [188, 5, 1, "", "get_vic_camera_parameters"], [189, 5, 1, "", "matrix_from_bryant_angles"], [190, 5, 1, "", "read_vic3D_mat_files"], [191, 5, 1, "", "vic_angles_from_matrix"]], "sdynpy.modal": [[193, 0, 0, "-", "sdynpy_ccmif"], [196, 0, 0, "-", "sdynpy_modal_test"], [199, 0, 0, "-", "sdynpy_modeshape"], [207, 0, 0, "-", "sdynpy_polypy"], [211, 0, 0, "-", "sdynpy_signal_processing_gui"], [213, 0, 0, "-", "sdynpy_smac"]], "sdynpy.modal.sdynpy_ccmif": [[194, 1, 1, "", "ColoredCMIF"], [195, 1, 1, "", "PropertiesDialog"]], "sdynpy.modal.sdynpy_ccmif.ColoredCMIF": [[194, 2, 1, "", "__init__"], [194, 2, 1, "", "clear_plot"], [194, 2, 1, "", "clicked_point"], [194, 2, 1, "", "cluster_modes"], [194, 2, 1, "", "collect_shapes"], [194, 2, 1, "", "compute_and_plot_ccmif"], [194, 2, 1, "", "compute_ccmif"], [194, 2, 1, "", "connect_callbacks"], [194, 2, 1, "", "disable_file"], [194, 2, 1, "", "enable_file"], [194, 3, 1, "", "enabled_selected_modes"], [194, 3, 1, "", "enabled_shape_array"], [194, 2, 1, "", "export_figure"], [194, 2, 1, "", "export_mode_table"], [194, 2, 1, "", "load_file"], [194, 2, 1, "", "load_geometry"], [194, 2, 1, "", "load_progress"], [194, 2, 1, "", "plot_ccmif"], [194, 2, 1, "", "plot_cmifs"], [194, 2, 1, "", "plot_frfs"], [194, 2, 1, "", "plot_shapes"], [194, 2, 1, "", "remove_file"], [194, 2, 1, "", "replace_file"], [194, 2, 1, "", "resynthesize"], [194, 2, 1, "", "save_progress"], [194, 2, 1, "", "save_shapes"], [194, 2, 1, "", "set_mode_properties"], [194, 2, 1, "", "set_properties"], [194, 2, 1, "", "toggle_auto_resynth"], [194, 2, 1, "", "update_line_width"], [194, 2, 1, "", "update_selection"], [194, 2, 1, "", "update_shape_list"]], "sdynpy.modal.sdynpy_ccmif.PropertiesDialog": [[195, 2, 1, "", "__init__"], [195, 2, 1, "", "show"]], "sdynpy.modal.sdynpy_modal_test": [[197, 1, 1, "", "ModalTest"], [198, 5, 1, "", "read_modal_fit_data"]], "sdynpy.modal.sdynpy_modal_test.ModalTest": [[197, 2, 1, "", "__init__"], [197, 2, 1, "", "compute_resynthesized_frfs"], [197, 2, 1, "", "compute_spectral_quantities"], [197, 2, 1, "", "compute_spectral_quantities_SignalProcessingGUI"], [197, 2, 1, "", "create_documentation_latex"], [197, 2, 1, "", "create_documentation_pptx"], [197, 2, 1, "", "create_documentation_word"], [197, 2, 1, "", "define_spectral_processing_parameters"], [197, 2, 1, "", "edit_mode_comments"], [197, 2, 1, "", "fit_modes_PolyPy"], [197, 2, 1, "", "fit_modes_SMAC"], [197, 2, 1, "", "plot_cmif"], [197, 2, 1, "", "plot_coherence_image"], [197, 2, 1, "", "plot_deflection_shapes"], [197, 2, 1, "", "plot_drive_point_frf_coherence"], [197, 2, 1, "", "plot_drive_point_frfs"], [197, 2, 1, "", "plot_figures_for_documentation"], [197, 2, 1, "", "plot_mac"], [197, 2, 1, "", "plot_mmif"], [197, 2, 1, "", "plot_modeshape"], [197, 2, 1, "", "plot_nmif"], [197, 2, 1, "", "plot_psmif"], [197, 2, 1, "", "plot_qmif"], [197, 2, 1, "", "plot_reciprocal_frfs"], [197, 2, 1, "", "plot_reference_autospectra"], [197, 3, 1, "", "response_indices"], [197, 2, 1, "", "retrieve_modes_PolyPy"], [197, 2, 1, "", "retrieve_modes_SMAC"], [197, 2, 1, "", "retrieve_spectral_quantities_SignalProcessingGUI"], [197, 2, 1, "", "set_autopower_spectra"], [197, 2, 1, "", "set_channel_table"], [197, 2, 1, "", "set_coherence"], [197, 2, 1, "", "set_fit_modes"], [197, 2, 1, "", "set_frfs"], [197, 2, 1, "", "set_geometry"], [197, 2, 1, "", "set_resynthesized_frfs"], [197, 2, 1, "", "set_rigid_body_shapes"], [197, 2, 1, "", "set_time_histories"], [197, 2, 1, "", "set_units"]], "sdynpy.modal.sdynpy_modeshape": [[200, 1, 1, "", "ShapeSelection"], [201, 5, 1, "", "compute_residues"], [202, 5, 1, "", "compute_shapes"], [203, 5, 1, "", "compute_shapes_multireference"], [204, 5, 1, "", "generate_kernel_complex"], [205, 5, 1, "", "generate_kernel_real"], [206, 5, 1, "", "stack_and_lstsq"]], "sdynpy.modal.sdynpy_modeshape.ShapeSelection": [[200, 4, 1, "", "ALL"], [200, 4, 1, "", "DRIVE_POINT_COEFFICIENT"], [200, 4, 1, "", "PARTICIPATION_FACTOR"], [200, 2, 1, "", "__init__"]], "sdynpy.modal.sdynpy_polypy": [[208, 1, 1, "", "PolyPy"], [209, 1, 1, "", "PolyPy_GUI"], [210, 1, 1, "", "PolyPy_Stability"]], "sdynpy.modal.sdynpy_polypy.PolyPy": [[208, 2, 1, "", "__init__"], [208, 2, 1, "", "analyze_pole_convergence"], [208, 3, 1, "", "angular_frequencies"], [208, 2, 1, "", "compute_poles"], [208, 2, 1, "", "compute_shapes"], [208, 3, 1, "", "frequencies"], [208, 3, 1, "", "frequency_spacing"], [208, 2, 1, "", "plot_stability"], [208, 2, 1, "", "pole_list_from_indices"]], "sdynpy.modal.sdynpy_polypy.PolyPy_GUI": [[209, 2, 1, "", "__init__"], [209, 2, 1, "", "compute_shapes"], [209, 2, 1, "", "compute_stabilization"], [209, 2, 1, "", "connect_callbacks"], [209, 2, 1, "", "create_cmif_window"], [209, 2, 1, "", "create_frf_window"], [209, 2, 1, "", "create_mmif_window"], [209, 2, 1, "", "create_nmif_window"], [209, 2, 1, "", "create_qmif_window"], [209, 2, 1, "", "export_fit_data"], [209, 3, 1, "", "frequencies"], [209, 3, 1, "", "frequency_slice"], [209, 2, 1, "", "load_geometry"], [209, 3, 1, "", "max_frequency"], [209, 3, 1, "", "min_frequency"], [209, 2, 1, "", "plot_shapes"], [209, 2, 1, "", "pole_selection_changed"], [209, 2, 1, "", "save_shapes"], [209, 2, 1, "", "set_geometry"], [209, 2, 1, "", "show_line_selectors"], [209, 2, 1, "", "update_data_plot"], [209, 2, 1, "", "update_frequency_from_region"], [209, 2, 1, "", "update_max_frequency"], [209, 2, 1, "", "update_min_frequency"], [209, 2, 1, "", "update_resynthesis"]], "sdynpy.modal.sdynpy_polypy.PolyPy_Stability": [[210, 2, 1, "", "__init__"], [210, 2, 1, "", "connect_callbacks"], [210, 2, 1, "", "discard"], [210, 2, 1, "", "mouseClicked"], [210, 2, 1, "", "mouseMoved"], [210, 2, 1, "", "plot_poles"], [210, 2, 1, "", "update_stability_plot_views"], [210, 2, 1, "", "update_stabilization_plot"]], "sdynpy.modal.sdynpy_signal_processing_gui": [[212, 1, 1, "", "SignalProcessingGUI"]], "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI": [[212, 2, 1, "", "__init__"], [212, 2, 1, "", "acceptanceChanged"], [212, 2, 1, "", "analyzePolyPy"], [212, 2, 1, "", "analyzeSMAC"], [212, 2, 1, "", "block_averaging_signals"], [212, 2, 1, "", "block_data_range_signals"], [212, 2, 1, "", "block_sampling_signals"], [212, 2, 1, "", "compute"], [212, 2, 1, "", "compute_triggers"], [212, 2, 1, "", "connect_callbacks"], [212, 2, 1, "", "create_rois"], [212, 2, 1, "", "endTimeChanged"], [212, 2, 1, "", "frameSizeChanged"], [212, 2, 1, "", "frameTimeChanged"], [212, 2, 1, "", "framesChanged"], [212, 2, 1, "", "frequencyLinesChanged"], [212, 2, 1, "", "frequencySpacingChanged"], [212, 2, 1, "", "get_abscissa_index_range"], [212, 2, 1, "", "hysteresisChanged"], [212, 2, 1, "", "initialize_ui"], [212, 2, 1, "", "levelChanged"], [212, 2, 1, "", "loadData"], [212, 2, 1, "", "loadGeometry"], [212, 2, 1, "", "overlapChanged"], [212, 2, 1, "", "overlapSamplesChanged"], [212, 2, 1, "", "plotDeflection"], [212, 2, 1, "", "plotTransient"], [212, 2, 1, "", "pretriggerChanged"], [212, 2, 1, "", "referenceViewChanged"], [212, 2, 1, "", "referencesChanged"], [212, 2, 1, "", "reset_ui"], [212, 2, 1, "", "responseViewChanged"], [212, 2, 1, "", "responsesChanged"], [212, 2, 1, "", "saveAutospectra"], [212, 2, 1, "", "saveCoherence"], [212, 2, 1, "", "saveCrossspectra"], [212, 2, 1, "", "saveFRF"], [212, 2, 1, "", "saveWindowedTimeHistory"], [212, 2, 1, "", "sendToReference"], [212, 2, 1, "", "sendToResponse"], [212, 2, 1, "", "showAutospectra"], [212, 2, 1, "", "showCoherence"], [212, 2, 1, "", "showCrossspectra"], [212, 2, 1, "", "showFRF"], [212, 2, 1, "", "showWindowedTimeHistory"], [212, 2, 1, "", "startTimeChanged"], [212, 2, 1, "", "toggleROI"], [212, 2, 1, "", "typeChanged"], [212, 2, 1, "", "updateHysteresisFromReference"], [212, 2, 1, "", "updateHysteresisFromResponse"], [212, 2, 1, "", "updateTimeFromReference"], [212, 2, 1, "", "updateTimeFromResponse"], [212, 2, 1, "", "updateTriggerFromReference"], [212, 2, 1, "", "updateTriggerFromResponse"], [212, 2, 1, "", "windowChanged"]], "sdynpy.modal.sdynpy_smac": [[214, 1, 1, "", "AddRootDialog"], [215, 1, 1, "", "AutoFitTypes"], [216, 6, 1, "", "ConvergenceException"], [217, 1, 1, "", "SMAC"], [218, 1, 1, "", "SMAC_GUI"], [219, 5, 1, "", "correlation_coefficient"]], "sdynpy.modal.sdynpy_smac.AddRootDialog": [[214, 2, 1, "", "__init__"], [214, 2, 1, "", "add_root"], [214, 2, 1, "", "connect_callbacks"], [214, 2, 1, "", "recompute_correlation"], [214, 2, 1, "", "switch_log_plot"], [214, 2, 1, "", "update_plot_range"], [214, 2, 1, "", "update_range_selectors"]], "sdynpy.modal.sdynpy_smac.AutoFitTypes": [[215, 4, 1, "", "ALTERNATE"], [215, 4, 1, "", "PARABOLOID"], [215, 2, 1, "", "__init__"]], "sdynpy.modal.sdynpy_smac.SMAC": [[217, 2, 1, "", "__init__"], [217, 3, 1, "", "angular_frequencies"], [217, 2, 1, "", "autofit_root_alternate"], [217, 2, 1, "", "autofit_root_paraboloid"], [217, 2, 1, "", "autofit_roots"], [217, 2, 1, "", "compute_correlation_matrix"], [217, 2, 1, "", "compute_initial_rootlist"], [217, 2, 1, "", "compute_pseudoinverse"], [217, 2, 1, "", "compute_residues"], [217, 2, 1, "", "compute_shapes"], [217, 2, 1, "", "find_peaks"], [217, 2, 1, "", "fit_damping"], [217, 2, 1, "", "fit_frequency"], [217, 2, 1, "", "fit_paraboloid"], [217, 3, 1, "", "frequencies"], [217, 3, 1, "", "frequency_spacing"], [217, 2, 1, "", "frf_sdof_complex"], [217, 2, 1, "", "frf_sdof_real"], [217, 2, 1, "", "get_num_roots"], [217, 3, 1, "", "reference_coordinates"], [217, 2, 1, "", "save"]], "sdynpy.modal.sdynpy_smac.SMAC_GUI": [[218, 2, 1, "", "__init__"], [218, 2, 1, "", "add_initial_root"], [218, 2, 1, "", "add_root"], [218, 2, 1, "", "autofit_roots"], [218, 2, 1, "", "compute_correlation_matrix"], [218, 2, 1, "", "compute_pseudoinverse"], [218, 2, 1, "", "compute_shapes"], [218, 2, 1, "", "confirm_initial_roots_for_autofit"], [218, 2, 1, "", "connect_callbacks"], [218, 2, 1, "", "delete_initial_roots"], [218, 2, 1, "", "delete_roots"], [218, 2, 1, "", "export_mode_table"], [218, 2, 1, "", "load_geometry"], [218, 2, 1, "", "load_shapes"], [218, 2, 1, "", "paint_markers"], [218, 2, 1, "", "plot_mac"], [218, 2, 1, "", "plot_shapes"], [218, 2, 1, "", "refind_peaks"], [218, 2, 1, "", "save_shapes"], [218, 2, 1, "", "update_coefficient_and_refind"], [218, 2, 1, "", "update_crosshairs"], [218, 2, 1, "", "update_frequency_line_label"], [218, 2, 1, "", "update_initial_rootlist_tab"], [218, 2, 1, "", "update_rootlist_table"], [218, 2, 1, "", "update_selector_and_refind"]], "sdynpy.signal_processing": [[221, 0, 0, "-", "sdynpy_camera"], [234, 0, 0, "-", "sdynpy_complex"], [236, 0, 0, "-", "sdynpy_correlation"], [243, 0, 0, "-", "sdynpy_cpsd"], [260, 0, 0, "-", "sdynpy_frf"], [267, 0, 0, "-", "sdynpy_frf_inverse"], [272, 0, 0, "-", "sdynpy_generator"], [281, 0, 0, "-", "sdynpy_geometry_fitting"], [292, 0, 0, "-", "sdynpy_harmonic"], [294, 0, 0, "-", "sdynpy_integration"], [301, 0, 0, "-", "sdynpy_lrm"], [303, 0, 0, "-", "sdynpy_rotation"], [311, 0, 0, "-", "sdynpy_srs"]], "sdynpy.signal_processing.sdynpy_camera": [[222, 5, 1, "", "calibration_linear_estimate"], [223, 5, 1, "", "camera_derivative_matrix"], [224, 5, 1, "", "camera_matrix_from_image"], [225, 5, 1, "", "compute_pixel_displacement"], [226, 5, 1, "", "compute_pixel_position"], [227, 5, 1, "", "decomposeP"], [228, 5, 1, "", "distort_points"], [229, 5, 1, "", "homogeneous_coordinates"], [230, 5, 1, "", "optimize_calibration"], [231, 5, 1, "", "point_on_pixel"], [232, 5, 1, "", "reconstruct_scene_from_calibration_parameters"], [233, 5, 1, "", "unhomogeneous_coordinates"]], "sdynpy.signal_processing.sdynpy_complex": [[235, 5, 1, "", "collapse_complex_to_real"]], "sdynpy.signal_processing.sdynpy_correlation": [[237, 5, 1, "", "frac"], [238, 5, 1, "", "mac"], [239, 5, 1, "", "matrix_plot"], [240, 5, 1, "", "msf"], [241, 5, 1, "", "orthog"], [242, 5, 1, "", "trac"]], "sdynpy.signal_processing.sdynpy_cpsd": [[244, 5, 1, "", "cpsd"], [245, 5, 1, "", "cpsd_autospectra"], [246, 5, 1, "", "cpsd_coherence"], [247, 5, 1, "", "cpsd_from_coh_phs"], [248, 5, 1, "", "cpsd_phase"], [249, 5, 1, "", "cpsd_to_time_history"], [250, 5, 1, "", "dB_pow"], [251, 5, 1, "", "db2scale"], [252, 5, 1, "", "match_coherence_phase"], [253, 5, 1, "", "nth_octave_freqs"], [254, 5, 1, "", "plot_asds"], [255, 5, 1, "", "plot_cpsd_error"], [256, 5, 1, "", "rms"], [257, 5, 1, "", "rms_csd"], [258, 5, 1, "", "shaped_psd"], [259, 5, 1, "", "trace"]], "sdynpy.signal_processing.sdynpy_frf": [[261, 5, 1, "", "delay_signal"], [262, 5, 1, "", "fft2frf"], [263, 5, 1, "", "modes2frf"], [264, 5, 1, "", "plot"], [265, 5, 1, "", "sysmat2frf"], [266, 5, 1, "", "timedata2frf"]], "sdynpy.signal_processing.sdynpy_frf_inverse": [[268, 5, 1, "", "compute_tikhonov_modified_singular_values"], [269, 5, 1, "", "frf_inverse"], [270, 5, 1, "", "pinv_by_tikhonov"], [271, 5, 1, "", "pinv_by_truncation"]], "sdynpy.signal_processing.sdynpy_generator": [[273, 5, 1, "", "burst_random"], [274, 5, 1, "", "chirp"], [275, 5, 1, "", "pseudorandom"], [276, 5, 1, "", "pulse"], [277, 5, 1, "", "ramp_envelope"], [278, 5, 1, "", "random"], [279, 5, 1, "", "sine"], [280, 5, 1, "", "sine_sweep"]], "sdynpy.signal_processing.sdynpy_geometry_fitting": [[282, 5, 1, "", "cone_error_fn_fixed_angle"], [283, 5, 1, "", "cone_error_fn_free_angle"], [284, 5, 1, "", "cone_fit"], [285, 5, 1, "", "create_cone"], [286, 5, 1, "", "cylinder_fit"], [287, 5, 1, "", "distance_point_line"], [288, 5, 1, "", "distance_point_plane"], [289, 5, 1, "", "fit_cone_fixed_angle"], [290, 5, 1, "", "fit_cylinder"], [291, 5, 1, "", "fit_line_point_cloud"]], "sdynpy.signal_processing.sdynpy_harmonic": [[293, 5, 1, "", "harmonic_mag_phase"]], "sdynpy.signal_processing.sdynpy_integration": [[295, 5, 1, "", "MCK_incomplete_to_StateSpace"], [296, 5, 1, "", "MCK_to_StateSpace"], [297, 5, 1, "", "frequency_domain_differentiation"], [298, 5, 1, "", "integrate_MCK"], [299, 5, 1, "", "integrate_modes"], [300, 5, 1, "", "modal_parameters_to_MCK"]], "sdynpy.signal_processing.sdynpy_lrm": [[302, 5, 1, "", "frf_local_model"]], "sdynpy.signal_processing.sdynpy_rotation": [[304, 5, 1, "", "R"], [305, 5, 1, "", "cross_mat"], [306, 5, 1, "", "cross_mat_vectorized"], [307, 5, 1, "", "lstsq_rigid_transform"], [308, 5, 1, "", "matrix_to_rodrigues"], [309, 5, 1, "", "quaternion_to_rotation_matrix"], [310, 5, 1, "", "rodrigues_to_matrix"]], "sdynpy.signal_processing.sdynpy_srs": [[312, 5, 1, "", "loginterp"], [313, 5, 1, "", "octspace"], [314, 5, 1, "", "optimization_callback"], [315, 5, 1, "", "optimization_error_function"], [316, 5, 1, "", "sdof_filter"], [317, 5, 1, "", "sdof_free_decay_peak_response"], [318, 5, 1, "", "sdof_ramp_invariant_filter_weights"], [319, 5, 1, "", "srs"], [320, 5, 1, "", "sum_decayed_sines"], [321, 5, 1, "", "sum_decayed_sines_compensating_pulse_parameters"], [322, 5, 1, "", "sum_decayed_sines_displacement_velocity"], [323, 5, 1, "", "sum_decayed_sines_minimize"], [324, 5, 1, "", "sum_decayed_sines_reconstruction"], [325, 5, 1, "", "sum_decayed_sines_reconstruction_with_compensation"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:attribute", "5": "py:function", "6": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"], "6": ["py", "exception", "Python exception"]}, "titleterms": {"sdynpi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 333, 334, 335, 338, 339, 340, 342, 349, 350, 351], "core": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 351], "sdynpy_arrai": [2, 3], "sdynpyarrai": 3, "sdynpy_color": 4, "sdynpy_coordin": [5, 6, 7, 8, 9, 10, 11, 12], "coordinatearrai": 6, "coordinate_arrai": 7, "create_coordinate_str": 8, "from_matlab_cellstr": 9, "from_nodelist": 10, "outer_product": 11, "parse_coordinate_str": 12, "sdynpy_data": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], "abscissaindexextractor": 14, "abscissavalueextractor": 15, "cpsdplot": 16, "coherencearrai": 17, "complextyp": 18, "correlationarrai": 19, "decayedsinet": 20, "functiontyp": 21, "guiplot": 22, "impulseresponsefunctionarrai": 23, "paramt": [23, 35], "mplcanva": 24, "mplmulticanva": 25, "modeindicatorfunctionarrai": 26, "multiplecoherencearrai": 27, "nddataarrai": 28, "powerspectraldensityarrai": 29, "powerspectrumarrai": 30, "shockresponsespectrumarrai": 31, "specificdatatyp": 32, "spectrumarrai": 33, "timehistoryarrai": 34, "transferfunctionarrai": 35, "transmissibilityarrai": 36, "typequ": 37, "data_arrai": 38, "decayed_sine_t": 39, "frf_from_time_data": 40, "from_imat_struct": [41, 60, 80], "from_uff": [42, 61], "from_unv": [43, 62, 81], "join": 44, "load": [45, 66, 327, 331, 333, 351], "sdynpy_geometri": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "coordinatesystemarrai": 47, "deflectionshapeplott": 48, "elementarrai": 49, "geometri": [50, 327, 331, 350], "geometryplott": 51, "nodearrai": 52, "shapeplott": 53, "tracelinearrai": 54, "transientplott": 55, "coordinate_system_arrai": 56, "element_arrai": 57, "from_excel_templ": 58, "from_exodu": [59, 79], "global_coord": 63, "global_deflect": 64, "id_map": 65, "local_coord": 67, "node_arrai": 68, "split_list": 69, "traceline_arrai": 70, "write_excel_templ": 71, "sdynpy_matrix": [72, 73, 74], "matrix": [73, 74, 339, 340], "sdynpy_shap": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "shapearrai": 76, "shapecommentt": 77, "concatenate_dof": 78, "mac": [82, 238], "overlay_shap": 83, "rigid_body_check": 84, "rigid_body_error": 85, "rigid_body_fix_node_orient": 86, "shape_align": 87, "shape_arrai": 88, "shape_comparison_t": 89, "sdynpy_system": [90, 91, 92], "system": [91, 327, 337, 338, 339, 340, 348, 350], "substructure_by_posit": 92, "demo": [93, 94, 95, 96, 97], "beam_airplan": [94, 95], "create_model": [95, 97], "beam_plat": [96, 97], "doc": [98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "sdynpy_latex": [99, 100, 101, 102], "create_latex_summari": 100, "figur": 101, "tabl": [102, 335], "sdynpy_ppt": [103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "add_geometry_overview_slid": 104, "add_section_header_slid": 105, "add_shape_animation_slid": 106, "add_shape_comparison_animation_slid": 107, "add_shape_comparison_overview_slid": 108, "add_shape_overview_slid": 109, "add_title_slid": 110, "create_summary_pptx": 111, "position_placehold": 112, "fem": [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131], "sdynpy_beam": [114, 115, 116, 117], "beamkm": 115, "beamkm_2d": 116, "rect_beam_prop": 117, "sdynpy_dof": [118, 119, 120], "by_condition_numb": 119, "by_effective_independ": 120, "sdynpy_exodu": [121, 122, 123, 124, 125, 126, 127, 128, 129], "exodu": [122, 327, 331], "exoduserror": 123, "exodusinmemori": 124, "extract_sharp_edg": 125, "face_connect": 126, "mesh_triangulation_arrai": 127, "reduce_exodus_to_surfac": 128, "subfield": 129, "sdynpy_shak": [130, 131], "shaker4dof": 131, "fileio": [132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191], "sdynpy_rattlesnak": [133, 134, 135, 136, 137, 138, 139], "create_synthetic_test": 134, "read_modal_data": 135, "read_random_spectral_data": 136, "read_rattlesnake_output": 137, "read_system_id_data": 138, "read_transient_control_data": 139, "sdynpy_tshak": [140, 141, 142, 143, 144], "read_mat_random": 141, "read_mat_shock": 142, "read_mat_time_histori": 143, "read_tdm": 144, "sdynpy_uff": [145, 146, 147, 148, 149, 150, 151], "uffreaderror": 146, "parse_uff_lin": [147, 148], "readuff": 149, "readunv": 150, "write_uff_lin": 151, "sdynpy_uff_dataset": [152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "sdynpy_uff_dataset_151": [153, 154, 155], "read": [155, 158, 162, 165, 168, 171, 174, 177, 181, 184], "sdynpy_uff_dataset_164": [156, 157, 158], "sdynpy_uff_dataset_1858": [159, 160, 161, 162], "is_abscissa_even": [161, 180], "sdynpy_uff_dataset_2400": [163, 164, 165], "sdynpy_uff_dataset_2411": [166, 167, 168], "sdynpy_uff_dataset_2412": [169, 170, 171], "sdynpy_uff_dataset_2420": [172, 173, 174], "sdynpy_uff_dataset_55": [175, 176, 177], "sdynpy_uff_dataset_58": [178, 179, 180, 181], "sdynpy_uff_dataset_82": [182, 183, 184], "sdynpy_v": [185, 186, 187, 188, 189, 190, 191], "camera_matrix_from_vic_paramet": 186, "extract_vic_cal_paramet": 187, "get_vic_camera_paramet": 188, "matrix_from_bryant_angl": 189, "read_vic3d_mat_fil": 190, "vic_angles_from_matrix": 191, "modal": [192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 327, 331, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351], "sdynpy_ccmif": [193, 194, 195], "coloredcmif": 194, "propertiesdialog": 195, "sdynpy_modal_test": [196, 197, 198], "modaltest": 197, "read_modal_fit_data": 198, "sdynpy_modeshap": [199, 200, 201, 202, 203, 204, 205, 206], "shapeselect": 200, "compute_residu": 201, "compute_shap": 202, "compute_shapes_multirefer": 203, "generate_kernel_complex": 204, "generate_kernel_r": 205, "stack_and_lstsq": 206, "sdynpy_polypi": [207, 208, 209, 210], "polypi": [208, 327, 350], "polypy_gui": 209, "polypy_st": 210, "sdynpy_signal_processing_gui": [211, 212], "signalprocessinggui": [212, 342], "sdynpy_smac": [213, 214, 215, 216, 217, 218, 219], "addrootdialog": 214, "autofittyp": 215, "convergenceexcept": 216, "smac": [217, 350], "smac_gui": 218, "correlation_coeffici": 219, "signal_process": [220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325], "sdynpy_camera": [221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233], "calibration_linear_estim": 222, "camera_derivative_matrix": 223, "camera_matrix_from_imag": 224, "compute_pixel_displac": 225, "compute_pixel_posit": 226, "decomposep": 227, "distort_point": 228, "homogeneous_coordin": 229, "optimize_calibr": 230, "point_on_pixel": 231, "reconstruct_scene_from_calibration_paramet": 232, "unhomogeneous_coordin": 233, "sdynpy_complex": [234, 235], "collapse_complex_to_r": 235, "sdynpy_correl": [236, 237, 238, 239, 240, 241, 242], "frac": 237, "matrix_plot": 239, "msf": 240, "orthog": 241, "trac": 242, "sdynpy_cpsd": [243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "cpsd": 244, "cpsd_autospectra": 245, "cpsd_coher": 246, "cpsd_from_coh_ph": 247, "cpsd_phase": 248, "cpsd_to_time_histori": 249, "db_pow": 250, "db2scale": 251, "match_coherence_phas": 252, "nth_octave_freq": 253, "plot_asd": 254, "plot_cpsd_error": 255, "rm": 256, "rms_csd": 257, "shaped_psd": 258, "trace": 259, "sdynpy_frf": [260, 261, 262, 263, 264, 265, 266], "delay_sign": 261, "fft2frf": 262, "modes2frf": 263, "plot": [264, 327, 330, 340, 350], "sysmat2frf": 265, "timedata2frf": 266, "sdynpy_frf_invers": [267, 268, 269, 270, 271], "compute_tikhonov_modified_singular_valu": 268, "frf_invers": 269, "pinv_by_tikhonov": 270, "pinv_by_trunc": 271, "sdynpy_gener": [272, 273, 274, 275, 276, 277, 278, 279, 280], "burst_random": 273, "chirp": [274, 343], "pseudorandom": [275, 332, 343], "puls": 276, "ramp_envelop": 277, "random": [278, 329, 332, 343], "sine": 279, "sine_sweep": 280, "sdynpy_geometry_fit": [281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291], "cone_error_fn_fixed_angl": 282, "cone_error_fn_free_angl": 283, "cone_fit": 284, "create_con": 285, "cylinder_fit": 286, "distance_point_lin": 287, "distance_point_plan": 288, "fit_cone_fixed_angl": 289, "fit_cylind": 290, "fit_line_point_cloud": 291, "sdynpy_harmon": [292, 293], "harmonic_mag_phas": 293, "sdynpy_integr": [294, 295, 296, 297, 298, 299, 300], "mck_incomplete_to_statespac": 295, "mck_to_statespac": 296, "frequency_domain_differenti": 297, "integrate_mck": 298, "integrate_mod": 299, "modal_parameters_to_mck": 300, "sdynpy_lrm": [301, 302], "frf_local_model": 302, "sdynpy_rot": [303, 304, 305, 306, 307, 308, 309, 310], "r": 304, "cross_mat": 305, "cross_mat_vector": 306, "lstsq_rigid_transform": 307, "matrix_to_rodrigu": 308, "quaternion_to_rotation_matrix": 309, "rodrigues_to_matrix": 310, "sdynpy_sr": [311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325], "loginterp": 312, "octspac": 313, "optimization_callback": 314, "optimization_error_funct": 315, "sdof_filt": 316, "sdof_free_decay_peak_respons": 317, "sdof_ramp_invariant_filter_weight": 318, "sr": 319, "sum_decayed_sin": 320, "sum_decayed_sines_compensating_pulse_paramet": 321, "sum_decayed_sines_displacement_veloc": 322, "sum_decayed_sines_minim": 323, "sum_decayed_sines_reconstruct": 324, "sum_decayed_sines_reconstruction_with_compens": 325, "bibliographi": 326, "airplan": 327, "test": [327, 329, 331, 333, 342, 347, 351], "content": [327, 328, 329, 331, 332, 333, 334, 335, 336, 341, 350], "import": [327, 329, 330, 331, 350], "default": 327, "option": 327, "finit": [327, 332, 351], "element": [327, 332, 350, 351], "model": [327, 328, 330, 332, 350, 351], "convert": 327, "object": [327, 351], "creat": [327, 330, 331, 350], "from": [327, 328, 340, 342, 348], "an": [327, 329, 348, 350], "file": 327, "explor": 327, "node": [327, 350], "coordin": [327, 350], "tracelin": [327, 350], "visual": 327, "degre": [327, 330, 333, 338, 339, 340, 344], "freedom": [327, 330, 333, 338, 339, 340, 344], "shape": [327, 340, 348, 350], "correct": 327, "neg": 327, "frequenc": [327, 338, 339, 342, 348, 350], "arrai": [327, 350], "view": [327, 350], "versu": [327, 350], "copi": [327, 350], "transform": 327, "optim": [327, 329, 344], "instrument": [327, 329], "oop": 327, "error": [327, 348], "run": [327, 329], "virtual": 327, "experi": 327, "rigid": 327, "bodi": 327, "checkout": 327, "integr": [327, 350], "set": [327, 328, 330, 332, 333, 338, 348], "up": [327, 328, 330, 332, 333, 338, 348], "forc": 327, "function": [327, 338, 339, 342, 348, 350], "gener": [327, 331, 340, 342, 348, 350], "synthet": 327, "data": [327, 330, 331, 342, 345, 346, 348, 350, 351], "time": [327, 342, 350], "identifi": [327, 339], "bad": 327, "fit": [327, 331, 346, 348, 350], "mode": [327, 330, 331, 337, 340, 346, 348, 350], "us": [327, 328, 329, 333, 342, 350], "compar": [327, 347, 350], "serep": 327, "expans": 327, "substructur": [328, 330, 333, 350], "craig": [328, 330], "bampton": [328, 330], "superel": 328, "sierra": 328, "sd": 328, "problem": [328, 332, 333, 338, 339, 340, 342, 343, 348], "analyz": [328, 331, 332], "combin": 328, "compon": [328, 330], "summari": [328, 329, 332, 333, 337, 338, 339, 340, 342, 348], "mimo": 329, "vibrat": [329, 338, 339, 343], "simul": [329, 333, 342], "environ": 329, "select": [329, 330, 344, 348], "shaker": 329, "excit": [329, 332, 338, 339, 340, 342, 343, 344, 350], "locat": [329, 344], "perform": [329, 330, 340, 350], "control": 329, "simpl": [329, 338, 350], "pseudoinvers": 329, "tikhonov": 329, "regular": 329, "weight": 329, "respons": [329, 332, 338, 339, 340, 342, 344, 348, 350], "buzz": 329, "method": [329, 333], "reduct": 330, "3d": 330, "collect": 330, "truth": 330, "guyan": 330, "dynam": 330, "synthesi": 330, "comparison": [330, 332, 338], "result": [330, 332, 333], "rattlesnak": 331, "demonstr": 331, "comput": [331, 338, 339, 340, 342, 344, 350], "frf": [331, 340, 342, 348], "paramet": [331, 348], "document": [331, 335, 351], "export": 331, "analysi": [332, 337, 340, 341, 343, 347, 351], "transient": 332, "techniqu": [332, 342], "transmiss": 333, "reduc": 333, "exampl": [334, 348], "welcom": 335, "": 335, "inform": 335, "indic": [335, 350], "tutori": [336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348], "01": 337, "what": [337, 340, 348], "i": [337, 348], "so": 337, "how": 337, "do": 337, "we": 337, "find": 337, "02": 338, "basic": 338, "A": [338, 339, 340, 342, 348], "undamp": 338, "spring": [338, 339, 340], "mass": [338, 339, 340], "ad": [338, 339, 348, 350], "damp": [338, 339, 340, 348], "singl": [338, 340, 350], "harmon": [338, 339, 340], "between": 338, "displac": 338, "veloc": 338, "acceler": 338, "work": [338, 339], "homework": [338, 339, 340, 342, 343], "1": [338, 339, 340, 342], "2": [338, 339, 340, 342], "3": [338, 339, 340], "investig": 338, "design": 338, "chang": 338, "4": [338, 340], "03": 339, "multipl": [339, 343], "free": 339, "write": 339, "equat": [339, 348, 350], "motion": [339, 350], "drive": 339, "point": 339, "04": 340, "solv": [340, 348], "eigenvalu": [340, 348], "eigenvector": [340, 348], "more": 340, "about": 340, "seri": 340, "rayleigh": 340, "matric": 340, "construct": 340, "characterist": 340, "polynomi": 340, "same": 340, "oper": 340, "5": 340, "quantiti": 340, "05": [341, 342, 343, 344, 345, 346, 347], "experiment": [341, 343, 351], "part": [342, 343, 344, 345, 346, 347], "sinusoid": 342, "broadband": 342, "fft": [342, 343], "power": 342, "spectra": 342, "The": [342, 348], "h1": 342, "h2": 342, "h3": 342, "hcd": 342, "hv": 342, "coher": 342, "histori": 342, "b": 343, "type": [343, 348], "requir": 343, "consider": 343, "input": 343, "burst": 343, "impuls": 343, "c": 344, "theori": 344, "d": 345, "qualiti": 345, "check": 345, "e": 346, "f": 347, "06": 348, "complex": 348, "second": 348, "order": 348, "linear": 348, "differenti": 348, "real": 348, "hard": 348, "geometr": 348, "interpret": 348, "infinit": 348, "number": 348, "unit": 348, "scale": 348, "solut": 348, "ar": 348, "framework": 348, "back": 348, "our": 348, "coeffici": 348, "minim": 348, "constrain": 348, "extract": 348, "pole": 348, "particip": 348, "factor": 348, "stabil": 348, "diagram": 348, "residu": 348, "out": 348, "band": 348, "note": 348, "normal": 348, "program": 349, "interfac": 349, "showcas": 350, "beam": 350, "assign": 350, "field": 350, "index": 350, "integ": 350, "slice": 350, "logic": 350, "produc": 350, "signal": [350, 351], "code": 350, "base": 350, "graphic": 350, "deflect": 350, "synthes": 350, "correl": 350, "anoth": 350, "appli": 350, "constraint": 350, "usag": 351, "instal": 351, "overview": 351, "process": 351}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinxcontrib.bibtex": 9, "nbsphinx": 4, "sphinx": 57}, "alltitles": {"sdynpy": [[0, "module-sdynpy"]], "sdynpy.core": [[1, "module-sdynpy.core"]], "sdynpy.core.sdynpy_array": [[2, "module-sdynpy.core.sdynpy_array"]], "sdynpy.core.sdynpy_array.SdynpyArray": [[3, "sdynpy-core-sdynpy-array-sdynpyarray"]], "sdynpy.core.sdynpy_colors": [[4, "module-sdynpy.core.sdynpy_colors"]], "sdynpy.core.sdynpy_coordinate": [[5, "module-sdynpy.core.sdynpy_coordinate"]], "sdynpy.core.sdynpy_coordinate.CoordinateArray": [[6, "sdynpy-core-sdynpy-coordinate-coordinatearray"]], "sdynpy.core.sdynpy_coordinate.coordinate_array": [[7, "sdynpy-core-sdynpy-coordinate-coordinate-array"]], "sdynpy.core.sdynpy_coordinate.create_coordinate_string": [[8, "sdynpy-core-sdynpy-coordinate-create-coordinate-string"]], "sdynpy.core.sdynpy_coordinate.from_matlab_cellstr": [[9, "sdynpy-core-sdynpy-coordinate-from-matlab-cellstr"]], "sdynpy.core.sdynpy_coordinate.from_nodelist": [[10, "sdynpy-core-sdynpy-coordinate-from-nodelist"]], "sdynpy.core.sdynpy_coordinate.outer_product": [[11, "sdynpy-core-sdynpy-coordinate-outer-product"]], "sdynpy.core.sdynpy_coordinate.parse_coordinate_string": [[12, "sdynpy-core-sdynpy-coordinate-parse-coordinate-string"]], "sdynpy.core.sdynpy_data": [[13, "module-sdynpy.core.sdynpy_data"]], "sdynpy.core.sdynpy_data.AbscissaIndexExtractor": [[14, "sdynpy-core-sdynpy-data-abscissaindexextractor"]], "sdynpy.core.sdynpy_data.AbscissaValueExtractor": [[15, "sdynpy-core-sdynpy-data-abscissavalueextractor"]], "sdynpy.core.sdynpy_data.CPSDPlot": [[16, "sdynpy-core-sdynpy-data-cpsdplot"]], "sdynpy.core.sdynpy_data.CoherenceArray": [[17, "sdynpy-core-sdynpy-data-coherencearray"]], "sdynpy.core.sdynpy_data.ComplexType": [[18, "sdynpy-core-sdynpy-data-complextype"]], "sdynpy.core.sdynpy_data.CorrelationArray": [[19, "sdynpy-core-sdynpy-data-correlationarray"]], "sdynpy.core.sdynpy_data.DecayedSineTable": [[20, "sdynpy-core-sdynpy-data-decayedsinetable"]], "sdynpy.core.sdynpy_data.FunctionTypes": [[21, "sdynpy-core-sdynpy-data-functiontypes"]], "sdynpy.core.sdynpy_data.GUIPlot": [[22, "sdynpy-core-sdynpy-data-guiplot"]], "sdynpy.core.sdynpy_data.ImpulseResponseFunctionArray": [[23, "sdynpy-core-sdynpy-data-impulseresponsefunctionarray"]], "Paramters": [[23, "paramters"], [35, "paramters"]], "sdynpy.core.sdynpy_data.MPLCanvas": [[24, "sdynpy-core-sdynpy-data-mplcanvas"]], "sdynpy.core.sdynpy_data.MPLMultiCanvas": [[25, "sdynpy-core-sdynpy-data-mplmulticanvas"]], "sdynpy.core.sdynpy_data.ModeIndicatorFunctionArray": [[26, "sdynpy-core-sdynpy-data-modeindicatorfunctionarray"]], "sdynpy.core.sdynpy_data.MultipleCoherenceArray": [[27, "sdynpy-core-sdynpy-data-multiplecoherencearray"]], "sdynpy.core.sdynpy_data.NDDataArray": [[28, "sdynpy-core-sdynpy-data-nddataarray"]], "sdynpy.core.sdynpy_data.PowerSpectralDensityArray": [[29, "sdynpy-core-sdynpy-data-powerspectraldensityarray"]], "sdynpy.core.sdynpy_data.PowerSpectrumArray": [[30, "sdynpy-core-sdynpy-data-powerspectrumarray"]], "sdynpy.core.sdynpy_data.ShockResponseSpectrumArray": [[31, "sdynpy-core-sdynpy-data-shockresponsespectrumarray"]], "sdynpy.core.sdynpy_data.SpecificDataType": [[32, "sdynpy-core-sdynpy-data-specificdatatype"]], "sdynpy.core.sdynpy_data.SpectrumArray": [[33, "sdynpy-core-sdynpy-data-spectrumarray"]], "sdynpy.core.sdynpy_data.TimeHistoryArray": [[34, "sdynpy-core-sdynpy-data-timehistoryarray"]], "sdynpy.core.sdynpy_data.TransferFunctionArray": [[35, "sdynpy-core-sdynpy-data-transferfunctionarray"]], "sdynpy.core.sdynpy_data.TransmissibilityArray": [[36, "sdynpy-core-sdynpy-data-transmissibilityarray"]], "sdynpy.core.sdynpy_data.TypeQual": [[37, "sdynpy-core-sdynpy-data-typequal"]], "sdynpy.core.sdynpy_data.data_array": [[38, "sdynpy-core-sdynpy-data-data-array"]], "sdynpy.core.sdynpy_data.decayed_sine_table": [[39, "sdynpy-core-sdynpy-data-decayed-sine-table"]], "sdynpy.core.sdynpy_data.frf_from_time_data": [[40, "sdynpy-core-sdynpy-data-frf-from-time-data"]], "sdynpy.core.sdynpy_data.from_imat_struct": [[41, "sdynpy-core-sdynpy-data-from-imat-struct"]], "sdynpy.core.sdynpy_data.from_uff": [[42, "sdynpy-core-sdynpy-data-from-uff"]], "sdynpy.core.sdynpy_data.from_unv": [[43, "sdynpy-core-sdynpy-data-from-unv"]], "sdynpy.core.sdynpy_data.join": [[44, "sdynpy-core-sdynpy-data-join"]], "sdynpy.core.sdynpy_data.load": [[45, "sdynpy-core-sdynpy-data-load"]], "sdynpy.core.sdynpy_geometry": [[46, "module-sdynpy.core.sdynpy_geometry"]], "sdynpy.core.sdynpy_geometry.CoordinateSystemArray": [[47, "sdynpy-core-sdynpy-geometry-coordinatesystemarray"]], "sdynpy.core.sdynpy_geometry.DeflectionShapePlotter": [[48, "sdynpy-core-sdynpy-geometry-deflectionshapeplotter"]], "sdynpy.core.sdynpy_geometry.ElementArray": [[49, "sdynpy-core-sdynpy-geometry-elementarray"]], "sdynpy.core.sdynpy_geometry.Geometry": [[50, "sdynpy-core-sdynpy-geometry-geometry"]], "sdynpy.core.sdynpy_geometry.GeometryPlotter": [[51, "sdynpy-core-sdynpy-geometry-geometryplotter"]], "sdynpy.core.sdynpy_geometry.NodeArray": [[52, "sdynpy-core-sdynpy-geometry-nodearray"]], "sdynpy.core.sdynpy_geometry.ShapePlotter": [[53, "sdynpy-core-sdynpy-geometry-shapeplotter"]], "sdynpy.core.sdynpy_geometry.TracelineArray": [[54, "sdynpy-core-sdynpy-geometry-tracelinearray"]], "sdynpy.core.sdynpy_geometry.TransientPlotter": [[55, "sdynpy-core-sdynpy-geometry-transientplotter"]], "sdynpy.core.sdynpy_geometry.coordinate_system_array": [[56, "sdynpy-core-sdynpy-geometry-coordinate-system-array"]], "sdynpy.core.sdynpy_geometry.element_array": [[57, "sdynpy-core-sdynpy-geometry-element-array"]], "sdynpy.core.sdynpy_geometry.from_excel_template": [[58, "sdynpy-core-sdynpy-geometry-from-excel-template"]], "sdynpy.core.sdynpy_geometry.from_exodus": [[59, "sdynpy-core-sdynpy-geometry-from-exodus"]], "sdynpy.core.sdynpy_geometry.from_imat_struct": [[60, "sdynpy-core-sdynpy-geometry-from-imat-struct"]], "sdynpy.core.sdynpy_geometry.from_uff": [[61, "sdynpy-core-sdynpy-geometry-from-uff"]], "sdynpy.core.sdynpy_geometry.from_unv": [[62, "sdynpy-core-sdynpy-geometry-from-unv"]], "sdynpy.core.sdynpy_geometry.global_coord": [[63, "sdynpy-core-sdynpy-geometry-global-coord"]], "sdynpy.core.sdynpy_geometry.global_deflection": [[64, "sdynpy-core-sdynpy-geometry-global-deflection"]], "sdynpy.core.sdynpy_geometry.id_map": [[65, "sdynpy-core-sdynpy-geometry-id-map"]], "sdynpy.core.sdynpy_geometry.load": [[66, "sdynpy-core-sdynpy-geometry-load"]], "sdynpy.core.sdynpy_geometry.local_coord": [[67, "sdynpy-core-sdynpy-geometry-local-coord"]], "sdynpy.core.sdynpy_geometry.node_array": [[68, "sdynpy-core-sdynpy-geometry-node-array"]], "sdynpy.core.sdynpy_geometry.split_list": [[69, "sdynpy-core-sdynpy-geometry-split-list"]], "sdynpy.core.sdynpy_geometry.traceline_array": [[70, "sdynpy-core-sdynpy-geometry-traceline-array"]], "sdynpy.core.sdynpy_geometry.write_excel_template": [[71, "sdynpy-core-sdynpy-geometry-write-excel-template"]], "sdynpy.core.sdynpy_matrix": [[72, "module-sdynpy.core.sdynpy_matrix"]], "sdynpy.core.sdynpy_matrix.Matrix": [[73, "sdynpy-core-sdynpy-matrix-matrix"]], "sdynpy.core.sdynpy_matrix.matrix": [[74, "sdynpy-core-sdynpy-matrix-matrix"]], "sdynpy.core.sdynpy_shape": [[75, "module-sdynpy.core.sdynpy_shape"]], "sdynpy.core.sdynpy_shape.ShapeArray": [[76, "sdynpy-core-sdynpy-shape-shapearray"]], "sdynpy.core.sdynpy_shape.ShapeCommentTable": [[77, "sdynpy-core-sdynpy-shape-shapecommenttable"]], "sdynpy.core.sdynpy_shape.concatenate_dofs": [[78, "sdynpy-core-sdynpy-shape-concatenate-dofs"]], "sdynpy.core.sdynpy_shape.from_exodus": [[79, "sdynpy-core-sdynpy-shape-from-exodus"]], "sdynpy.core.sdynpy_shape.from_imat_struct": [[80, "sdynpy-core-sdynpy-shape-from-imat-struct"]], "sdynpy.core.sdynpy_shape.from_unv": [[81, "sdynpy-core-sdynpy-shape-from-unv"]], "sdynpy.core.sdynpy_shape.mac": [[82, "sdynpy-core-sdynpy-shape-mac"]], "sdynpy.core.sdynpy_shape.overlay_shapes": [[83, "sdynpy-core-sdynpy-shape-overlay-shapes"]], "sdynpy.core.sdynpy_shape.rigid_body_check": [[84, "sdynpy-core-sdynpy-shape-rigid-body-check"]], "sdynpy.core.sdynpy_shape.rigid_body_error": [[85, "sdynpy-core-sdynpy-shape-rigid-body-error"]], "sdynpy.core.sdynpy_shape.rigid_body_fix_node_orientation": [[86, "sdynpy-core-sdynpy-shape-rigid-body-fix-node-orientation"]], "sdynpy.core.sdynpy_shape.shape_alignment": [[87, "sdynpy-core-sdynpy-shape-shape-alignment"]], "sdynpy.core.sdynpy_shape.shape_array": [[88, "sdynpy-core-sdynpy-shape-shape-array"]], "sdynpy.core.sdynpy_shape.shape_comparison_table": [[89, "sdynpy-core-sdynpy-shape-shape-comparison-table"]], "sdynpy.core.sdynpy_system": [[90, "module-sdynpy.core.sdynpy_system"]], "sdynpy.core.sdynpy_system.System": [[91, "sdynpy-core-sdynpy-system-system"]], "sdynpy.core.sdynpy_system.substructure_by_position": [[92, "sdynpy-core-sdynpy-system-substructure-by-position"]], "sdynpy.demo": [[93, "module-sdynpy.demo"]], "sdynpy.demo.beam_airplane": [[94, "module-sdynpy.demo.beam_airplane"]], "sdynpy.demo.beam_airplane.create_models": [[95, "sdynpy-demo-beam-airplane-create-models"]], "sdynpy.demo.beam_plate": [[96, "module-sdynpy.demo.beam_plate"]], "sdynpy.demo.beam_plate.create_models": [[97, "sdynpy-demo-beam-plate-create-models"]], "sdynpy.doc": [[98, "module-sdynpy.doc"]], "sdynpy.doc.sdynpy_latex": [[99, "module-sdynpy.doc.sdynpy_latex"]], "sdynpy.doc.sdynpy_latex.create_latex_summary": [[100, "sdynpy-doc-sdynpy-latex-create-latex-summary"]], "sdynpy.doc.sdynpy_latex.figure": [[101, "sdynpy-doc-sdynpy-latex-figure"]], "sdynpy.doc.sdynpy_latex.table": [[102, "sdynpy-doc-sdynpy-latex-table"]], "sdynpy.doc.sdynpy_ppt": [[103, "module-sdynpy.doc.sdynpy_ppt"]], "sdynpy.doc.sdynpy_ppt.add_geometry_overview_slide": [[104, "sdynpy-doc-sdynpy-ppt-add-geometry-overview-slide"]], "sdynpy.doc.sdynpy_ppt.add_section_header_slide": [[105, "sdynpy-doc-sdynpy-ppt-add-section-header-slide"]], "sdynpy.doc.sdynpy_ppt.add_shape_animation_slides": [[106, "sdynpy-doc-sdynpy-ppt-add-shape-animation-slides"]], "sdynpy.doc.sdynpy_ppt.add_shape_comparison_animation_slides": [[107, "sdynpy-doc-sdynpy-ppt-add-shape-comparison-animation-slides"]], "sdynpy.doc.sdynpy_ppt.add_shape_comparison_overview_slide": [[108, "sdynpy-doc-sdynpy-ppt-add-shape-comparison-overview-slide"]], "sdynpy.doc.sdynpy_ppt.add_shape_overview_slide": [[109, "sdynpy-doc-sdynpy-ppt-add-shape-overview-slide"]], "sdynpy.doc.sdynpy_ppt.add_title_slide": [[110, "sdynpy-doc-sdynpy-ppt-add-title-slide"]], "sdynpy.doc.sdynpy_ppt.create_summary_pptx": [[111, "sdynpy-doc-sdynpy-ppt-create-summary-pptx"]], "sdynpy.doc.sdynpy_ppt.position_placeholder": [[112, "sdynpy-doc-sdynpy-ppt-position-placeholder"]], "sdynpy.fem": [[113, "module-sdynpy.fem"]], "sdynpy.fem.sdynpy_beam": [[114, "module-sdynpy.fem.sdynpy_beam"]], "sdynpy.fem.sdynpy_beam.beamkm": [[115, "sdynpy-fem-sdynpy-beam-beamkm"]], "sdynpy.fem.sdynpy_beam.beamkm_2d": [[116, "sdynpy-fem-sdynpy-beam-beamkm-2d"]], "sdynpy.fem.sdynpy_beam.rect_beam_props": [[117, "sdynpy-fem-sdynpy-beam-rect-beam-props"]], "sdynpy.fem.sdynpy_dof": [[118, "module-sdynpy.fem.sdynpy_dof"]], "sdynpy.fem.sdynpy_dof.by_condition_number": [[119, "sdynpy-fem-sdynpy-dof-by-condition-number"]], "sdynpy.fem.sdynpy_dof.by_effective_independence": [[120, "sdynpy-fem-sdynpy-dof-by-effective-independence"]], "sdynpy.fem.sdynpy_exodus": [[121, "module-sdynpy.fem.sdynpy_exodus"]], "sdynpy.fem.sdynpy_exodus.Exodus": [[122, "sdynpy-fem-sdynpy-exodus-exodus"]], "sdynpy.fem.sdynpy_exodus.ExodusError": [[123, "sdynpy-fem-sdynpy-exodus-exoduserror"]], "sdynpy.fem.sdynpy_exodus.ExodusInMemory": [[124, "sdynpy-fem-sdynpy-exodus-exodusinmemory"]], "sdynpy.fem.sdynpy_exodus.extract_sharp_edges": [[125, "sdynpy-fem-sdynpy-exodus-extract-sharp-edges"]], "sdynpy.fem.sdynpy_exodus.face_connectivity": [[126, "sdynpy-fem-sdynpy-exodus-face-connectivity"]], "sdynpy.fem.sdynpy_exodus.mesh_triangulation_array": [[127, "sdynpy-fem-sdynpy-exodus-mesh-triangulation-array"]], "sdynpy.fem.sdynpy_exodus.reduce_exodus_to_surfaces": [[128, "sdynpy-fem-sdynpy-exodus-reduce-exodus-to-surfaces"]], "sdynpy.fem.sdynpy_exodus.subfield": [[129, "sdynpy-fem-sdynpy-exodus-subfield"]], "sdynpy.fem.sdynpy_shaker": [[130, "module-sdynpy.fem.sdynpy_shaker"]], "sdynpy.fem.sdynpy_shaker.Shaker4DoF": [[131, "sdynpy-fem-sdynpy-shaker-shaker4dof"]], "sdynpy.fileio": [[132, "module-sdynpy.fileio"]], "sdynpy.fileio.sdynpy_rattlesnake": [[133, "module-sdynpy.fileio.sdynpy_rattlesnake"]], "sdynpy.fileio.sdynpy_rattlesnake.create_synthetic_test": [[134, "sdynpy-fileio-sdynpy-rattlesnake-create-synthetic-test"]], "sdynpy.fileio.sdynpy_rattlesnake.read_modal_data": [[135, "sdynpy-fileio-sdynpy-rattlesnake-read-modal-data"]], "sdynpy.fileio.sdynpy_rattlesnake.read_random_spectral_data": [[136, "sdynpy-fileio-sdynpy-rattlesnake-read-random-spectral-data"]], "sdynpy.fileio.sdynpy_rattlesnake.read_rattlesnake_output": [[137, "sdynpy-fileio-sdynpy-rattlesnake-read-rattlesnake-output"]], "sdynpy.fileio.sdynpy_rattlesnake.read_system_id_data": [[138, "sdynpy-fileio-sdynpy-rattlesnake-read-system-id-data"]], "sdynpy.fileio.sdynpy_rattlesnake.read_transient_control_data": [[139, "sdynpy-fileio-sdynpy-rattlesnake-read-transient-control-data"]], "sdynpy.fileio.sdynpy_tshaker": [[140, "module-sdynpy.fileio.sdynpy_tshaker"]], "sdynpy.fileio.sdynpy_tshaker.read_mat_random": [[141, "sdynpy-fileio-sdynpy-tshaker-read-mat-random"]], "sdynpy.fileio.sdynpy_tshaker.read_mat_shock": [[142, "sdynpy-fileio-sdynpy-tshaker-read-mat-shock"]], "sdynpy.fileio.sdynpy_tshaker.read_mat_time_history": [[143, "sdynpy-fileio-sdynpy-tshaker-read-mat-time-history"]], "sdynpy.fileio.sdynpy_tshaker.read_tdms": [[144, "sdynpy-fileio-sdynpy-tshaker-read-tdms"]], "sdynpy.fileio.sdynpy_uff": [[145, "module-sdynpy.fileio.sdynpy_uff"]], "sdynpy.fileio.sdynpy_uff.UFFReadError": [[146, "sdynpy-fileio-sdynpy-uff-uffreaderror"]], "sdynpy.fileio.sdynpy_uff.parse_uff_line": [[147, "sdynpy-fileio-sdynpy-uff-parse-uff-line"]], "sdynpy.fileio.sdynpy_uff.parse_uff_lines": [[148, "sdynpy-fileio-sdynpy-uff-parse-uff-lines"]], "sdynpy.fileio.sdynpy_uff.readuff": [[149, "sdynpy-fileio-sdynpy-uff-readuff"]], "sdynpy.fileio.sdynpy_uff.readunv": [[150, "sdynpy-fileio-sdynpy-uff-readunv"]], "sdynpy.fileio.sdynpy_uff.write_uff_line": [[151, "sdynpy-fileio-sdynpy-uff-write-uff-line"]], "sdynpy.fileio.sdynpy_uff_datasets": [[152, "module-sdynpy.fileio.sdynpy_uff_datasets"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_151": [[153, "module-sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_151"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_151.Sdynpy_UFF_Dataset_151": [[154, "sdynpy-fileio-sdynpy-uff-datasets-sdynpy-uff-dataset-151-sdynpy-uff-dataset-151"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_151.read": [[155, "sdynpy-fileio-sdynpy-uff-datasets-sdynpy-uff-dataset-151-read"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_164": [[156, "module-sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_164"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_164.Sdynpy_UFF_Dataset_164": [[157, "sdynpy-fileio-sdynpy-uff-datasets-sdynpy-uff-dataset-164-sdynpy-uff-dataset-164"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_164.read": [[158, "sdynpy-fileio-sdynpy-uff-datasets-sdynpy-uff-dataset-164-read"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_1858": [[159, "module-sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_1858"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_1858.Sdynpy_UFF_Dataset_1858": [[160, "sdynpy-fileio-sdynpy-uff-datasets-sdynpy-uff-dataset-1858-sdynpy-uff-dataset-1858"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_1858.is_abscissa_even": [[161, "sdynpy-fileio-sdynpy-uff-datasets-sdynpy-uff-dataset-1858-is-abscissa-even"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_1858.read": [[162, "sdynpy-fileio-sdynpy-uff-datasets-sdynpy-uff-dataset-1858-read"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2400": [[163, "module-sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2400"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2400.Sdynpy_UFF_Dataset_2400": [[164, "sdynpy-fileio-sdynpy-uff-datasets-sdynpy-uff-dataset-2400-sdynpy-uff-dataset-2400"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2400.read": [[165, "sdynpy-fileio-sdynpy-uff-datasets-sdynpy-uff-dataset-2400-read"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2411": [[166, "module-sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2411"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2411.Sdynpy_UFF_Dataset_2411": [[167, "sdynpy-fileio-sdynpy-uff-datasets-sdynpy-uff-dataset-2411-sdynpy-uff-dataset-2411"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2411.read": [[168, "sdynpy-fileio-sdynpy-uff-datasets-sdynpy-uff-dataset-2411-read"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2412": [[169, "module-sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2412"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2412.Sdynpy_UFF_Dataset_2412": [[170, "sdynpy-fileio-sdynpy-uff-datasets-sdynpy-uff-dataset-2412-sdynpy-uff-dataset-2412"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2412.read": [[171, "sdynpy-fileio-sdynpy-uff-datasets-sdynpy-uff-dataset-2412-read"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2420": [[172, "module-sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2420"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2420.Sdynpy_UFF_Dataset_2420": [[173, "sdynpy-fileio-sdynpy-uff-datasets-sdynpy-uff-dataset-2420-sdynpy-uff-dataset-2420"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2420.read": [[174, "sdynpy-fileio-sdynpy-uff-datasets-sdynpy-uff-dataset-2420-read"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55": [[175, "module-sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55.Sdynpy_UFF_Dataset_55": [[176, "sdynpy-fileio-sdynpy-uff-datasets-sdynpy-uff-dataset-55-sdynpy-uff-dataset-55"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55.read": [[177, "sdynpy-fileio-sdynpy-uff-datasets-sdynpy-uff-dataset-55-read"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_58": [[178, "module-sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_58"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_58.Sdynpy_UFF_Dataset_58": [[179, "sdynpy-fileio-sdynpy-uff-datasets-sdynpy-uff-dataset-58-sdynpy-uff-dataset-58"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_58.is_abscissa_even": [[180, "sdynpy-fileio-sdynpy-uff-datasets-sdynpy-uff-dataset-58-is-abscissa-even"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_58.read": [[181, "sdynpy-fileio-sdynpy-uff-datasets-sdynpy-uff-dataset-58-read"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_82": [[182, "module-sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_82"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_82.Sdynpy_UFF_Dataset_82": [[183, "sdynpy-fileio-sdynpy-uff-datasets-sdynpy-uff-dataset-82-sdynpy-uff-dataset-82"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_82.read": [[184, "sdynpy-fileio-sdynpy-uff-datasets-sdynpy-uff-dataset-82-read"]], "sdynpy.fileio.sdynpy_vic": [[185, "module-sdynpy.fileio.sdynpy_vic"]], "sdynpy.fileio.sdynpy_vic.camera_matrix_from_vic_parameters": [[186, "sdynpy-fileio-sdynpy-vic-camera-matrix-from-vic-parameters"]], "sdynpy.fileio.sdynpy_vic.extract_vic_cal_parameters": [[187, "sdynpy-fileio-sdynpy-vic-extract-vic-cal-parameters"]], "sdynpy.fileio.sdynpy_vic.get_vic_camera_parameters": [[188, "sdynpy-fileio-sdynpy-vic-get-vic-camera-parameters"]], "sdynpy.fileio.sdynpy_vic.matrix_from_bryant_angles": [[189, "sdynpy-fileio-sdynpy-vic-matrix-from-bryant-angles"]], "sdynpy.fileio.sdynpy_vic.read_vic3D_mat_files": [[190, "sdynpy-fileio-sdynpy-vic-read-vic3d-mat-files"]], "sdynpy.fileio.sdynpy_vic.vic_angles_from_matrix": [[191, "sdynpy-fileio-sdynpy-vic-vic-angles-from-matrix"]], "sdynpy.modal": [[192, "module-sdynpy.modal"]], "sdynpy.modal.sdynpy_ccmif": [[193, "module-sdynpy.modal.sdynpy_ccmif"]], "sdynpy.modal.sdynpy_ccmif.ColoredCMIF": [[194, "sdynpy-modal-sdynpy-ccmif-coloredcmif"]], "sdynpy.modal.sdynpy_ccmif.PropertiesDialog": [[195, "sdynpy-modal-sdynpy-ccmif-propertiesdialog"]], "sdynpy.modal.sdynpy_modal_test": [[196, "module-sdynpy.modal.sdynpy_modal_test"]], "sdynpy.modal.sdynpy_modal_test.ModalTest": [[197, "sdynpy-modal-sdynpy-modal-test-modaltest"]], "sdynpy.modal.sdynpy_modal_test.read_modal_fit_data": [[198, "sdynpy-modal-sdynpy-modal-test-read-modal-fit-data"]], "sdynpy.modal.sdynpy_modeshape": [[199, "module-sdynpy.modal.sdynpy_modeshape"]], "sdynpy.modal.sdynpy_modeshape.ShapeSelection": [[200, "sdynpy-modal-sdynpy-modeshape-shapeselection"]], "sdynpy.modal.sdynpy_modeshape.compute_residues": [[201, "sdynpy-modal-sdynpy-modeshape-compute-residues"]], "sdynpy.modal.sdynpy_modeshape.compute_shapes": [[202, "sdynpy-modal-sdynpy-modeshape-compute-shapes"]], "sdynpy.modal.sdynpy_modeshape.compute_shapes_multireference": [[203, "sdynpy-modal-sdynpy-modeshape-compute-shapes-multireference"]], "sdynpy.modal.sdynpy_modeshape.generate_kernel_complex": [[204, "sdynpy-modal-sdynpy-modeshape-generate-kernel-complex"]], "sdynpy.modal.sdynpy_modeshape.generate_kernel_real": [[205, "sdynpy-modal-sdynpy-modeshape-generate-kernel-real"]], "sdynpy.modal.sdynpy_modeshape.stack_and_lstsq": [[206, "sdynpy-modal-sdynpy-modeshape-stack-and-lstsq"]], "sdynpy.modal.sdynpy_polypy": [[207, "module-sdynpy.modal.sdynpy_polypy"]], "sdynpy.modal.sdynpy_polypy.PolyPy": [[208, "sdynpy-modal-sdynpy-polypy-polypy"]], "sdynpy.modal.sdynpy_polypy.PolyPy_GUI": [[209, "sdynpy-modal-sdynpy-polypy-polypy-gui"]], "sdynpy.modal.sdynpy_polypy.PolyPy_Stability": [[210, "sdynpy-modal-sdynpy-polypy-polypy-stability"]], "sdynpy.modal.sdynpy_signal_processing_gui": [[211, "module-sdynpy.modal.sdynpy_signal_processing_gui"]], "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI": [[212, "sdynpy-modal-sdynpy-signal-processing-gui-signalprocessinggui"]], "sdynpy.modal.sdynpy_smac": [[213, "module-sdynpy.modal.sdynpy_smac"]], "sdynpy.modal.sdynpy_smac.AddRootDialog": [[214, "sdynpy-modal-sdynpy-smac-addrootdialog"]], "sdynpy.modal.sdynpy_smac.AutoFitTypes": [[215, "sdynpy-modal-sdynpy-smac-autofittypes"]], "sdynpy.modal.sdynpy_smac.ConvergenceException": [[216, "sdynpy-modal-sdynpy-smac-convergenceexception"]], "sdynpy.modal.sdynpy_smac.SMAC": [[217, "sdynpy-modal-sdynpy-smac-smac"]], "sdynpy.modal.sdynpy_smac.SMAC_GUI": [[218, "sdynpy-modal-sdynpy-smac-smac-gui"]], "sdynpy.modal.sdynpy_smac.correlation_coefficient": [[219, "sdynpy-modal-sdynpy-smac-correlation-coefficient"]], "sdynpy.signal_processing": [[220, "module-sdynpy.signal_processing"]], "sdynpy.signal_processing.sdynpy_camera": [[221, "module-sdynpy.signal_processing.sdynpy_camera"]], "sdynpy.signal_processing.sdynpy_camera.calibration_linear_estimate": [[222, "sdynpy-signal-processing-sdynpy-camera-calibration-linear-estimate"]], "sdynpy.signal_processing.sdynpy_camera.camera_derivative_matrix": [[223, "sdynpy-signal-processing-sdynpy-camera-camera-derivative-matrix"]], "sdynpy.signal_processing.sdynpy_camera.camera_matrix_from_image": [[224, "sdynpy-signal-processing-sdynpy-camera-camera-matrix-from-image"]], "sdynpy.signal_processing.sdynpy_camera.compute_pixel_displacement": [[225, "sdynpy-signal-processing-sdynpy-camera-compute-pixel-displacement"]], "sdynpy.signal_processing.sdynpy_camera.compute_pixel_position": [[226, "sdynpy-signal-processing-sdynpy-camera-compute-pixel-position"]], "sdynpy.signal_processing.sdynpy_camera.decomposeP": [[227, "sdynpy-signal-processing-sdynpy-camera-decomposep"]], "sdynpy.signal_processing.sdynpy_camera.distort_points": [[228, "sdynpy-signal-processing-sdynpy-camera-distort-points"]], "sdynpy.signal_processing.sdynpy_camera.homogeneous_coordinates": [[229, "sdynpy-signal-processing-sdynpy-camera-homogeneous-coordinates"]], "sdynpy.signal_processing.sdynpy_camera.optimize_calibration": [[230, "sdynpy-signal-processing-sdynpy-camera-optimize-calibration"]], "sdynpy.signal_processing.sdynpy_camera.point_on_pixel": [[231, "sdynpy-signal-processing-sdynpy-camera-point-on-pixel"]], "sdynpy.signal_processing.sdynpy_camera.reconstruct_scene_from_calibration_parameters": [[232, "sdynpy-signal-processing-sdynpy-camera-reconstruct-scene-from-calibration-parameters"]], "sdynpy.signal_processing.sdynpy_camera.unhomogeneous_coordinates": [[233, "sdynpy-signal-processing-sdynpy-camera-unhomogeneous-coordinates"]], "sdynpy.signal_processing.sdynpy_complex": [[234, "module-sdynpy.signal_processing.sdynpy_complex"]], "sdynpy.signal_processing.sdynpy_complex.collapse_complex_to_real": [[235, "sdynpy-signal-processing-sdynpy-complex-collapse-complex-to-real"]], "sdynpy.signal_processing.sdynpy_correlation": [[236, "module-sdynpy.signal_processing.sdynpy_correlation"]], "sdynpy.signal_processing.sdynpy_correlation.frac": [[237, "sdynpy-signal-processing-sdynpy-correlation-frac"]], "sdynpy.signal_processing.sdynpy_correlation.mac": [[238, "sdynpy-signal-processing-sdynpy-correlation-mac"]], "sdynpy.signal_processing.sdynpy_correlation.matrix_plot": [[239, "sdynpy-signal-processing-sdynpy-correlation-matrix-plot"]], "sdynpy.signal_processing.sdynpy_correlation.msf": [[240, "sdynpy-signal-processing-sdynpy-correlation-msf"]], "sdynpy.signal_processing.sdynpy_correlation.orthog": [[241, "sdynpy-signal-processing-sdynpy-correlation-orthog"]], "sdynpy.signal_processing.sdynpy_correlation.trac": [[242, "sdynpy-signal-processing-sdynpy-correlation-trac"]], "sdynpy.signal_processing.sdynpy_cpsd": [[243, "module-sdynpy.signal_processing.sdynpy_cpsd"]], "sdynpy.signal_processing.sdynpy_cpsd.cpsd": [[244, "sdynpy-signal-processing-sdynpy-cpsd-cpsd"]], "sdynpy.signal_processing.sdynpy_cpsd.cpsd_autospectra": [[245, "sdynpy-signal-processing-sdynpy-cpsd-cpsd-autospectra"]], "sdynpy.signal_processing.sdynpy_cpsd.cpsd_coherence": [[246, "sdynpy-signal-processing-sdynpy-cpsd-cpsd-coherence"]], "sdynpy.signal_processing.sdynpy_cpsd.cpsd_from_coh_phs": [[247, "sdynpy-signal-processing-sdynpy-cpsd-cpsd-from-coh-phs"]], "sdynpy.signal_processing.sdynpy_cpsd.cpsd_phase": [[248, "sdynpy-signal-processing-sdynpy-cpsd-cpsd-phase"]], "sdynpy.signal_processing.sdynpy_cpsd.cpsd_to_time_history": [[249, "sdynpy-signal-processing-sdynpy-cpsd-cpsd-to-time-history"]], "sdynpy.signal_processing.sdynpy_cpsd.dB_pow": [[250, "sdynpy-signal-processing-sdynpy-cpsd-db-pow"]], "sdynpy.signal_processing.sdynpy_cpsd.db2scale": [[251, "sdynpy-signal-processing-sdynpy-cpsd-db2scale"]], "sdynpy.signal_processing.sdynpy_cpsd.match_coherence_phase": [[252, "sdynpy-signal-processing-sdynpy-cpsd-match-coherence-phase"]], "sdynpy.signal_processing.sdynpy_cpsd.nth_octave_freqs": [[253, "sdynpy-signal-processing-sdynpy-cpsd-nth-octave-freqs"]], "sdynpy.signal_processing.sdynpy_cpsd.plot_asds": [[254, "sdynpy-signal-processing-sdynpy-cpsd-plot-asds"]], "sdynpy.signal_processing.sdynpy_cpsd.plot_cpsd_error": [[255, "sdynpy-signal-processing-sdynpy-cpsd-plot-cpsd-error"]], "sdynpy.signal_processing.sdynpy_cpsd.rms": [[256, "sdynpy-signal-processing-sdynpy-cpsd-rms"]], "sdynpy.signal_processing.sdynpy_cpsd.rms_csd": [[257, "sdynpy-signal-processing-sdynpy-cpsd-rms-csd"]], "sdynpy.signal_processing.sdynpy_cpsd.shaped_psd": [[258, "sdynpy-signal-processing-sdynpy-cpsd-shaped-psd"]], "sdynpy.signal_processing.sdynpy_cpsd.trace": [[259, "sdynpy-signal-processing-sdynpy-cpsd-trace"]], "sdynpy.signal_processing.sdynpy_frf": [[260, "module-sdynpy.signal_processing.sdynpy_frf"]], "sdynpy.signal_processing.sdynpy_frf.delay_signal": [[261, "sdynpy-signal-processing-sdynpy-frf-delay-signal"]], "sdynpy.signal_processing.sdynpy_frf.fft2frf": [[262, "sdynpy-signal-processing-sdynpy-frf-fft2frf"]], "sdynpy.signal_processing.sdynpy_frf.modes2frf": [[263, "sdynpy-signal-processing-sdynpy-frf-modes2frf"]], "sdynpy.signal_processing.sdynpy_frf.plot": [[264, "sdynpy-signal-processing-sdynpy-frf-plot"]], "sdynpy.signal_processing.sdynpy_frf.sysmat2frf": [[265, "sdynpy-signal-processing-sdynpy-frf-sysmat2frf"]], "sdynpy.signal_processing.sdynpy_frf.timedata2frf": [[266, "sdynpy-signal-processing-sdynpy-frf-timedata2frf"]], "sdynpy.signal_processing.sdynpy_frf_inverse": [[267, "module-sdynpy.signal_processing.sdynpy_frf_inverse"]], "sdynpy.signal_processing.sdynpy_frf_inverse.compute_tikhonov_modified_singular_values": [[268, "sdynpy-signal-processing-sdynpy-frf-inverse-compute-tikhonov-modified-singular-values"]], "sdynpy.signal_processing.sdynpy_frf_inverse.frf_inverse": [[269, "sdynpy-signal-processing-sdynpy-frf-inverse-frf-inverse"]], "sdynpy.signal_processing.sdynpy_frf_inverse.pinv_by_tikhonov": [[270, "sdynpy-signal-processing-sdynpy-frf-inverse-pinv-by-tikhonov"]], "sdynpy.signal_processing.sdynpy_frf_inverse.pinv_by_truncation": [[271, "sdynpy-signal-processing-sdynpy-frf-inverse-pinv-by-truncation"]], "sdynpy.signal_processing.sdynpy_generator": [[272, "module-sdynpy.signal_processing.sdynpy_generator"]], "sdynpy.signal_processing.sdynpy_generator.burst_random": [[273, "sdynpy-signal-processing-sdynpy-generator-burst-random"]], "sdynpy.signal_processing.sdynpy_generator.chirp": [[274, "sdynpy-signal-processing-sdynpy-generator-chirp"]], "sdynpy.signal_processing.sdynpy_generator.pseudorandom": [[275, "sdynpy-signal-processing-sdynpy-generator-pseudorandom"]], "sdynpy.signal_processing.sdynpy_generator.pulse": [[276, "sdynpy-signal-processing-sdynpy-generator-pulse"]], "sdynpy.signal_processing.sdynpy_generator.ramp_envelope": [[277, "sdynpy-signal-processing-sdynpy-generator-ramp-envelope"]], "sdynpy.signal_processing.sdynpy_generator.random": [[278, "sdynpy-signal-processing-sdynpy-generator-random"]], "sdynpy.signal_processing.sdynpy_generator.sine": [[279, "sdynpy-signal-processing-sdynpy-generator-sine"]], "sdynpy.signal_processing.sdynpy_generator.sine_sweep": [[280, "sdynpy-signal-processing-sdynpy-generator-sine-sweep"]], "sdynpy.signal_processing.sdynpy_geometry_fitting": [[281, "module-sdynpy.signal_processing.sdynpy_geometry_fitting"]], "sdynpy.signal_processing.sdynpy_geometry_fitting.cone_error_fn_fixed_angle": [[282, "sdynpy-signal-processing-sdynpy-geometry-fitting-cone-error-fn-fixed-angle"]], "sdynpy.signal_processing.sdynpy_geometry_fitting.cone_error_fn_free_angle": [[283, "sdynpy-signal-processing-sdynpy-geometry-fitting-cone-error-fn-free-angle"]], "sdynpy.signal_processing.sdynpy_geometry_fitting.cone_fit": [[284, "sdynpy-signal-processing-sdynpy-geometry-fitting-cone-fit"]], "sdynpy.signal_processing.sdynpy_geometry_fitting.create_cone": [[285, "sdynpy-signal-processing-sdynpy-geometry-fitting-create-cone"]], "sdynpy.signal_processing.sdynpy_geometry_fitting.cylinder_fit": [[286, "sdynpy-signal-processing-sdynpy-geometry-fitting-cylinder-fit"]], "sdynpy.signal_processing.sdynpy_geometry_fitting.distance_point_line": [[287, "sdynpy-signal-processing-sdynpy-geometry-fitting-distance-point-line"]], "sdynpy.signal_processing.sdynpy_geometry_fitting.distance_point_plane": [[288, "sdynpy-signal-processing-sdynpy-geometry-fitting-distance-point-plane"]], "sdynpy.signal_processing.sdynpy_geometry_fitting.fit_cone_fixed_angle": [[289, "sdynpy-signal-processing-sdynpy-geometry-fitting-fit-cone-fixed-angle"]], "sdynpy.signal_processing.sdynpy_geometry_fitting.fit_cylinder": [[290, "sdynpy-signal-processing-sdynpy-geometry-fitting-fit-cylinder"]], "sdynpy.signal_processing.sdynpy_geometry_fitting.fit_line_point_cloud": [[291, "sdynpy-signal-processing-sdynpy-geometry-fitting-fit-line-point-cloud"]], "sdynpy.signal_processing.sdynpy_harmonic": [[292, "module-sdynpy.signal_processing.sdynpy_harmonic"]], "sdynpy.signal_processing.sdynpy_harmonic.harmonic_mag_phase": [[293, "sdynpy-signal-processing-sdynpy-harmonic-harmonic-mag-phase"]], "sdynpy.signal_processing.sdynpy_integration": [[294, "module-sdynpy.signal_processing.sdynpy_integration"]], "sdynpy.signal_processing.sdynpy_integration.MCK_incomplete_to_StateSpace": [[295, "sdynpy-signal-processing-sdynpy-integration-mck-incomplete-to-statespace"]], "sdynpy.signal_processing.sdynpy_integration.MCK_to_StateSpace": [[296, "sdynpy-signal-processing-sdynpy-integration-mck-to-statespace"]], "sdynpy.signal_processing.sdynpy_integration.frequency_domain_differentiation": [[297, "sdynpy-signal-processing-sdynpy-integration-frequency-domain-differentiation"]], "sdynpy.signal_processing.sdynpy_integration.integrate_MCK": [[298, "sdynpy-signal-processing-sdynpy-integration-integrate-mck"]], "sdynpy.signal_processing.sdynpy_integration.integrate_modes": [[299, "sdynpy-signal-processing-sdynpy-integration-integrate-modes"]], "sdynpy.signal_processing.sdynpy_integration.modal_parameters_to_MCK": [[300, "sdynpy-signal-processing-sdynpy-integration-modal-parameters-to-mck"]], "sdynpy.signal_processing.sdynpy_lrm": [[301, "module-sdynpy.signal_processing.sdynpy_lrm"]], "sdynpy.signal_processing.sdynpy_lrm.frf_local_model": [[302, "sdynpy-signal-processing-sdynpy-lrm-frf-local-model"]], "sdynpy.signal_processing.sdynpy_rotation": [[303, "module-sdynpy.signal_processing.sdynpy_rotation"]], "sdynpy.signal_processing.sdynpy_rotation.R": [[304, "sdynpy-signal-processing-sdynpy-rotation-r"]], "sdynpy.signal_processing.sdynpy_rotation.cross_mat": [[305, "sdynpy-signal-processing-sdynpy-rotation-cross-mat"]], "sdynpy.signal_processing.sdynpy_rotation.cross_mat_vectorized": [[306, "sdynpy-signal-processing-sdynpy-rotation-cross-mat-vectorized"]], "sdynpy.signal_processing.sdynpy_rotation.lstsq_rigid_transform": [[307, "sdynpy-signal-processing-sdynpy-rotation-lstsq-rigid-transform"]], "sdynpy.signal_processing.sdynpy_rotation.matrix_to_rodrigues": [[308, "sdynpy-signal-processing-sdynpy-rotation-matrix-to-rodrigues"]], "sdynpy.signal_processing.sdynpy_rotation.quaternion_to_rotation_matrix": [[309, "sdynpy-signal-processing-sdynpy-rotation-quaternion-to-rotation-matrix"]], "sdynpy.signal_processing.sdynpy_rotation.rodrigues_to_matrix": [[310, "sdynpy-signal-processing-sdynpy-rotation-rodrigues-to-matrix"]], "sdynpy.signal_processing.sdynpy_srs": [[311, "module-sdynpy.signal_processing.sdynpy_srs"]], "sdynpy.signal_processing.sdynpy_srs.loginterp": [[312, "sdynpy-signal-processing-sdynpy-srs-loginterp"]], "sdynpy.signal_processing.sdynpy_srs.octspace": [[313, "sdynpy-signal-processing-sdynpy-srs-octspace"]], "sdynpy.signal_processing.sdynpy_srs.optimization_callback": [[314, "sdynpy-signal-processing-sdynpy-srs-optimization-callback"]], "sdynpy.signal_processing.sdynpy_srs.optimization_error_function": [[315, "sdynpy-signal-processing-sdynpy-srs-optimization-error-function"]], "sdynpy.signal_processing.sdynpy_srs.sdof_filter": [[316, "sdynpy-signal-processing-sdynpy-srs-sdof-filter"]], "sdynpy.signal_processing.sdynpy_srs.sdof_free_decay_peak_response": [[317, "sdynpy-signal-processing-sdynpy-srs-sdof-free-decay-peak-response"]], "sdynpy.signal_processing.sdynpy_srs.sdof_ramp_invariant_filter_weights": [[318, "sdynpy-signal-processing-sdynpy-srs-sdof-ramp-invariant-filter-weights"]], "sdynpy.signal_processing.sdynpy_srs.srs": [[319, "sdynpy-signal-processing-sdynpy-srs-srs"]], "sdynpy.signal_processing.sdynpy_srs.sum_decayed_sines": [[320, "sdynpy-signal-processing-sdynpy-srs-sum-decayed-sines"]], "sdynpy.signal_processing.sdynpy_srs.sum_decayed_sines_compensating_pulse_parameters": [[321, "sdynpy-signal-processing-sdynpy-srs-sum-decayed-sines-compensating-pulse-parameters"]], "sdynpy.signal_processing.sdynpy_srs.sum_decayed_sines_displacement_velocity": [[322, "sdynpy-signal-processing-sdynpy-srs-sum-decayed-sines-displacement-velocity"]], "sdynpy.signal_processing.sdynpy_srs.sum_decayed_sines_minimize": [[323, "sdynpy-signal-processing-sdynpy-srs-sum-decayed-sines-minimize"]], "sdynpy.signal_processing.sdynpy_srs.sum_decayed_sines_reconstruction": [[324, "sdynpy-signal-processing-sdynpy-srs-sum-decayed-sines-reconstruction"]], "sdynpy.signal_processing.sdynpy_srs.sum_decayed_sines_reconstruction_with_compensation": [[325, "sdynpy-signal-processing-sdynpy-srs-sum-decayed-sines-reconstruction-with-compensation"]], "Bibliography": [[326, "bibliography"]], "Airplane Modal Test": [[327, "airplane-modal-test"]], "Contents": [[327, "contents"], [328, "contents"], [329, "contents"], [331, "contents"], [332, "contents"], [333, "contents"], [350, "contents"]], "Imports": [[327, "imports"], [329, "imports"], [330, "Imports"], [331, "imports"], [350, "imports"]], "Default Plotting Options": [[327, "default-plotting-options"]], "Load the Finite Element Model": [[327, "load-the-finite-element-model"]], "Convert Finite Element Model to SDynPy Objects": [[327, "convert-finite-element-model-to-sdynpy-objects"]], "Creating a Geometry from an Exodus file": [[327, "creating-a-geometry-from-an-exodus-file"]], "Exploring the Geometry object": [[327, "exploring-the-geometry-object"]], "Nodes": [[327, "nodes"], [350, "nodes"]], "Coordinate Systems": [[327, "coordinate-systems"], [350, "coordinate-systems"]], "Elements": [[327, "elements"], [350, "elements"]], "Tracelines": [[327, "tracelines"], [350, "tracelines"]], "Visualizing Degrees of Freedom on a Geometry": [[327, "visualizing-degrees-of-freedom-on-a-geometry"]], "Coordinates": [[327, "coordinates"], [350, "coordinates"]], "Plotting Coordinates": [[327, "plotting-coordinates"], [350, "plotting-coordinates"]], "Creating Shapes from an Exodus File": [[327, "creating-shapes-from-an-exodus-file"]], "Shapes": [[327, "shapes"], [350, "shapes"]], "Correcting Negative Frequencies and Array Views versus Copies": [[327, "correcting-negative-frequencies-and-array-views-versus-copies"]], "Transforming Shape Coordinate Systems": [[327, "transforming-shape-coordinate-systems"]], "Optimizing Instrumentation for Test": [[327, "optimizing-instrumentation-for-test"], [329, "optimizing-instrumentation-for-test"]], "Creating a Test Geometry": [[327, "creating-a-test-geometry"], [331, "creating-a-test-geometry"]], "OOPS! An Instrumentation Error!": [[327, "oops-an-instrumentation-error"]], "Running a Virtual Experiment: Rigid Body Checkouts": [[327, "running-a-virtual-experiment-rigid-body-checkouts"]], "Creating a System Object to Integrate": [[327, "creating-a-system-object-to-integrate"]], "Exploring the System Object": [[327, "exploring-the-system-object"]], "Setting up the Integration and Forcing Function": [[327, "setting-up-the-integration-and-forcing-function"]], "Running the Integration to Generate Synthetic Test Data": [[327, "running-the-integration-to-generate-synthetic-test-data"]], "Exploring Time Data Objects": [[327, "exploring-time-data-objects"]], "Identifying Bad Geometry with Rigid Body Checkouts in SDynPy": [[327, "identifying-bad-geometry-with-rigid-body-checkouts-in-sdynpy"]], "Running a Virtual Experiment: Modal Testing": [[327, "running-a-virtual-experiment-modal-testing"]], "Fitting Modes using PolyPy": [[327, "fitting-modes-using-polypy"]], "Running PolyPy": [[327, "running-polypy"]], "Comparing Test and Finite Element Modes": [[327, "comparing-test-and-finite-element-modes"]], "SEREP Expansion": [[327, "serep-expansion"]], "Substructuring using Craig-Bampton Superelements from Sierra/SD": [[328, "substructuring-using-craig-bampton-superelements-from-sierra-sd"]], "Setting up the Problem": [[328, "setting-up-the-problem"], [333, "setting-up-the-problem"]], "Analyzing Superelements in SDynPy": [[328, "analyzing-superelements-in-sdynpy"]], "Combining Component Models": [[328, "combining-component-models"]], "Summary": [[328, "summary"], [329, "summary"], [332, "summary"], [333, "summary"], [337, "Summary"], [338, "Summary"], [339, "Summary"], [340, "Summary"], [342, "Summary"], [348, "Summary"]], "MIMO Random Vibration": [[329, "mimo-random-vibration"]], "Simulating an Environment": [[329, "simulating-an-environment"]], "Selecting Shaker Excitation Locations": [[329, "selecting-shaker-excitation-locations"]], "Performing Vibration Control": [[329, "performing-vibration-control"]], "Simple Vibration Control using the Pseudoinverse": [[329, "simple-vibration-control-using-the-pseudoinverse"]], "Tikhonov Regularization": [[329, "tikhonov-regularization"]], "Weighting the Shakers": [[329, "weighting-the-shakers"]], "Response Weighting": [[329, "response-weighting"]], "Buzz Test Method": [[329, "buzz-test-method"]], "Running a Test": [[329, "running-a-test"]], "Model Reduction": [[330, "Model-Reduction"]], "Set up 3D Plots": [[330, "Set-up-3D-Plots"]], "Collect and Set Up Models": [[330, "Collect-and-Set-Up-Models"]], "Creating Truth Data": [[330, "Creating-Truth-Data"]], "Selecting Degrees of Freedom for Reduction and Substructuring": [[330, "Selecting-Degrees-of-Freedom-for-Reduction-and-Substructuring"]], "Perform the model reductions": [[330, "Perform-the-model-reductions"]], "Guyan Reduction": [[330, "Guyan-Reduction"]], "Dynamic Reduction": [[330, "Dynamic-Reduction"]], "Craig-Bampton Reduction": [[330, "Craig-Bampton-Reduction"]], "Component Mode Synthesis": [[330, "Component-Mode-Synthesis"]], "Comparison of Results": [[330, "Comparison-of-Results"]], "Rattlesnake Demonstration": [[331, "rattlesnake-demonstration"]], "Load in Test Data": [[331, "load-in-test-data"]], "Computing FRFs": [[331, "computing-frfs"]], "Fitting Modes to the FRFs": [[331, "fitting-modes-to-the-frfs"]], "Analyzing Modal Parameters": [[331, "analyzing-modal-parameters"]], "Documentation Generation": [[331, "documentation-generation"]], "Exporting to Exodus": [[331, "exporting-to-exodus"]], "Analysis of Transient Finite Element Results": [[332, "analysis-of-transient-finite-element-results"]], "Problem Set Up": [[332, "problem-set-up"]], "Analyzing Model Responses": [[332, "analyzing-model-responses"]], "Pseudorandom Analysis": [[332, "pseudorandom-analysis"]], "Random Analysis": [[332, "random-analysis"]], "Comparison of Excitation Techniques": [[332, "comparison-of-excitation-techniques"]], "Substructuring using the Transmission Simulator Method": [[333, "substructuring-using-the-transmission-simulator-method"], [333, "id1"]], "Loading the results into SDynPy": [[333, "loading-the-results-into-sdynpy"]], "Reducing to Test Degrees of Freedom": [[333, "reducing-to-test-degrees-of-freedom"]], "SDynpy Examples": [[334, "sdynpy-examples"]], "Contents:": [[334, null], [335, null], [336, null], [341, null]], "Welcome to SDynPy\u2019s documentation!": [[335, "welcome-to-sdynpy-s-documentation"]], "Information": [[335, "information"]], "Indices and tables": [[335, "indices-and-tables"]], "Modal Tutorials": [[336, "modal-tutorials"]], "Modal Tutorial 01: What is modal analysis?": [[337, "Modal-Tutorial-01:-What-is-modal-analysis?"]], "So what is Modal Analysis?": [[337, "So-what-is-Modal-Analysis?"]], "How do we find the modes of the system?": [[337, "How-do-we-find-the-modes-of-the-system?"]], "Modal Tutorial 02: Basics of Vibrations": [[338, "Modal-Tutorial-02:-Basics-of-Vibrations"]], "A Simple Undamped Spring-Mass System": [[338, "A-Simple-Undamped-Spring-Mass-System"]], "Adding Damping": [[338, "Adding-Damping"], [339, "Adding-Damping"], [348, "Adding-Damping"]], "Response of Single Degree of Freedom Systems to Harmonic Excitation": [[338, "Response-of-Single-Degree-of-Freedom-Systems-to-Harmonic-Excitation"]], "Undamped Response to Harmonic Excitation": [[338, "Undamped-Response-to-Harmonic-Excitation"]], "Damped Response to Harmonic Excitation": [[338, "Damped-Response-to-Harmonic-Excitation"]], "Comparison between Displacement, Velocity, and Acceleration Frequency Response Functions": [[338, "Comparison-between-Displacement,-Velocity,-and-Acceleration-Frequency-Response-Functions"]], "Working with Single Degree of Freedom Systems in SDynPy": [[338, "Working-with-Single-Degree-of-Freedom-Systems-in-SDynPy"]], "Homework Problems": [[338, "Homework-Problems"], [339, "Homework-Problems"], [340, "Homework-Problems"], [342, "Homework-Problems"], [343, "Homework-Problems"]], "1. Set up a System": [[338, "1.-Set-up-a-System"]], "2. Compute the Frequency Response Function": [[338, "2.-Compute-the-Frequency-Response-Function"]], "3. Investigate Design Changes": [[338, "3.-Investigate-Design-Changes"]], "4. Investigate Damping Changes": [[338, "4.-Investigate-Damping-Changes"]], "Modal Tutorial 03: Vibrations of Systems with Multiple Degrees of Freedom": [[339, "Modal-Tutorial-03:-Vibrations-of-Systems-with-Multiple-Degrees-of-Freedom"]], "A Spring Mass System with 2 Degrees of Freedom": [[339, "A-Spring-Mass-System-with-2-Degrees-of-Freedom"], [340, "A-Spring-Mass-System-with-2-Degrees-of-Freedom"]], "Free Response of Multiple Degree of Freedom Systems": [[339, "Free-Response-of-Multiple-Degree-of-Freedom-Systems"]], "Multiple Degree of Freedom Response to Harmonic Excitation": [[339, "Multiple-Degree-of-Freedom-Response-to-Harmonic-Excitation"]], "Working with Multiple Degree of Freedom Systems in SDynPy": [[339, "Working-with-Multiple-Degree-of-Freedom-Systems-in-SDynPy"]], "1. Writing Equations of Motion": [[339, "1.-Writing-Equations-of-Motion"]], "2. Compute the Frequency Response Function Matrix": [[339, "2.-Compute-the-Frequency-Response-Function-Matrix"]], "3. Identifying Drive Points": [[339, "3.-Identifying-Drive-Points"]], "Modal Tutorial 04: Modal Analysis": [[340, "Modal-Tutorial-04:-Modal-Analysis"]], "Solving for the Eigenvalues": [[340, "Solving-for-the-Eigenvalues"]], "Solving for the Eigenvectors": [[340, "Solving-for-the-Eigenvectors"]], "More about Modes": [[340, "More-about-Modes"]], "A series of Single Degree of Freedom Systems": [[340, "A-series-of-Single-Degree-of-Freedom-Systems"]], "What About Damping?": [[340, "What-About-Damping?"]], "Rayleigh Damping": [[340, "Rayleigh-Damping"]], "Modal Damping": [[340, "Modal-Damping"]], "General Damping Matrices": [[340, "General-Damping-Matrices"]], "Response to Harmonic Excitation": [[340, "Response-to-Harmonic-Excitation"]], "Modal Analysis in SDynPy": [[340, "Modal-Analysis-in-SDynPy"]], "1. Construct the generalized eigenvalue problem": [[340, "1.-Construct-the-generalized-eigenvalue-problem"]], "2. Compute and solve the characteristic polynomial": [[340, "2.-Compute-and-solve-the-characteristic-polynomial"]], "3. Compute eigenvector": [[340, "3.-Compute-eigenvector"]], "4. Perform the same operations in SDynPy and plot the mode shapes": [[340, "4.-Perform-the-same-operations-in-SDynPy-and-plot-the-mode-shapes"]], "5. Compute the FRF matrix from modal quantities": [[340, "5.-Compute-the-FRF-matrix-from-modal-quantities"]], "Modal Tutorial 05: Experimental Modal Analysis": [[341, "modal-tutorial-05-experimental-modal-analysis"]], "Modal Tutorial 05 Part A: Computing Frequency Response from Time Data": [[342, "Modal-Tutorial-05-Part-A:-Computing-Frequency-Response-from-Time-Data"]], "Sinusoidal Excitation": [[342, "Sinusoidal-Excitation"]], "Broadband Excitation": [[342, "Broadband-Excitation"]], "Computing FRFs using FFTs": [[342, "Computing-FRFs-using-FFTs"]], "Computing FRFs with Power Spectra": [[342, "Computing-FRFs-with-Power-Spectra"]], "Computing Power Spectra": [[342, "Computing-Power-Spectra"]], "The H1 Technique": [[342, "The-H1-Technique"]], "The H2 Technique": [[342, "The-H2-Technique"]], "The H3 Technique": [[342, "The-H3-Technique"]], "The HCD Technique": [[342, "The-HCD-Technique"]], "The Hv Technique": [[342, "The-Hv-Technique"]], "Coherence": [[342, "Coherence"]], "Computing Frequency Response Functions using SDynPy": [[342, "Computing-Frequency-Response-Functions-using-SDynPy"]], "SignalProcessingGUI": [[342, "SignalProcessingGUI"]], "1. Simulate a Test to Generate Time Histories": [[342, "1.-Simulate-a-Test-to-Generate-Time-Histories"]], "2. Compute Frequency Response Functions": [[342, "2.-Compute-Frequency-Response-Functions"]], "Modal Tutorial 05 Part B: Types of Excitation for Experimental Modal Analysis": [[343, "Modal-Tutorial-05-Part-B:-Types-of-Excitation-for-Experimental-Modal-Analysis"]], "Requirements for the FFT": [[343, "Requirements-for-the-FFT"]], "Considerations for Multiple-Input Excitation": [[343, "Considerations-for-Multiple-Input-Excitation"]], "Types of Modal Excitation": [[343, "Types-of-Modal-Excitation"]], "Random Vibration": [[343, "Random-Vibration"]], "Pseudorandom Excitation": [[343, "Pseudorandom-Excitation"]], "Chirp Excitation": [[343, "Chirp-Excitation"]], "Burst Random Excitation": [[343, "Burst-Random-Excitation"]], "Impulse Excitation": [[343, "Impulse-Excitation"]], "Modal Tutorial 05 Part C: Selecting Excitation and Response Degrees of Freedom": [[344, "Modal-Tutorial-05-Part-C:-Selecting-Excitation-and-Response-Degrees-of-Freedom"]], "Optimal Excitation Theory": [[344, "Optimal-Excitation-Theory"]], "Computing Optimal Excitation Locations": [[344, "Computing-Optimal-Excitation-Locations"]], "Optimal Response Theory": [[344, "Optimal-Response-Theory"]], "Computing Optimal Responses": [[344, "Computing-Optimal-Responses"]], "Modal Tutorial 05 Part D: Data Quality Checks": [[345, "Modal-Tutorial-05-Part-D:-Data-Quality-Checks"]], "Modal Tutorial 05 Part E: Fitting Modes to Data": [[346, "Modal-Tutorial-05-Part-E:-Fitting-Modes-to-Data"]], "Modal Tutorial 05 Part F: Comparing Test and Analysis": [[347, "Modal-Tutorial-05-Part-F:-Comparing-Test-and-Analysis"]], "Modal Tutorial 06: Complex Modes": [[348, "Modal-Tutorial-06:-Complex-Modes"]], "The Second-Order, Linear Differential System of Equations": [[348, "The-Second-Order,-Linear-Differential-System-of-Equations"]], "Real Modes \u2013 Damping is Hard": [[348, "Real-Modes----Damping-is-Hard"]], "Geometric Interpretation of the Eigenvalues and Eigenvectors": [[348, "Geometric-Interpretation-of-the-Eigenvalues-and-Eigenvectors"]], "An Infinite Number of Mode Shapes": [[348, "An-Infinite-Number-of-Mode-Shapes"]], "Units with Scaled Mode Shapes": [[348, "Units-with-Scaled-Mode-Shapes"]], "Complex Modes \u2013 The General Solution": [[348, "Complex-Modes----The-General-Solution"]], "An Example Problem": [[348, "An-Example-Problem"]], "Frequency Response Functions and Modal Parameters": [[348, "Frequency-Response-Functions-and-Modal-Parameters"]], "Real Modes": [[348, "Real-Modes"]], "Complex Modes": [[348, "Complex-Modes"]], "What are Real Modes in the Complex Mode Framework?": [[348, "What-are-Real-Modes-in-the-Complex-Mode-Framework?"]], "Back to our Example Problem": [[348, "Back-to-our-Example-Problem"]], "Solving for Modal Parameters from FRFs": [[348, "Solving-for-Modal-Parameters-from-FRFs"]], "Setting up the System of Equations": [[348, "Setting-up-the-System-of-Equations"]], "Selecting Coefficients that Minimize Errors": [[348, "Selecting-Coefficients-that-Minimize-Errors"]], "Solving the Constrained Problem": [[348, "Solving-the-Constrained-Problem"]], "Extracting Poles and Participation Factors": [[348, "Extracting-Poles-and-Participation-Factors"]], "Stabilization Diagrams": [[348, "Stabilization-Diagrams"]], "Back to the Example Problem": [[348, "Back-to-the-Example-Problem"], [348, "id1"]], "Fitting Mode Shapes to FRF Data": [[348, "Fitting-Mode-Shapes-to-FRF-Data"]], "Fitting Residuals for Out-of-Band Modes": [[348, "Fitting-Residuals-for-Out-of-Band-Modes"]], "A Note on Types of FRFs": [[348, "A-Note-on-Types-of-FRFs"]], "Normalizing Mode Shapes": [[348, "Normalizing-Mode-Shapes"]], "SDynPy Programming Interface": [[349, "sdynpy-programming-interface"]], "SDynPy Showcase": [[350, "sdynpy-showcase"]], "Creating a Simple Beam Model": [[350, "creating-a-simple-beam-model"]], "Geometry in SDynPy": [[350, "geometry-in-sdynpy"]], "Plotting Geometry": [[350, "plotting-geometry"]], "Systems in SDynPy": [[350, "systems-in-sdynpy"]], "Computing Modes of the System": [[350, "computing-modes-of-the-system"]], "Plotting Shapes": [[350, "plotting-shapes"]], "Assigning to SDynpy Array Fields and Array Views versus Copies": [[350, "assigning-to-sdynpy-array-fields-and-array-views-versus-copies"]], "Indexing using a Single Integer Index": [[350, "indexing-using-a-single-integer-index"]], "Indexing using a Slice": [[350, "indexing-using-a-slice"]], "Indexing with Logical Arrays": [[350, "indexing-with-logical-arrays"]], "Indexing with Integer Arrays": [[350, "indexing-with-integer-arrays"]], "Computing a Modal System": [[350, "computing-a-modal-system"]], "Data in SDynPy": [[350, "data-in-sdynpy"]], "Integrating Equations of Motion to Produce Time Data": [[350, "integrating-equations-of-motion-to-produce-time-data"]], "Generating an Excitation Signal": [[350, "generating-an-excitation-signal"]], "Performing the Time Integration": [[350, "performing-the-time-integration"]], "Computing Frequency Response Functions": [[350, "computing-frequency-response-functions"]], "Code-based Frequency Response Function Computations": [[350, "code-based-frequency-response-function-computations"]], "Mode Indicator Functions": [[350, "mode-indicator-functions"]], "Graphical Frequency Response Function Computation": [[350, "graphical-frequency-response-function-computation"]], "Plotting Deflection Shapes": [[350, "plotting-deflection-shapes"]], "Fitting Modes to Frequency Response Functions": [[350, "fitting-modes-to-frequency-response-functions"]], "PolyPy": [[350, "polypy"]], "Synthesize Modes and Correlate (SMAC)": [[350, "synthesize-modes-and-correlate-smac"]], "Comparing Modes": [[350, "comparing-modes"]], "Adding Another Beam": [[350, "adding-another-beam"]], "Applying Constraints to the System": [[350, "applying-constraints-to-the-system"]], "Frequency-Based Substructuring": [[350, "frequency-based-substructuring"]], "Usage": [[351, "usage"]], "Installation": [[351, "installation"]], "SDynPy Overview": [[351, "sdynpy-overview"]], "SDynPy Core Data Objects": [[351, "sdynpy-core-data-objects"]], "Loading Test Data": [[351, "loading-test-data"]], "Finite Element Models": [[351, "finite-element-models"]], "Experimental Modal Analysis": [[351, "experimental-modal-analysis"]], "Documentation": [[351, "documentation"]], "Signal Processing": [[351, "signal-processing"]]}, "indexentries": {"module": [[0, "module-sdynpy"], [1, "module-sdynpy.core"], [2, "module-sdynpy.core.sdynpy_array"], [4, "module-sdynpy.core.sdynpy_colors"], [5, "module-sdynpy.core.sdynpy_coordinate"], [13, "module-sdynpy.core.sdynpy_data"], [46, "module-sdynpy.core.sdynpy_geometry"], [72, "module-sdynpy.core.sdynpy_matrix"], [75, "module-sdynpy.core.sdynpy_shape"], [90, "module-sdynpy.core.sdynpy_system"], [93, "module-sdynpy.demo"], [94, "module-sdynpy.demo.beam_airplane"], [96, "module-sdynpy.demo.beam_plate"], [98, "module-sdynpy.doc"], [99, "module-sdynpy.doc.sdynpy_latex"], [103, "module-sdynpy.doc.sdynpy_ppt"], [113, "module-sdynpy.fem"], [114, "module-sdynpy.fem.sdynpy_beam"], [118, "module-sdynpy.fem.sdynpy_dof"], [121, "module-sdynpy.fem.sdynpy_exodus"], [130, "module-sdynpy.fem.sdynpy_shaker"], [132, "module-sdynpy.fileio"], [133, "module-sdynpy.fileio.sdynpy_rattlesnake"], [140, "module-sdynpy.fileio.sdynpy_tshaker"], [145, "module-sdynpy.fileio.sdynpy_uff"], [152, "module-sdynpy.fileio.sdynpy_uff_datasets"], [153, "module-sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_151"], [156, "module-sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_164"], [159, "module-sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_1858"], [163, "module-sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2400"], [166, "module-sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2411"], [169, "module-sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2412"], [172, "module-sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2420"], [175, "module-sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55"], [178, "module-sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_58"], [182, "module-sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_82"], [185, "module-sdynpy.fileio.sdynpy_vic"], [192, "module-sdynpy.modal"], [193, "module-sdynpy.modal.sdynpy_ccmif"], [196, "module-sdynpy.modal.sdynpy_modal_test"], [199, "module-sdynpy.modal.sdynpy_modeshape"], [207, "module-sdynpy.modal.sdynpy_polypy"], [211, "module-sdynpy.modal.sdynpy_signal_processing_gui"], [213, "module-sdynpy.modal.sdynpy_smac"], [220, "module-sdynpy.signal_processing"], [221, "module-sdynpy.signal_processing.sdynpy_camera"], [234, "module-sdynpy.signal_processing.sdynpy_complex"], [236, "module-sdynpy.signal_processing.sdynpy_correlation"], [243, "module-sdynpy.signal_processing.sdynpy_cpsd"], [260, "module-sdynpy.signal_processing.sdynpy_frf"], [267, "module-sdynpy.signal_processing.sdynpy_frf_inverse"], [272, "module-sdynpy.signal_processing.sdynpy_generator"], [281, "module-sdynpy.signal_processing.sdynpy_geometry_fitting"], [292, "module-sdynpy.signal_processing.sdynpy_harmonic"], [294, "module-sdynpy.signal_processing.sdynpy_integration"], [301, "module-sdynpy.signal_processing.sdynpy_lrm"], [303, "module-sdynpy.signal_processing.sdynpy_rotation"], [311, "module-sdynpy.signal_processing.sdynpy_srs"]], "sdynpy": [[0, "module-sdynpy"]], "sdynpy.core": [[1, "module-sdynpy.core"]], "sdynpy.core.sdynpy_array": [[2, "module-sdynpy.core.sdynpy_array"]], "sdynpyarray (class in sdynpy.core.sdynpy_array)": [[3, "sdynpy.core.sdynpy_array.SdynpyArray"]], "__init__() (sdynpyarray method)": [[3, "sdynpy.core.sdynpy_array.SdynpyArray.__init__"]], "assemble_mat_dict() (sdynpyarray method)": [[3, "sdynpy.core.sdynpy_array.SdynpyArray.assemble_mat_dict"]], "fields (sdynpyarray property)": [[3, "sdynpy.core.sdynpy_array.SdynpyArray.fields"]], "load() (sdynpyarray class method)": [[3, "sdynpy.core.sdynpy_array.SdynpyArray.load"]], "ndenumerate() (sdynpyarray method)": [[3, "sdynpy.core.sdynpy_array.SdynpyArray.ndenumerate"]], "save() (sdynpyarray method)": [[3, "sdynpy.core.sdynpy_array.SdynpyArray.save"]], "savemat() (sdynpyarray method)": [[3, "sdynpy.core.sdynpy_array.SdynpyArray.savemat"]], "sdynpy.core.sdynpy_colors": [[4, "module-sdynpy.core.sdynpy_colors"]], "sdynpy.core.sdynpy_coordinate": [[5, "module-sdynpy.core.sdynpy_coordinate"]], "coordinatearray (class in sdynpy.core.sdynpy_coordinate)": [[6, "sdynpy.core.sdynpy_coordinate.CoordinateArray"]], "__init__() (coordinatearray method)": [[6, "sdynpy.core.sdynpy_coordinate.CoordinateArray.__init__"]], "abs() (coordinatearray method)": [[6, "sdynpy.core.sdynpy_coordinate.CoordinateArray.abs"]], "data_dtype (coordinatearray attribute)": [[6, "sdynpy.core.sdynpy_coordinate.CoordinateArray.data_dtype"]], "direction_string_array() (coordinatearray method)": [[6, "sdynpy.core.sdynpy_coordinate.CoordinateArray.direction_string_array"]], "from_matlab_cellstr() (coordinatearray class method)": [[6, "sdynpy.core.sdynpy_coordinate.CoordinateArray.from_matlab_cellstr"]], "from_nodelist() (coordinatearray class method)": [[6, "sdynpy.core.sdynpy_coordinate.CoordinateArray.from_nodelist"]], "local_direction() (coordinatearray method)": [[6, "sdynpy.core.sdynpy_coordinate.CoordinateArray.local_direction"]], "offset_node_ids() (coordinatearray method)": [[6, "sdynpy.core.sdynpy_coordinate.CoordinateArray.offset_node_ids"]], "sign() (coordinatearray method)": [[6, "sdynpy.core.sdynpy_coordinate.CoordinateArray.sign"]], "string_array() (coordinatearray method)": [[6, "sdynpy.core.sdynpy_coordinate.CoordinateArray.string_array"]], "coordinate_array() (in module sdynpy.core.sdynpy_coordinate)": [[7, "sdynpy.core.sdynpy_coordinate.coordinate_array"]], "create_coordinate_string() (in module sdynpy.core.sdynpy_coordinate)": [[8, "sdynpy.core.sdynpy_coordinate.create_coordinate_string"]], "from_matlab_cellstr() (in module sdynpy.core.sdynpy_coordinate)": [[9, "sdynpy.core.sdynpy_coordinate.from_matlab_cellstr"]], "from_nodelist() (in module sdynpy.core.sdynpy_coordinate)": [[10, "sdynpy.core.sdynpy_coordinate.from_nodelist"]], "outer_product() (in module sdynpy.core.sdynpy_coordinate)": [[11, "sdynpy.core.sdynpy_coordinate.outer_product"]], "parse_coordinate_string() (in module sdynpy.core.sdynpy_coordinate)": [[12, "sdynpy.core.sdynpy_coordinate.parse_coordinate_string"]], "sdynpy.core.sdynpy_data": [[13, "module-sdynpy.core.sdynpy_data"]], "abscissaindexextractor (class in sdynpy.core.sdynpy_data)": [[14, "sdynpy.core.sdynpy_data.AbscissaIndexExtractor"]], "__init__() (abscissaindexextractor method)": [[14, "sdynpy.core.sdynpy_data.AbscissaIndexExtractor.__init__"]], "abscissavalueextractor (class in sdynpy.core.sdynpy_data)": [[15, "sdynpy.core.sdynpy_data.AbscissaValueExtractor"]], "__init__() (abscissavalueextractor method)": [[15, "sdynpy.core.sdynpy_data.AbscissaValueExtractor.__init__"]], "coherence (cpsdplot.datatype attribute)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.DataType.COHERENCE"]], "cpsdplot (class in sdynpy.core.sdynpy_data)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot"]], "cpsdplot.datatype (class in sdynpy.core.sdynpy_data)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.DataType"]], "imaginary (cpsdplot.datatype attribute)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.DataType.IMAGINARY"]], "magnitude (cpsdplot.datatype attribute)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.DataType.MAGNITUDE"]], "phase (cpsdplot.datatype attribute)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.DataType.PHASE"]], "real (cpsdplot.datatype attribute)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.DataType.REAL"]], "__init__() (cpsdplot method)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.__init__"]], "clear_selection() (cpsdplot method)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.clear_selection"]], "coherence_state() (cpsdplot method)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.coherence_state"]], "connectui() (cpsdplot method)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.connectUI"]], "deselect_diagonal() (cpsdplot method)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.deselect_diagonal"]], "deselect_lower_triangular() (cpsdplot method)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.deselect_lower_triangular"]], "deselect_upper_triangular() (cpsdplot method)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.deselect_upper_triangular"]], "extend_selection_matrix() (cpsdplot method)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.extend_selection_matrix"]], "find_function_types() (cpsdplot method)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.find_function_types"]], "imaginary_state() (cpsdplot method)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.imaginary_state"]], "initui() (cpsdplot method)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.initUI"]], "init_matrix_plot() (cpsdplot method)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.init_matrix_plot"]], "invert_selection() (cpsdplot method)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.invert_selection"]], "magnitude_state() (cpsdplot method)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.magnitude_state"]], "phase_state() (cpsdplot method)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.phase_state"]], "plot() (cpsdplot method)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.plot"]], "plot_selected_function() (cpsdplot method)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.plot_selected_function"]], "real_state() (cpsdplot method)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.real_state"]], "select_diagonal() (cpsdplot method)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.select_diagonal"]], "select_lower_triangular() (cpsdplot method)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.select_lower_triangular"]], "select_plotted() (cpsdplot method)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.select_plotted"]], "select_upper_triangular() (cpsdplot method)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.select_upper_triangular"]], "selector_click() (cpsdplot method)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.selector_click"]], "selector_unclick() (cpsdplot method)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.selector_unclick"]], "settext() (cpsdplot method)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.settext"]], "state_changed() (cpsdplot method)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.state_changed"]], "update_selection() (cpsdplot method)": [[16, "sdynpy.core.sdynpy_data.CPSDPlot.update_selection"]], "coherencearray (class in sdynpy.core.sdynpy_data)": [[17, "sdynpy.core.sdynpy_data.CoherenceArray"]], "__init__() (coherencearray method)": [[17, "sdynpy.core.sdynpy_data.CoherenceArray.__init__"]], "from_time_data() (coherencearray static method)": [[17, "sdynpy.core.sdynpy_data.CoherenceArray.from_time_data"]], "function_type (coherencearray property)": [[17, "sdynpy.core.sdynpy_data.CoherenceArray.function_type"]], "complextype (class in sdynpy.core.sdynpy_data)": [[18, "sdynpy.core.sdynpy_data.ComplexType"]], "imaginary (complextype attribute)": [[18, "sdynpy.core.sdynpy_data.ComplexType.IMAGINARY"]], "magnitude (complextype attribute)": [[18, "sdynpy.core.sdynpy_data.ComplexType.MAGNITUDE"]], "magphase (complextype attribute)": [[18, "sdynpy.core.sdynpy_data.ComplexType.MAGPHASE"]], "phase (complextype attribute)": [[18, "sdynpy.core.sdynpy_data.ComplexType.PHASE"]], "real (complextype attribute)": [[18, "sdynpy.core.sdynpy_data.ComplexType.REAL"]], "realimag (complextype attribute)": [[18, "sdynpy.core.sdynpy_data.ComplexType.REALIMAG"]], "__init__() (complextype method)": [[18, "sdynpy.core.sdynpy_data.ComplexType.__init__"]], "correlationarray (class in sdynpy.core.sdynpy_data)": [[19, "sdynpy.core.sdynpy_data.CorrelationArray"]], "__init__() (correlationarray method)": [[19, "sdynpy.core.sdynpy_data.CorrelationArray.__init__"]], "function_type (correlationarray property)": [[19, "sdynpy.core.sdynpy_data.CorrelationArray.function_type"]], "decayedsinetable (class in sdynpy.core.sdynpy_data)": [[20, "sdynpy.core.sdynpy_data.DecayedSineTable"]], "__init__() (decayedsinetable method)": [[20, "sdynpy.core.sdynpy_data.DecayedSineTable.__init__"]], "construct_displacement() (decayedsinetable method)": [[20, "sdynpy.core.sdynpy_data.DecayedSineTable.construct_displacement"]], "construct_signal() (decayedsinetable method)": [[20, "sdynpy.core.sdynpy_data.DecayedSineTable.construct_signal"]], "construct_velocity() (decayedsinetable method)": [[20, "sdynpy.core.sdynpy_data.DecayedSineTable.construct_velocity"]], "autocorrelation (functiontypes attribute)": [[21, "sdynpy.core.sdynpy_data.FunctionTypes.AUTOCORRELATION"]], "autospectrum (functiontypes attribute)": [[21, "sdynpy.core.sdynpy_data.FunctionTypes.AUTOSPECTRUM"]], "coherence (functiontypes attribute)": [[21, "sdynpy.core.sdynpy_data.FunctionTypes.COHERENCE"]], "crosscorrelation (functiontypes attribute)": [[21, "sdynpy.core.sdynpy_data.FunctionTypes.CROSSCORRELATION"]], "crossspectrum (functiontypes attribute)": [[21, "sdynpy.core.sdynpy_data.FunctionTypes.CROSSSPECTRUM"]], "cumulative_frequency_distribution (functiontypes attribute)": [[21, "sdynpy.core.sdynpy_data.FunctionTypes.CUMULATIVE_FREQUENCY_DISTRIBUTION"]], "eigenvalue (functiontypes attribute)": [[21, "sdynpy.core.sdynpy_data.FunctionTypes.EIGENVALUE"]], "eigenvector (functiontypes attribute)": [[21, "sdynpy.core.sdynpy_data.FunctionTypes.EIGENVECTOR"]], "energy_spectral_density (functiontypes attribute)": [[21, "sdynpy.core.sdynpy_data.FunctionTypes.ENERGY_SPECTRAL_DENSITY"]], "finite_impulse_response_filter (functiontypes attribute)": [[21, "sdynpy.core.sdynpy_data.FunctionTypes.FINITE_IMPULSE_RESPONSE_FILTER"]], "force_pattern (functiontypes attribute)": [[21, "sdynpy.core.sdynpy_data.FunctionTypes.FORCE_PATTERN"]], "frequency_response_function (functiontypes attribute)": [[21, "sdynpy.core.sdynpy_data.FunctionTypes.FREQUENCY_RESPONSE_FUNCTION"]], "functiontypes (class in sdynpy.core.sdynpy_data)": [[21, "sdynpy.core.sdynpy_data.FunctionTypes"]], "general (functiontypes attribute)": [[21, "sdynpy.core.sdynpy_data.FunctionTypes.GENERAL"]], "impulse_response_function (functiontypes attribute)": [[21, "sdynpy.core.sdynpy_data.FunctionTypes.IMPULSE_RESPONSE_FUNCTION"]], "mode_indicator_function (functiontypes attribute)": [[21, "sdynpy.core.sdynpy_data.FunctionTypes.MODE_INDICATOR_FUNCTION"]], "multiple_coherence (functiontypes attribute)": [[21, "sdynpy.core.sdynpy_data.FunctionTypes.MULTIPLE_COHERENCE"]], "orbit (functiontypes attribute)": [[21, "sdynpy.core.sdynpy_data.FunctionTypes.ORBIT"]], "order_function (functiontypes attribute)": [[21, "sdynpy.core.sdynpy_data.FunctionTypes.ORDER_FUNCTION"]], "partial_coherence (functiontypes attribute)": [[21, "sdynpy.core.sdynpy_data.FunctionTypes.PARTIAL_COHERENCE"]], "partial_power (functiontypes attribute)": [[21, "sdynpy.core.sdynpy_data.FunctionTypes.PARTIAL_POWER"]], "peaks_valley (functiontypes attribute)": [[21, "sdynpy.core.sdynpy_data.FunctionTypes.PEAKS_VALLEY"]], "phase_compensation (functiontypes attribute)": [[21, "sdynpy.core.sdynpy_data.FunctionTypes.PHASE_COMPENSATION"]], "power_spectral_density (functiontypes attribute)": [[21, "sdynpy.core.sdynpy_data.FunctionTypes.POWER_SPECTRAL_DENSITY"]], "probability_density_function (functiontypes attribute)": [[21, "sdynpy.core.sdynpy_data.FunctionTypes.PROBABILITY_DENSITY_FUNCTION"]], "shock_response_spectrum (functiontypes attribute)": [[21, "sdynpy.core.sdynpy_data.FunctionTypes.SHOCK_RESPONSE_SPECTRUM"]], "spectrum (functiontypes attribute)": [[21, "sdynpy.core.sdynpy_data.FunctionTypes.SPECTRUM"]], "strain_per_cycle (functiontypes attribute)": [[21, "sdynpy.core.sdynpy_data.FunctionTypes.STRAIN_PER_CYCLE"]], "stress_per_cycle (functiontypes attribute)": [[21, "sdynpy.core.sdynpy_data.FunctionTypes.STRESS_PER_CYCLE"]], "time_response (functiontypes attribute)": [[21, "sdynpy.core.sdynpy_data.FunctionTypes.TIME_RESPONSE"]], "transmisibility (functiontypes attribute)": [[21, "sdynpy.core.sdynpy_data.FunctionTypes.TRANSMISIBILITY"]], "__init__() (functiontypes method)": [[21, "sdynpy.core.sdynpy_data.FunctionTypes.__init__"]], "guiplot (class in sdynpy.core.sdynpy_data)": [[22, "sdynpy.core.sdynpy_data.GUIPlot"]], "__init__() (guiplot method)": [[22, "sdynpy.core.sdynpy_data.GUIPlot.__init__"]], "connect_callbacks() (guiplot method)": [[22, "sdynpy.core.sdynpy_data.GUIPlot.connect_callbacks"]], "deselect_all_complex_types_except() (guiplot method)": [[22, "sdynpy.core.sdynpy_data.GUIPlot.deselect_all_complex_types_except"]], "selection_changed() (guiplot method)": [[22, "sdynpy.core.sdynpy_data.GUIPlot.selection_changed"]], "set_imaginary() (guiplot method)": [[22, "sdynpy.core.sdynpy_data.GUIPlot.set_imaginary"]], "set_magnitude() (guiplot method)": [[22, "sdynpy.core.sdynpy_data.GUIPlot.set_magnitude"]], "set_magnitude_phase() (guiplot method)": [[22, "sdynpy.core.sdynpy_data.GUIPlot.set_magnitude_phase"]], "set_phase() (guiplot method)": [[22, "sdynpy.core.sdynpy_data.GUIPlot.set_phase"]], "set_real() (guiplot method)": [[22, "sdynpy.core.sdynpy_data.GUIPlot.set_real"]], "set_real_imag() (guiplot method)": [[22, "sdynpy.core.sdynpy_data.GUIPlot.set_real_imag"]], "update() (guiplot method)": [[22, "sdynpy.core.sdynpy_data.GUIPlot.update"]], "update_abscissa_log() (guiplot method)": [[22, "sdynpy.core.sdynpy_data.GUIPlot.update_abscissa_log"]], "update_checkbox() (guiplot method)": [[22, "sdynpy.core.sdynpy_data.GUIPlot.update_checkbox"]], "update_data() (guiplot method)": [[22, "sdynpy.core.sdynpy_data.GUIPlot.update_data"]], "update_ordinate_log() (guiplot method)": [[22, "sdynpy.core.sdynpy_data.GUIPlot.update_ordinate_log"]], "impulseresponsefunctionarray (class in sdynpy.core.sdynpy_data)": [[23, "sdynpy.core.sdynpy_data.ImpulseResponseFunctionArray"]], "__init__() (impulseresponsefunctionarray method)": [[23, "sdynpy.core.sdynpy_data.ImpulseResponseFunctionArray.__init__"]], "enforce_causality() (impulseresponsefunctionarray method)": [[23, "sdynpy.core.sdynpy_data.ImpulseResponseFunctionArray.enforce_causality"]], "fft() (impulseresponsefunctionarray method)": [[23, "sdynpy.core.sdynpy_data.ImpulseResponseFunctionArray.fft"]], "find_end_of_ringdown() (impulseresponsefunctionarray method)": [[23, "sdynpy.core.sdynpy_data.ImpulseResponseFunctionArray.find_end_of_ringdown"]], "function_type (impulseresponsefunctionarray property)": [[23, "sdynpy.core.sdynpy_data.ImpulseResponseFunctionArray.function_type"]], "mplcanvas (class in sdynpy.core.sdynpy_data)": [[24, "sdynpy.core.sdynpy_data.MPLCanvas"]], "__init__() (mplcanvas method)": [[24, "sdynpy.core.sdynpy_data.MPLCanvas.__init__"]], "mplmulticanvas (class in sdynpy.core.sdynpy_data)": [[25, "sdynpy.core.sdynpy_data.MPLMultiCanvas"]], "__init__() (mplmulticanvas method)": [[25, "sdynpy.core.sdynpy_data.MPLMultiCanvas.__init__"]], "modeindicatorfunctionarray (class in sdynpy.core.sdynpy_data)": [[26, "sdynpy.core.sdynpy_data.ModeIndicatorFunctionArray"]], "__init__() (modeindicatorfunctionarray method)": [[26, "sdynpy.core.sdynpy_data.ModeIndicatorFunctionArray.__init__"]], "function_type (modeindicatorfunctionarray property)": [[26, "sdynpy.core.sdynpy_data.ModeIndicatorFunctionArray.function_type"]], "multiplecoherencearray (class in sdynpy.core.sdynpy_data)": [[27, "sdynpy.core.sdynpy_data.MultipleCoherenceArray"]], "__init__() (multiplecoherencearray method)": [[27, "sdynpy.core.sdynpy_data.MultipleCoherenceArray.__init__"]], "from_time_data() (multiplecoherencearray static method)": [[27, "sdynpy.core.sdynpy_data.MultipleCoherenceArray.from_time_data"]], "function_type (multiplecoherencearray property)": [[27, "sdynpy.core.sdynpy_data.MultipleCoherenceArray.function_type"]], "nddataarray (class in sdynpy.core.sdynpy_data)": [[28, "sdynpy.core.sdynpy_data.NDDataArray"]], "__init__() (nddataarray method)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.__init__"]], "abscissa_spacing (nddataarray property)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.abscissa_spacing"]], "argmax() (nddataarray method)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.argmax"]], "argmin() (nddataarray method)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.argmin"]], "data_dimension (nddataarray property)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.data_dimension"]], "downsample() (nddataarray method)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.downsample"]], "extract_elements() (nddataarray method)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.extract_elements"]], "extract_elements_by_abscissa() (nddataarray method)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.extract_elements_by_abscissa"]], "from_uff() (nddataarray static method)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.from_uff"]], "from_unv() (nddataarray static method)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.from_unv"]], "function_type (nddataarray property)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.function_type"]], "get_drive_points() (nddataarray method)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.get_drive_points"]], "get_reciprocal_data() (nddataarray method)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.get_reciprocal_data"]], "idx_by_ab (nddataarray property)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.idx_by_ab"]], "idx_by_el (nddataarray property)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.idx_by_el"]], "interpolate() (nddataarray method)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.interpolate"]], "join() (nddataarray class method)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.join"]], "load() (nddataarray class method)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.load"]], "max() (nddataarray method)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.max"]], "min() (nddataarray method)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.min"]], "num_coordinates (nddataarray property)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.num_coordinates"]], "num_elements (nddataarray property)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.num_elements"]], "plot() (nddataarray method)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.plot"]], "plot_image() (nddataarray method)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.plot_image"]], "reference_coordinate (nddataarray property)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.reference_coordinate"]], "reshape_to_matrix() (nddataarray method)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.reshape_to_matrix"]], "response_coordinate (nddataarray property)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.response_coordinate"]], "save() (nddataarray method)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.save"]], "to_imat_struct() (nddataarray method)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.to_imat_struct"]], "to_imat_struct_array() (nddataarray method)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.to_imat_struct_array"]], "to_shape_array() (nddataarray method)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.to_shape_array"]], "transform_coordinate_system() (nddataarray method)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.transform_coordinate_system"]], "validate_common_abscissa() (nddataarray method)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.validate_common_abscissa"]], "zero_pad() (nddataarray method)": [[28, "sdynpy.core.sdynpy_data.NDDataArray.zero_pad"]], "powerspectraldensityarray (class in sdynpy.core.sdynpy_data)": [[29, "sdynpy.core.sdynpy_data.PowerSpectralDensityArray"]], "__init__() (powerspectraldensityarray method)": [[29, "sdynpy.core.sdynpy_data.PowerSpectralDensityArray.__init__"]], "angle() (powerspectraldensityarray method)": [[29, "sdynpy.core.sdynpy_data.PowerSpectralDensityArray.angle"]], "bandwidth_average() (powerspectraldensityarray method)": [[29, "sdynpy.core.sdynpy_data.PowerSpectralDensityArray.bandwidth_average"]], "coherence() (powerspectraldensityarray method)": [[29, "sdynpy.core.sdynpy_data.PowerSpectralDensityArray.coherence"]], "compare_asds() (powerspectraldensityarray static method)": [[29, "sdynpy.core.sdynpy_data.PowerSpectralDensityArray.compare_asds"]], "error_summary() (powerspectraldensityarray method)": [[29, "sdynpy.core.sdynpy_data.PowerSpectralDensityArray.error_summary"]], "eye() (powerspectraldensityarray class method)": [[29, "sdynpy.core.sdynpy_data.PowerSpectralDensityArray.eye"]], "from_time_data() (powerspectraldensityarray static method)": [[29, "sdynpy.core.sdynpy_data.PowerSpectralDensityArray.from_time_data"]], "function_type (powerspectraldensityarray property)": [[29, "sdynpy.core.sdynpy_data.PowerSpectralDensityArray.function_type"]], "generate_time_history() (powerspectraldensityarray method)": [[29, "sdynpy.core.sdynpy_data.PowerSpectralDensityArray.generate_time_history"]], "get_asd() (powerspectraldensityarray method)": [[29, "sdynpy.core.sdynpy_data.PowerSpectralDensityArray.get_asd"]], "mimo_forward() (powerspectraldensityarray method)": [[29, "sdynpy.core.sdynpy_data.PowerSpectralDensityArray.mimo_forward"]], "mimo_inverse() (powerspectraldensityarray method)": [[29, "sdynpy.core.sdynpy_data.PowerSpectralDensityArray.mimo_inverse"]], "plot_asds() (powerspectraldensityarray method)": [[29, "sdynpy.core.sdynpy_data.PowerSpectralDensityArray.plot_asds"]], "plot_magnitude_coherence_phase() (powerspectraldensityarray method)": [[29, "sdynpy.core.sdynpy_data.PowerSpectralDensityArray.plot_magnitude_coherence_phase"]], "plot_singular_values() (powerspectraldensityarray method)": [[29, "sdynpy.core.sdynpy_data.PowerSpectralDensityArray.plot_singular_values"]], "rms() (powerspectraldensityarray method)": [[29, "sdynpy.core.sdynpy_data.PowerSpectralDensityArray.rms"]], "set_coherence_phase() (powerspectraldensityarray method)": [[29, "sdynpy.core.sdynpy_data.PowerSpectralDensityArray.set_coherence_phase"]], "svd() (powerspectraldensityarray method)": [[29, "sdynpy.core.sdynpy_data.PowerSpectralDensityArray.svd"]], "to_rattlesnake_specification() (powerspectraldensityarray method)": [[29, "sdynpy.core.sdynpy_data.PowerSpectralDensityArray.to_rattlesnake_specification"]], "powerspectrumarray (class in sdynpy.core.sdynpy_data)": [[30, "sdynpy.core.sdynpy_data.PowerSpectrumArray"]], "__init__() (powerspectrumarray method)": [[30, "sdynpy.core.sdynpy_data.PowerSpectrumArray.__init__"]], "function_type (powerspectrumarray property)": [[30, "sdynpy.core.sdynpy_data.PowerSpectrumArray.function_type"]], "shockresponsespectrumarray (class in sdynpy.core.sdynpy_data)": [[31, "sdynpy.core.sdynpy_data.ShockResponseSpectrumArray"]], "__init__() (shockresponsespectrumarray method)": [[31, "sdynpy.core.sdynpy_data.ShockResponseSpectrumArray.__init__"]], "function_type (shockresponsespectrumarray property)": [[31, "sdynpy.core.sdynpy_data.ShockResponseSpectrumArray.function_type"]], "plot() (shockresponsespectrumarray method)": [[31, "sdynpy.core.sdynpy_data.ShockResponseSpectrumArray.plot"]], "sum_decayed_sines() (shockresponsespectrumarray method)": [[31, "sdynpy.core.sdynpy_data.ShockResponseSpectrumArray.sum_decayed_sines"]], "acceleration (specificdatatype attribute)": [[32, "sdynpy.core.sdynpy_data.SpecificDataType.ACCELERATION"]], "displacement (specificdatatype attribute)": [[32, "sdynpy.core.sdynpy_data.SpecificDataType.DISPLACEMENT"]], "excitation_force (specificdatatype attribute)": [[32, "sdynpy.core.sdynpy_data.SpecificDataType.EXCITATION_FORCE"]], "frequency (specificdatatype attribute)": [[32, "sdynpy.core.sdynpy_data.SpecificDataType.FREQUENCY"]], "general (specificdatatype attribute)": [[32, "sdynpy.core.sdynpy_data.SpecificDataType.GENERAL"]], "heat_flux (specificdatatype attribute)": [[32, "sdynpy.core.sdynpy_data.SpecificDataType.HEAT_FLUX"]], "mass (specificdatatype attribute)": [[32, "sdynpy.core.sdynpy_data.SpecificDataType.MASS"]], "order (specificdatatype attribute)": [[32, "sdynpy.core.sdynpy_data.SpecificDataType.ORDER"]], "pressure (specificdatatype attribute)": [[32, "sdynpy.core.sdynpy_data.SpecificDataType.PRESSURE"]], "reaction_force (specificdatatype attribute)": [[32, "sdynpy.core.sdynpy_data.SpecificDataType.REACTION_FORCE"]], "rpm (specificdatatype attribute)": [[32, "sdynpy.core.sdynpy_data.SpecificDataType.RPM"]], "sound_intensity (specificdatatype attribute)": [[32, "sdynpy.core.sdynpy_data.SpecificDataType.SOUND_INTENSITY"]], "sound_power (specificdatatype attribute)": [[32, "sdynpy.core.sdynpy_data.SpecificDataType.SOUND_POWER"]], "sound_pressure (specificdatatype attribute)": [[32, "sdynpy.core.sdynpy_data.SpecificDataType.SOUND_PRESSURE"]], "strain (specificdatatype attribute)": [[32, "sdynpy.core.sdynpy_data.SpecificDataType.STRAIN"]], "stress (specificdatatype attribute)": [[32, "sdynpy.core.sdynpy_data.SpecificDataType.STRESS"]], "specificdatatype (class in sdynpy.core.sdynpy_data)": [[32, "sdynpy.core.sdynpy_data.SpecificDataType"]], "temperature (specificdatatype attribute)": [[32, "sdynpy.core.sdynpy_data.SpecificDataType.TEMPERATURE"]], "time (specificdatatype attribute)": [[32, "sdynpy.core.sdynpy_data.SpecificDataType.TIME"]], "unknown (specificdatatype attribute)": [[32, "sdynpy.core.sdynpy_data.SpecificDataType.UNKNOWN"]], "velocity (specificdatatype attribute)": [[32, "sdynpy.core.sdynpy_data.SpecificDataType.VELOCITY"]], "__init__() (specificdatatype method)": [[32, "sdynpy.core.sdynpy_data.SpecificDataType.__init__"]], "spectrumarray (class in sdynpy.core.sdynpy_data)": [[33, "sdynpy.core.sdynpy_data.SpectrumArray"]], "__init__() (spectrumarray method)": [[33, "sdynpy.core.sdynpy_data.SpectrumArray.__init__"]], "function_type (spectrumarray property)": [[33, "sdynpy.core.sdynpy_data.SpectrumArray.function_type"]], "ifft() (spectrumarray method)": [[33, "sdynpy.core.sdynpy_data.SpectrumArray.ifft"]], "interpolate_by_zero_pad() (spectrumarray method)": [[33, "sdynpy.core.sdynpy_data.SpectrumArray.interpolate_by_zero_pad"]], "plot() (spectrumarray method)": [[33, "sdynpy.core.sdynpy_data.SpectrumArray.plot"]], "plot_spectrogram() (spectrumarray method)": [[33, "sdynpy.core.sdynpy_data.SpectrumArray.plot_spectrogram"]], "timehistoryarray (class in sdynpy.core.sdynpy_data)": [[34, "sdynpy.core.sdynpy_data.TimeHistoryArray"]], "__init__() (timehistoryarray method)": [[34, "sdynpy.core.sdynpy_data.TimeHistoryArray.__init__"]], "burst_random_signal() (timehistoryarray class method)": [[34, "sdynpy.core.sdynpy_data.TimeHistoryArray.burst_random_signal"]], "chirp_signal() (timehistoryarray class method)": [[34, "sdynpy.core.sdynpy_data.TimeHistoryArray.chirp_signal"]], "cpsd() (timehistoryarray method)": [[34, "sdynpy.core.sdynpy_data.TimeHistoryArray.cpsd"]], "fft() (timehistoryarray method)": [[34, "sdynpy.core.sdynpy_data.TimeHistoryArray.fft"]], "find_signal_shift() (timehistoryarray method)": [[34, "sdynpy.core.sdynpy_data.TimeHistoryArray.find_signal_shift"]], "from_exodus() (timehistoryarray class method)": [[34, "sdynpy.core.sdynpy_data.TimeHistoryArray.from_exodus"]], "function_type (timehistoryarray property)": [[34, "sdynpy.core.sdynpy_data.TimeHistoryArray.function_type"]], "haversine_signal() (timehistoryarray class method)": [[34, "sdynpy.core.sdynpy_data.TimeHistoryArray.haversine_signal"]], "mimo_forward() (timehistoryarray method)": [[34, "sdynpy.core.sdynpy_data.TimeHistoryArray.mimo_forward"]], "mimo_inverse() (timehistoryarray method)": [[34, "sdynpy.core.sdynpy_data.TimeHistoryArray.mimo_inverse"]], "overlap_and_add() (timehistoryarray static method)": [[34, "sdynpy.core.sdynpy_data.TimeHistoryArray.overlap_and_add"]], "pseudorandom_signal() (timehistoryarray class method)": [[34, "sdynpy.core.sdynpy_data.TimeHistoryArray.pseudorandom_signal"]], "pulse_signal() (timehistoryarray class method)": [[34, "sdynpy.core.sdynpy_data.TimeHistoryArray.pulse_signal"]], "random_signal() (timehistoryarray class method)": [[34, "sdynpy.core.sdynpy_data.TimeHistoryArray.random_signal"]], "remove_rigid_body_motion() (timehistoryarray method)": [[34, "sdynpy.core.sdynpy_data.TimeHistoryArray.remove_rigid_body_motion"]], "rms() (timehistoryarray method)": [[34, "sdynpy.core.sdynpy_data.TimeHistoryArray.rms"]], "shift_signal() (timehistoryarray method)": [[34, "sdynpy.core.sdynpy_data.TimeHistoryArray.shift_signal"]], "sine_signal() (timehistoryarray class method)": [[34, "sdynpy.core.sdynpy_data.TimeHistoryArray.sine_signal"]], "sine_sweep_signal() (timehistoryarray class method)": [[34, "sdynpy.core.sdynpy_data.TimeHistoryArray.sine_sweep_signal"]], "split_into_frames() (timehistoryarray method)": [[34, "sdynpy.core.sdynpy_data.TimeHistoryArray.split_into_frames"]], "srs() (timehistoryarray method)": [[34, "sdynpy.core.sdynpy_data.TimeHistoryArray.srs"]], "stft() (timehistoryarray method)": [[34, "sdynpy.core.sdynpy_data.TimeHistoryArray.stft"]], "to_rattlesnake_specification() (timehistoryarray method)": [[34, "sdynpy.core.sdynpy_data.TimeHistoryArray.to_rattlesnake_specification"]], "transferfunctionarray (class in sdynpy.core.sdynpy_data)": [[35, "sdynpy.core.sdynpy_data.TransferFunctionArray"]], "__init__() (transferfunctionarray method)": [[35, "sdynpy.core.sdynpy_data.TransferFunctionArray.__init__"]], "compute_cmif() (transferfunctionarray method)": [[35, "sdynpy.core.sdynpy_data.TransferFunctionArray.compute_cmif"]], "compute_mif() (transferfunctionarray method)": [[35, "sdynpy.core.sdynpy_data.TransferFunctionArray.compute_mif"]], "compute_mmif() (transferfunctionarray method)": [[35, "sdynpy.core.sdynpy_data.TransferFunctionArray.compute_mmif"]], "compute_nmif() (transferfunctionarray method)": [[35, "sdynpy.core.sdynpy_data.TransferFunctionArray.compute_nmif"]], "delay_response() (transferfunctionarray method)": [[35, "sdynpy.core.sdynpy_data.TransferFunctionArray.delay_response"]], "enforce_causality() (transferfunctionarray method)": [[35, "sdynpy.core.sdynpy_data.TransferFunctionArray.enforce_causality"]], "from_time_data() (transferfunctionarray static method)": [[35, "sdynpy.core.sdynpy_data.TransferFunctionArray.from_time_data"]], "function_type (transferfunctionarray property)": [[35, "sdynpy.core.sdynpy_data.TransferFunctionArray.function_type"]], "ifft() (transferfunctionarray method)": [[35, "sdynpy.core.sdynpy_data.TransferFunctionArray.ifft"]], "interpolate_by_zero_pad() (transferfunctionarray method)": [[35, "sdynpy.core.sdynpy_data.TransferFunctionArray.interpolate_by_zero_pad"]], "plot() (transferfunctionarray method)": [[35, "sdynpy.core.sdynpy_data.TransferFunctionArray.plot"]], "plot_cond_num() (transferfunctionarray method)": [[35, "sdynpy.core.sdynpy_data.TransferFunctionArray.plot_cond_num"]], "plot_singular_values() (transferfunctionarray method)": [[35, "sdynpy.core.sdynpy_data.TransferFunctionArray.plot_singular_values"]], "plot_with_coherence() (transferfunctionarray method)": [[35, "sdynpy.core.sdynpy_data.TransferFunctionArray.plot_with_coherence"]], "substructure_by_constraint_matrix() (transferfunctionarray method)": [[35, "sdynpy.core.sdynpy_data.TransferFunctionArray.substructure_by_constraint_matrix"]], "substructure_by_coordinate() (transferfunctionarray method)": [[35, "sdynpy.core.sdynpy_data.TransferFunctionArray.substructure_by_coordinate"]], "svd() (transferfunctionarray method)": [[35, "sdynpy.core.sdynpy_data.TransferFunctionArray.svd"]], "transmissibilityarray (class in sdynpy.core.sdynpy_data)": [[36, "sdynpy.core.sdynpy_data.TransmissibilityArray"]], "__init__() (transmissibilityarray method)": [[36, "sdynpy.core.sdynpy_data.TransmissibilityArray.__init__"]], "function_type (transmissibilityarray property)": [[36, "sdynpy.core.sdynpy_data.TransmissibilityArray.function_type"]], "rotation (typequal attribute)": [[37, "sdynpy.core.sdynpy_data.TypeQual.ROTATION"]], "translation (typequal attribute)": [[37, "sdynpy.core.sdynpy_data.TypeQual.TRANSLATION"]], "typequal (class in sdynpy.core.sdynpy_data)": [[37, "sdynpy.core.sdynpy_data.TypeQual"]], "__init__() (typequal method)": [[37, "sdynpy.core.sdynpy_data.TypeQual.__init__"]], "data_array() (in module sdynpy.core.sdynpy_data)": [[38, "sdynpy.core.sdynpy_data.data_array"]], "decayed_sine_table() (in module sdynpy.core.sdynpy_data)": [[39, "sdynpy.core.sdynpy_data.decayed_sine_table"]], "frf_from_time_data() (in module sdynpy.core.sdynpy_data)": [[40, "sdynpy.core.sdynpy_data.frf_from_time_data"]], "from_imat_struct() (in module sdynpy.core.sdynpy_data)": [[41, "sdynpy.core.sdynpy_data.from_imat_struct"]], "from_uff() (in module sdynpy.core.sdynpy_data)": [[42, "sdynpy.core.sdynpy_data.from_uff"]], "from_unv() (in module sdynpy.core.sdynpy_data)": [[43, "sdynpy.core.sdynpy_data.from_unv"]], "join() (in module sdynpy.core.sdynpy_data)": [[44, "sdynpy.core.sdynpy_data.join"]], "load() (in module sdynpy.core.sdynpy_data)": [[45, "sdynpy.core.sdynpy_data.load"]], "sdynpy.core.sdynpy_geometry": [[46, "module-sdynpy.core.sdynpy_geometry"]], "coordinatesystemarray (class in sdynpy.core.sdynpy_geometry)": [[47, "sdynpy.core.sdynpy_geometry.CoordinateSystemArray"]], "__init__() (coordinatesystemarray method)": [[47, "sdynpy.core.sdynpy_geometry.CoordinateSystemArray.__init__"]], "data_dtype (coordinatesystemarray attribute)": [[47, "sdynpy.core.sdynpy_geometry.CoordinateSystemArray.data_dtype"]], "from_unv() (coordinatesystemarray static method)": [[47, "sdynpy.core.sdynpy_geometry.CoordinateSystemArray.from_unv"]], "deflectionshapeplotter (class in sdynpy.core.sdynpy_geometry)": [[48, "sdynpy.core.sdynpy_geometry.DeflectionShapePlotter"]], "__init__() (deflectionshapeplotter method)": [[48, "sdynpy.core.sdynpy_geometry.DeflectionShapePlotter.__init__"]], "modify_abscissa() (deflectionshapeplotter method)": [[48, "sdynpy.core.sdynpy_geometry.DeflectionShapePlotter.modify_abscissa"]], "save_multiline_animation() (deflectionshapeplotter method)": [[48, "sdynpy.core.sdynpy_geometry.DeflectionShapePlotter.save_multiline_animation"]], "elementarray (class in sdynpy.core.sdynpy_geometry)": [[49, "sdynpy.core.sdynpy_geometry.ElementArray"]], "__init__() (elementarray method)": [[49, "sdynpy.core.sdynpy_geometry.ElementArray.__init__"]], "data_dtype (elementarray attribute)": [[49, "sdynpy.core.sdynpy_geometry.ElementArray.data_dtype"]], "from_unv() (elementarray static method)": [[49, "sdynpy.core.sdynpy_geometry.ElementArray.from_unv"]], "reduce() (elementarray method)": [[49, "sdynpy.core.sdynpy_geometry.ElementArray.reduce"]], "geometry (class in sdynpy.core.sdynpy_geometry)": [[50, "sdynpy.core.sdynpy_geometry.Geometry"]], "__init__() (geometry method)": [[50, "sdynpy.core.sdynpy_geometry.Geometry.__init__"]], "add_element() (geometry method)": [[50, "sdynpy.core.sdynpy_geometry.Geometry.add_element"]], "add_traceline() (geometry method)": [[50, "sdynpy.core.sdynpy_geometry.Geometry.add_traceline"]], "camera_visualization() (geometry class method)": [[50, "sdynpy.core.sdynpy_geometry.Geometry.camera_visualization"]], "compress_ids() (geometry method)": [[50, "sdynpy.core.sdynpy_geometry.Geometry.compress_ids"]], "copy() (geometry method)": [[50, "sdynpy.core.sdynpy_geometry.Geometry.copy"]], "from_excel_template() (geometry class method)": [[50, "sdynpy.core.sdynpy_geometry.Geometry.from_excel_template"]], "from_exodus() (geometry class method)": [[50, "sdynpy.core.sdynpy_geometry.Geometry.from_exodus"]], "from_imat_struct() (geometry class method)": [[50, "sdynpy.core.sdynpy_geometry.Geometry.from_imat_struct"]], "from_uff() (geometry class method)": [[50, "sdynpy.core.sdynpy_geometry.Geometry.from_uff"]], "from_unv() (geometry class method)": [[50, "sdynpy.core.sdynpy_geometry.Geometry.from_unv"]], "global_deflection() (geometry method)": [[50, "sdynpy.core.sdynpy_geometry.Geometry.global_deflection"]], "global_node_coordinate() (geometry method)": [[50, "sdynpy.core.sdynpy_geometry.Geometry.global_node_coordinate"]], "load() (geometry class method)": [[50, "sdynpy.core.sdynpy_geometry.Geometry.load"]], "map_ids() (geometry method)": [[50, "sdynpy.core.sdynpy_geometry.Geometry.map_ids"]], "modify_ids() (geometry method)": [[50, "sdynpy.core.sdynpy_geometry.Geometry.modify_ids"]], "node_by_global_position() (geometry method)": [[50, "sdynpy.core.sdynpy_geometry.Geometry.node_by_global_position"]], "overlay_geometries() (geometry static method)": [[50, "sdynpy.core.sdynpy_geometry.Geometry.overlay_geometries"]], "plot() (geometry method)": [[50, "sdynpy.core.sdynpy_geometry.Geometry.plot"]], "plot_coordinate() (geometry method)": [[50, "sdynpy.core.sdynpy_geometry.Geometry.plot_coordinate"]], "plot_deflection_shape() (geometry method)": [[50, "sdynpy.core.sdynpy_geometry.Geometry.plot_deflection_shape"]], "plot_shape() (geometry method)": [[50, "sdynpy.core.sdynpy_geometry.Geometry.plot_shape"]], "plot_transient() (geometry method)": [[50, "sdynpy.core.sdynpy_geometry.Geometry.plot_transient"]], "reduce() (geometry method)": [[50, "sdynpy.core.sdynpy_geometry.Geometry.reduce"]], "rigid_body_shapes() (geometry method)": [[50, "sdynpy.core.sdynpy_geometry.Geometry.rigid_body_shapes"]], "save() (geometry method)": [[50, "sdynpy.core.sdynpy_geometry.Geometry.save"]], "write_excel_template() (geometry static method)": [[50, "sdynpy.core.sdynpy_geometry.Geometry.write_excel_template"]], "write_to_unv() (geometry method)": [[50, "sdynpy.core.sdynpy_geometry.Geometry.write_to_unv"]], "geometryplotter (class in sdynpy.core.sdynpy_geometry)": [[51, "sdynpy.core.sdynpy_geometry.GeometryPlotter"]], "__init__() (geometryplotter method)": [[51, "sdynpy.core.sdynpy_geometry.GeometryPlotter.__init__"]], "save_rotation_animation() (geometryplotter method)": [[51, "sdynpy.core.sdynpy_geometry.GeometryPlotter.save_rotation_animation"]], "nodearray (class in sdynpy.core.sdynpy_geometry)": [[52, "sdynpy.core.sdynpy_geometry.NodeArray"]], "__init__() (nodearray method)": [[52, "sdynpy.core.sdynpy_geometry.NodeArray.__init__"]], "by_grid() (nodearray method)": [[52, "sdynpy.core.sdynpy_geometry.NodeArray.by_grid"]], "by_position() (nodearray method)": [[52, "sdynpy.core.sdynpy_geometry.NodeArray.by_position"]], "data_dtype (nodearray attribute)": [[52, "sdynpy.core.sdynpy_geometry.NodeArray.data_dtype"]], "from_unv() (nodearray static method)": [[52, "sdynpy.core.sdynpy_geometry.NodeArray.from_unv"]], "global_coordinate() (nodearray method)": [[52, "sdynpy.core.sdynpy_geometry.NodeArray.global_coordinate"]], "project_to_minimum_plane() (nodearray static method)": [[52, "sdynpy.core.sdynpy_geometry.NodeArray.project_to_minimum_plane"]], "reduce() (nodearray method)": [[52, "sdynpy.core.sdynpy_geometry.NodeArray.reduce"]], "triangulate() (nodearray method)": [[52, "sdynpy.core.sdynpy_geometry.NodeArray.triangulate"]], "shapeplotter (class in sdynpy.core.sdynpy_geometry)": [[53, "sdynpy.core.sdynpy_geometry.ShapePlotter"]], "__init__() (shapeplotter method)": [[53, "sdynpy.core.sdynpy_geometry.ShapePlotter.__init__"]], "add_menu_bar() (shapeplotter method)": [[53, "sdynpy.core.sdynpy_geometry.ShapePlotter.add_menu_bar"]], "add_toolbars() (shapeplotter method)": [[53, "sdynpy.core.sdynpy_geometry.ShapePlotter.add_toolbars"]], "compute_displacements() (shapeplotter method)": [[53, "sdynpy.core.sdynpy_geometry.ShapePlotter.compute_displacements"]], "next_shape() (shapeplotter method)": [[53, "sdynpy.core.sdynpy_geometry.ShapePlotter.next_shape"]], "play_animation() (shapeplotter method)": [[53, "sdynpy.core.sdynpy_geometry.ShapePlotter.play_animation"]], "prev_shape() (shapeplotter method)": [[53, "sdynpy.core.sdynpy_geometry.ShapePlotter.prev_shape"]], "reset_shape() (shapeplotter method)": [[53, "sdynpy.core.sdynpy_geometry.ShapePlotter.reset_shape"]], "save_animation() (shapeplotter method)": [[53, "sdynpy.core.sdynpy_geometry.ShapePlotter.save_animation"]], "save_animation_all_shapes() (shapeplotter method)": [[53, "sdynpy.core.sdynpy_geometry.ShapePlotter.save_animation_all_shapes"]], "save_animation_from_action() (shapeplotter method)": [[53, "sdynpy.core.sdynpy_geometry.ShapePlotter.save_animation_from_action"]], "select_complex() (shapeplotter method)": [[53, "sdynpy.core.sdynpy_geometry.ShapePlotter.select_complex"]], "select_loop() (shapeplotter method)": [[53, "sdynpy.core.sdynpy_geometry.ShapePlotter.select_loop"]], "select_scaling_0p25() (shapeplotter method)": [[53, "sdynpy.core.sdynpy_geometry.ShapePlotter.select_scaling_0p25"]], "select_scaling_0p5() (shapeplotter method)": [[53, "sdynpy.core.sdynpy_geometry.ShapePlotter.select_scaling_0p5"]], "select_scaling_0p8() (shapeplotter method)": [[53, "sdynpy.core.sdynpy_geometry.ShapePlotter.select_scaling_0p8"]], "select_scaling_1() (shapeplotter method)": [[53, "sdynpy.core.sdynpy_geometry.ShapePlotter.select_scaling_1"]], "select_scaling_1p25() (shapeplotter method)": [[53, "sdynpy.core.sdynpy_geometry.ShapePlotter.select_scaling_1p25"]], "select_scaling_2p0() (shapeplotter method)": [[53, "sdynpy.core.sdynpy_geometry.ShapePlotter.select_scaling_2p0"]], "select_scaling_4p0() (shapeplotter method)": [[53, "sdynpy.core.sdynpy_geometry.ShapePlotter.select_scaling_4p0"]], "select_shape() (shapeplotter method)": [[53, "sdynpy.core.sdynpy_geometry.ShapePlotter.select_shape"]], "select_speed_0p8() (shapeplotter method)": [[53, "sdynpy.core.sdynpy_geometry.ShapePlotter.select_speed_0p8"]], "select_speed_1() (shapeplotter method)": [[53, "sdynpy.core.sdynpy_geometry.ShapePlotter.select_speed_1"]], "select_speed_1p25() (shapeplotter method)": [[53, "sdynpy.core.sdynpy_geometry.ShapePlotter.select_speed_1p25"]], "show_comment() (shapeplotter method)": [[53, "sdynpy.core.sdynpy_geometry.ShapePlotter.show_comment"]], "stop_animation() (shapeplotter method)": [[53, "sdynpy.core.sdynpy_geometry.ShapePlotter.stop_animation"]], "toggle_undeformed() (shapeplotter method)": [[53, "sdynpy.core.sdynpy_geometry.ShapePlotter.toggle_undeformed"]], "update_shape() (shapeplotter method)": [[53, "sdynpy.core.sdynpy_geometry.ShapePlotter.update_shape"]], "update_shape_mode() (shapeplotter method)": [[53, "sdynpy.core.sdynpy_geometry.ShapePlotter.update_shape_mode"]], "tracelinearray (class in sdynpy.core.sdynpy_geometry)": [[54, "sdynpy.core.sdynpy_geometry.TracelineArray"]], "__init__() (tracelinearray method)": [[54, "sdynpy.core.sdynpy_geometry.TracelineArray.__init__"]], "data_dtype (tracelinearray attribute)": [[54, "sdynpy.core.sdynpy_geometry.TracelineArray.data_dtype"]], "from_unv() (tracelinearray static method)": [[54, "sdynpy.core.sdynpy_geometry.TracelineArray.from_unv"]], "reduce() (tracelinearray method)": [[54, "sdynpy.core.sdynpy_geometry.TracelineArray.reduce"]], "transientplotter (class in sdynpy.core.sdynpy_geometry)": [[55, "sdynpy.core.sdynpy_geometry.TransientPlotter"]], "__init__() (transientplotter method)": [[55, "sdynpy.core.sdynpy_geometry.TransientPlotter.__init__"]], "add_menu_bar() (transientplotter method)": [[55, "sdynpy.core.sdynpy_geometry.TransientPlotter.add_menu_bar"]], "add_toolbars() (transientplotter method)": [[55, "sdynpy.core.sdynpy_geometry.TransientPlotter.add_toolbars"]], "go_to_first_step() (transientplotter method)": [[55, "sdynpy.core.sdynpy_geometry.TransientPlotter.go_to_first_step"]], "go_to_last_step() (transientplotter method)": [[55, "sdynpy.core.sdynpy_geometry.TransientPlotter.go_to_last_step"]], "go_to_next_step() (transientplotter method)": [[55, "sdynpy.core.sdynpy_geometry.TransientPlotter.go_to_next_step"]], "go_to_previous_step() (transientplotter method)": [[55, "sdynpy.core.sdynpy_geometry.TransientPlotter.go_to_previous_step"]], "modify_abscissa() (transientplotter method)": [[55, "sdynpy.core.sdynpy_geometry.TransientPlotter.modify_abscissa"]], "play_animation() (transientplotter method)": [[55, "sdynpy.core.sdynpy_geometry.TransientPlotter.play_animation"]], "play_animation_reverse() (transientplotter method)": [[55, "sdynpy.core.sdynpy_geometry.TransientPlotter.play_animation_reverse"]], "save_animation() (transientplotter method)": [[55, "sdynpy.core.sdynpy_geometry.TransientPlotter.save_animation"]], "select_scaling_0p25() (transientplotter method)": [[55, "sdynpy.core.sdynpy_geometry.TransientPlotter.select_scaling_0p25"]], "select_scaling_0p5() (transientplotter method)": [[55, "sdynpy.core.sdynpy_geometry.TransientPlotter.select_scaling_0p5"]], "select_scaling_0p8() (transientplotter method)": [[55, "sdynpy.core.sdynpy_geometry.TransientPlotter.select_scaling_0p8"]], "select_scaling_1() (transientplotter method)": [[55, "sdynpy.core.sdynpy_geometry.TransientPlotter.select_scaling_1"]], "select_scaling_1p25() (transientplotter method)": [[55, "sdynpy.core.sdynpy_geometry.TransientPlotter.select_scaling_1p25"]], "select_scaling_2p0() (transientplotter method)": [[55, "sdynpy.core.sdynpy_geometry.TransientPlotter.select_scaling_2p0"]], "select_scaling_4p0() (transientplotter method)": [[55, "sdynpy.core.sdynpy_geometry.TransientPlotter.select_scaling_4p0"]], "select_speed_0p8() (transientplotter method)": [[55, "sdynpy.core.sdynpy_geometry.TransientPlotter.select_speed_0p8"]], "select_speed_1() (transientplotter method)": [[55, "sdynpy.core.sdynpy_geometry.TransientPlotter.select_speed_1"]], "select_speed_1p25() (transientplotter method)": [[55, "sdynpy.core.sdynpy_geometry.TransientPlotter.select_speed_1p25"]], "stop_animation() (transientplotter method)": [[55, "sdynpy.core.sdynpy_geometry.TransientPlotter.stop_animation"]], "update_abscissa() (transientplotter method)": [[55, "sdynpy.core.sdynpy_geometry.TransientPlotter.update_abscissa"]], "update_abscissa_reverse() (transientplotter method)": [[55, "sdynpy.core.sdynpy_geometry.TransientPlotter.update_abscissa_reverse"]], "update_displacement() (transientplotter method)": [[55, "sdynpy.core.sdynpy_geometry.TransientPlotter.update_displacement"]], "coordinate_system_array() (in module sdynpy.core.sdynpy_geometry)": [[56, "sdynpy.core.sdynpy_geometry.coordinate_system_array"]], "element_array() (in module sdynpy.core.sdynpy_geometry)": [[57, "sdynpy.core.sdynpy_geometry.element_array"]], "from_excel_template() (in module sdynpy.core.sdynpy_geometry)": [[58, "sdynpy.core.sdynpy_geometry.from_excel_template"]], "from_exodus() (in module sdynpy.core.sdynpy_geometry)": [[59, "sdynpy.core.sdynpy_geometry.from_exodus"]], "from_imat_struct() (in module sdynpy.core.sdynpy_geometry)": [[60, "sdynpy.core.sdynpy_geometry.from_imat_struct"]], "from_uff() (in module sdynpy.core.sdynpy_geometry)": [[61, "sdynpy.core.sdynpy_geometry.from_uff"]], "from_unv() (in module sdynpy.core.sdynpy_geometry)": [[62, "sdynpy.core.sdynpy_geometry.from_unv"]], "global_coord() (in module sdynpy.core.sdynpy_geometry)": [[63, "sdynpy.core.sdynpy_geometry.global_coord"]], "global_deflection() (in module sdynpy.core.sdynpy_geometry)": [[64, "sdynpy.core.sdynpy_geometry.global_deflection"]], "__init__() (id_map method)": [[65, "sdynpy.core.sdynpy_geometry.id_map.__init__"]], "id_map (class in sdynpy.core.sdynpy_geometry)": [[65, "sdynpy.core.sdynpy_geometry.id_map"]], "load() (in module sdynpy.core.sdynpy_geometry)": [[66, "sdynpy.core.sdynpy_geometry.load"]], "local_coord() (in module sdynpy.core.sdynpy_geometry)": [[67, "sdynpy.core.sdynpy_geometry.local_coord"]], "node_array() (in module sdynpy.core.sdynpy_geometry)": [[68, "sdynpy.core.sdynpy_geometry.node_array"]], "split_list() (in module sdynpy.core.sdynpy_geometry)": [[69, "sdynpy.core.sdynpy_geometry.split_list"]], "traceline_array() (in module sdynpy.core.sdynpy_geometry)": [[70, "sdynpy.core.sdynpy_geometry.traceline_array"]], "write_excel_template() (in module sdynpy.core.sdynpy_geometry)": [[71, "sdynpy.core.sdynpy_geometry.write_excel_template"]], "sdynpy.core.sdynpy_matrix": [[72, "module-sdynpy.core.sdynpy_matrix"]], "matrix (class in sdynpy.core.sdynpy_matrix)": [[73, "sdynpy.core.sdynpy_matrix.Matrix"]], "__init__() (matrix method)": [[73, "sdynpy.core.sdynpy_matrix.Matrix.__init__"]], "argsort_coordinate() (matrix method)": [[73, "sdynpy.core.sdynpy_matrix.Matrix.argsort_coordinate"]], "coordinate (matrix property)": [[73, "sdynpy.core.sdynpy_matrix.Matrix.coordinate"]], "data_dtype() (matrix static method)": [[73, "sdynpy.core.sdynpy_matrix.Matrix.data_dtype"]], "eye() (matrix class method)": [[73, "sdynpy.core.sdynpy_matrix.Matrix.eye"]], "num_coordinate_columns (matrix property)": [[73, "sdynpy.core.sdynpy_matrix.Matrix.num_coordinate_columns"]], "num_coordinate_rows (matrix property)": [[73, "sdynpy.core.sdynpy_matrix.Matrix.num_coordinate_rows"]], "plot() (matrix method)": [[73, "sdynpy.core.sdynpy_matrix.Matrix.plot"]], "sort_coordinate() (matrix method)": [[73, "sdynpy.core.sdynpy_matrix.Matrix.sort_coordinate"]], "matrix() (in module sdynpy.core.sdynpy_matrix)": [[74, "sdynpy.core.sdynpy_matrix.matrix"]], "sdynpy.core.sdynpy_shape": [[75, "module-sdynpy.core.sdynpy_shape"]], "shapearray (class in sdynpy.core.sdynpy_shape)": [[76, "sdynpy.core.sdynpy_shape.ShapeArray"]], "__init__() (shapearray method)": [[76, "sdynpy.core.sdynpy_shape.ShapeArray.__init__"]], "complex_data_dtype() (shapearray static method)": [[76, "sdynpy.core.sdynpy_shape.ShapeArray.complex_data_dtype"]], "compute_frf() (shapearray method)": [[76, "sdynpy.core.sdynpy_shape.ShapeArray.compute_frf"]], "concatenate_dofs() (shapearray static method)": [[76, "sdynpy.core.sdynpy_shape.ShapeArray.concatenate_dofs"]], "edit_comments() (shapearray method)": [[76, "sdynpy.core.sdynpy_shape.ShapeArray.edit_comments"]], "expand() (shapearray method)": [[76, "sdynpy.core.sdynpy_shape.ShapeArray.expand"]], "from_exodus() (shapearray class method)": [[76, "sdynpy.core.sdynpy_shape.ShapeArray.from_exodus"]], "from_imat_struct() (shapearray class method)": [[76, "sdynpy.core.sdynpy_shape.ShapeArray.from_imat_struct"]], "from_uff() (shapearray static method)": [[76, "sdynpy.core.sdynpy_shape.ShapeArray.from_uff"]], "from_unv() (shapearray static method)": [[76, "sdynpy.core.sdynpy_shape.ShapeArray.from_unv"]], "is_complex() (shapearray method)": [[76, "sdynpy.core.sdynpy_shape.ShapeArray.is_complex"]], "mode_table() (shapearray method)": [[76, "sdynpy.core.sdynpy_shape.ShapeArray.mode_table"]], "modeshape (shapearray property)": [[76, "sdynpy.core.sdynpy_shape.ShapeArray.modeshape"]], "ndof (shapearray property)": [[76, "sdynpy.core.sdynpy_shape.ShapeArray.ndof"]], "normalize() (shapearray method)": [[76, "sdynpy.core.sdynpy_shape.ShapeArray.normalize"]], "optimize_degrees_of_freedom() (shapearray method)": [[76, "sdynpy.core.sdynpy_shape.ShapeArray.optimize_degrees_of_freedom"]], "overlay_shapes() (shapearray static method)": [[76, "sdynpy.core.sdynpy_shape.ShapeArray.overlay_shapes"]], "plot_frequency() (shapearray method)": [[76, "sdynpy.core.sdynpy_shape.ShapeArray.plot_frequency"]], "real_data_dtype() (shapearray static method)": [[76, "sdynpy.core.sdynpy_shape.ShapeArray.real_data_dtype"]], "reduce() (shapearray method)": [[76, "sdynpy.core.sdynpy_shape.ShapeArray.reduce"]], "reduce_for_comparison() (shapearray method)": [[76, "sdynpy.core.sdynpy_shape.ShapeArray.reduce_for_comparison"]], "repack() (shapearray method)": [[76, "sdynpy.core.sdynpy_shape.ShapeArray.repack"]], "shape_alignment() (shapearray static method)": [[76, "sdynpy.core.sdynpy_shape.ShapeArray.shape_alignment"]], "system() (shapearray method)": [[76, "sdynpy.core.sdynpy_shape.ShapeArray.system"]], "time_integrate() (shapearray method)": [[76, "sdynpy.core.sdynpy_shape.ShapeArray.time_integrate"]], "to_complex() (shapearray method)": [[76, "sdynpy.core.sdynpy_shape.ShapeArray.to_complex"]], "to_real() (shapearray method)": [[76, "sdynpy.core.sdynpy_shape.ShapeArray.to_real"]], "transform_coordinate_system() (shapearray method)": [[76, "sdynpy.core.sdynpy_shape.ShapeArray.transform_coordinate_system"]], "write_to_unv() (shapearray method)": [[76, "sdynpy.core.sdynpy_shape.ShapeArray.write_to_unv"]], "shapecommenttable (class in sdynpy.core.sdynpy_shape)": [[77, "sdynpy.core.sdynpy_shape.ShapeCommentTable"]], "__init__() (shapecommenttable method)": [[77, "sdynpy.core.sdynpy_shape.ShapeCommentTable.__init__"]], "accept() (shapecommenttable method)": [[77, "sdynpy.core.sdynpy_shape.ShapeCommentTable.accept"]], "update_mode() (shapecommenttable method)": [[77, "sdynpy.core.sdynpy_shape.ShapeCommentTable.update_mode"]], "concatenate_dofs() (in module sdynpy.core.sdynpy_shape)": [[78, "sdynpy.core.sdynpy_shape.concatenate_dofs"]], "from_exodus() (in module sdynpy.core.sdynpy_shape)": [[79, "sdynpy.core.sdynpy_shape.from_exodus"]], "from_imat_struct() (in module sdynpy.core.sdynpy_shape)": [[80, "sdynpy.core.sdynpy_shape.from_imat_struct"]], "from_unv() (in module sdynpy.core.sdynpy_shape)": [[81, "sdynpy.core.sdynpy_shape.from_unv"]], "mac() (in module sdynpy.core.sdynpy_shape)": [[82, "sdynpy.core.sdynpy_shape.mac"]], "overlay_shapes() (in module sdynpy.core.sdynpy_shape)": [[83, "sdynpy.core.sdynpy_shape.overlay_shapes"]], "rigid_body_check() (in module sdynpy.core.sdynpy_shape)": [[84, "sdynpy.core.sdynpy_shape.rigid_body_check"]], "rigid_body_error() (in module sdynpy.core.sdynpy_shape)": [[85, "sdynpy.core.sdynpy_shape.rigid_body_error"]], "rigid_body_fix_node_orientation() (in module sdynpy.core.sdynpy_shape)": [[86, "sdynpy.core.sdynpy_shape.rigid_body_fix_node_orientation"]], "shape_alignment() (in module sdynpy.core.sdynpy_shape)": [[87, "sdynpy.core.sdynpy_shape.shape_alignment"]], "shape_array() (in module sdynpy.core.sdynpy_shape)": [[88, "sdynpy.core.sdynpy_shape.shape_array"]], "shape_comparison_table() (in module sdynpy.core.sdynpy_shape)": [[89, "sdynpy.core.sdynpy_shape.shape_comparison_table"]], "sdynpy.core.sdynpy_system": [[90, "module-sdynpy.core.sdynpy_system"]], "c (system property)": [[91, "sdynpy.core.sdynpy_system.System.C"]], "k (system property)": [[91, "sdynpy.core.sdynpy_system.System.K"]], "m (system property)": [[91, "sdynpy.core.sdynpy_system.System.M"]], "system (class in sdynpy.core.sdynpy_system)": [[91, "sdynpy.core.sdynpy_system.System"]], "__init__() (system method)": [[91, "sdynpy.core.sdynpy_system.System.__init__"]], "assign_modal_damping() (system method)": [[91, "sdynpy.core.sdynpy_system.System.assign_modal_damping"]], "beam() (system class method)": [[91, "sdynpy.core.sdynpy_system.System.beam"]], "concatenate() (system class method)": [[91, "sdynpy.core.sdynpy_system.System.concatenate"]], "constrain() (system method)": [[91, "sdynpy.core.sdynpy_system.System.constrain"]], "coordinate (system property)": [[91, "sdynpy.core.sdynpy_system.System.coordinate"]], "copy() (system method)": [[91, "sdynpy.core.sdynpy_system.System.copy"]], "damping (system property)": [[91, "sdynpy.core.sdynpy_system.System.damping"]], "eigensolution() (system method)": [[91, "sdynpy.core.sdynpy_system.System.eigensolution"]], "frequency_response() (system method)": [[91, "sdynpy.core.sdynpy_system.System.frequency_response"]], "from_exodus_superelement() (system class method)": [[91, "sdynpy.core.sdynpy_system.System.from_exodus_superelement"]], "get_indices_by_coordinate() (system method)": [[91, "sdynpy.core.sdynpy_system.System.get_indices_by_coordinate"]], "load() (system class method)": [[91, "sdynpy.core.sdynpy_system.System.load"]], "mass (system property)": [[91, "sdynpy.core.sdynpy_system.System.mass"]], "ndof (system property)": [[91, "sdynpy.core.sdynpy_system.System.ndof"]], "ndof_transformed (system property)": [[91, "sdynpy.core.sdynpy_system.System.ndof_transformed"]], "reduce() (system method)": [[91, "sdynpy.core.sdynpy_system.System.reduce"]], "reduce_craig_bampton() (system method)": [[91, "sdynpy.core.sdynpy_system.System.reduce_craig_bampton"]], "reduce_dynamic() (system method)": [[91, "sdynpy.core.sdynpy_system.System.reduce_dynamic"]], "reduce_guyan() (system method)": [[91, "sdynpy.core.sdynpy_system.System.reduce_guyan"]], "remove_transformation() (system method)": [[91, "sdynpy.core.sdynpy_system.System.remove_transformation"]], "save() (system method)": [[91, "sdynpy.core.sdynpy_system.System.save"]], "set_proportional_damping() (system method)": [[91, "sdynpy.core.sdynpy_system.System.set_proportional_damping"]], "simulate_test() (system method)": [[91, "sdynpy.core.sdynpy_system.System.simulate_test"]], "spy() (system method)": [[91, "sdynpy.core.sdynpy_system.System.spy"]], "stiffness (system property)": [[91, "sdynpy.core.sdynpy_system.System.stiffness"]], "substructure_by_coordinate() (system method)": [[91, "sdynpy.core.sdynpy_system.System.substructure_by_coordinate"]], "substructure_by_position() (system class method)": [[91, "sdynpy.core.sdynpy_system.System.substructure_by_position"]], "substructure_by_shape() (system method)": [[91, "sdynpy.core.sdynpy_system.System.substructure_by_shape"]], "time_integrate() (system method)": [[91, "sdynpy.core.sdynpy_system.System.time_integrate"]], "to_state_space() (system method)": [[91, "sdynpy.core.sdynpy_system.System.to_state_space"]], "transformation (system property)": [[91, "sdynpy.core.sdynpy_system.System.transformation"]], "transformation_matrix_at_coordinates() (system method)": [[91, "sdynpy.core.sdynpy_system.System.transformation_matrix_at_coordinates"]], "transformation_shapes() (system method)": [[91, "sdynpy.core.sdynpy_system.System.transformation_shapes"]], "substructure_by_position() (in module sdynpy.core.sdynpy_system)": [[92, "sdynpy.core.sdynpy_system.substructure_by_position"]], "sdynpy.demo": [[93, "module-sdynpy.demo"]], "sdynpy.demo.beam_airplane": [[94, "module-sdynpy.demo.beam_airplane"]], "create_models() (in module sdynpy.demo.beam_airplane)": [[95, "sdynpy.demo.beam_airplane.create_models"]], "sdynpy.demo.beam_plate": [[96, "module-sdynpy.demo.beam_plate"]], "create_models() (in module sdynpy.demo.beam_plate)": [[97, "sdynpy.demo.beam_plate.create_models"]], "sdynpy.doc": [[98, "module-sdynpy.doc"]], "sdynpy.doc.sdynpy_latex": [[99, "module-sdynpy.doc.sdynpy_latex"]], "create_latex_summary() (in module sdynpy.doc.sdynpy_latex)": [[100, "sdynpy.doc.sdynpy_latex.create_latex_summary"]], "figure() (in module sdynpy.doc.sdynpy_latex)": [[101, "sdynpy.doc.sdynpy_latex.figure"]], "table() (in module sdynpy.doc.sdynpy_latex)": [[102, "sdynpy.doc.sdynpy_latex.table"]], "sdynpy.doc.sdynpy_ppt": [[103, "module-sdynpy.doc.sdynpy_ppt"]], "add_geometry_overview_slide() (in module sdynpy.doc.sdynpy_ppt)": [[104, "sdynpy.doc.sdynpy_ppt.add_geometry_overview_slide"]], "add_section_header_slide() (in module sdynpy.doc.sdynpy_ppt)": [[105, "sdynpy.doc.sdynpy_ppt.add_section_header_slide"]], "add_shape_animation_slides() (in module sdynpy.doc.sdynpy_ppt)": [[106, "sdynpy.doc.sdynpy_ppt.add_shape_animation_slides"]], "add_shape_comparison_animation_slides() (in module sdynpy.doc.sdynpy_ppt)": [[107, "sdynpy.doc.sdynpy_ppt.add_shape_comparison_animation_slides"]], "add_shape_comparison_overview_slide() (in module sdynpy.doc.sdynpy_ppt)": [[108, "sdynpy.doc.sdynpy_ppt.add_shape_comparison_overview_slide"]], "add_shape_overview_slide() (in module sdynpy.doc.sdynpy_ppt)": [[109, "sdynpy.doc.sdynpy_ppt.add_shape_overview_slide"]], "add_title_slide() (in module sdynpy.doc.sdynpy_ppt)": [[110, "sdynpy.doc.sdynpy_ppt.add_title_slide"]], "create_summary_pptx() (in module sdynpy.doc.sdynpy_ppt)": [[111, "sdynpy.doc.sdynpy_ppt.create_summary_pptx"]], "position_placeholder() (in module sdynpy.doc.sdynpy_ppt)": [[112, "sdynpy.doc.sdynpy_ppt.position_placeholder"]], "sdynpy.fem": [[113, "module-sdynpy.fem"]], "sdynpy.fem.sdynpy_beam": [[114, "module-sdynpy.fem.sdynpy_beam"]], "beamkm() (in module sdynpy.fem.sdynpy_beam)": [[115, "sdynpy.fem.sdynpy_beam.beamkm"]], "beamkm_2d() (in module sdynpy.fem.sdynpy_beam)": [[116, "sdynpy.fem.sdynpy_beam.beamkm_2d"]], "rect_beam_props() (in module sdynpy.fem.sdynpy_beam)": [[117, "sdynpy.fem.sdynpy_beam.rect_beam_props"]], "sdynpy.fem.sdynpy_dof": [[118, "module-sdynpy.fem.sdynpy_dof"]], "by_condition_number() (in module sdynpy.fem.sdynpy_dof)": [[119, "sdynpy.fem.sdynpy_dof.by_condition_number"]], "by_effective_independence() (in module sdynpy.fem.sdynpy_dof)": [[120, "sdynpy.fem.sdynpy_dof.by_effective_independence"]], "sdynpy.fem.sdynpy_exodus": [[121, "module-sdynpy.fem.sdynpy_exodus"]], "exodus (class in sdynpy.fem.sdynpy_exodus)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus"]], "__init__() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.__init__"]], "close() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.close"]], "extract_sharp_edges() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.extract_sharp_edges"]], "get_block_surface() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_block_surface"]], "get_coord() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_coord"]], "get_coord_names() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_coord_names"]], "get_coords() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_coords"]], "get_displacements() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_displacements"]], "get_elem_attr() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_elem_attr"]], "get_elem_blk_ids() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_elem_blk_ids"]], "get_elem_blk_info() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_elem_blk_info"]], "get_elem_connectivity() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_elem_connectivity"]], "get_elem_num_map() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_elem_num_map"]], "get_elem_type() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_elem_type"]], "get_elem_variable_names() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_elem_variable_names"]], "get_elem_variable_table() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_elem_variable_table"]], "get_elem_variable_value() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_elem_variable_value"]], "get_elem_variable_values() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_elem_variable_values"]], "get_element_property_names() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_element_property_names"]], "get_element_property_value() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_element_property_value"]], "get_global_variable_names() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_global_variable_names"]], "get_global_variable_values() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_global_variable_values"]], "get_info_records() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_info_records"]], "get_node_num_map() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_node_num_map"]], "get_node_set_dist_factors() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_node_set_dist_factors"]], "get_node_set_ids() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_node_set_ids"]], "get_node_set_names() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_node_set_names"]], "get_node_set_nodes() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_node_set_nodes"]], "get_node_set_num_nodes() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_node_set_num_nodes"]], "get_node_variable_names() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_node_variable_names"]], "get_node_variable_value() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_node_variable_value"]], "get_node_variable_values() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_node_variable_values"]], "get_qa_records() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_qa_records"]], "get_side_set_dist_factors() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_side_set_dist_factors"]], "get_side_set_faces() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_side_set_faces"]], "get_side_set_ids() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_side_set_ids"]], "get_side_set_names() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_side_set_names"]], "get_side_set_node_list() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_side_set_node_list"]], "get_side_set_num_faces() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_side_set_num_faces"]], "get_times() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.get_times"]], "load_into_memory() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.load_into_memory"]], "num_attr() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.num_attr"]], "num_blks (exodus property)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.num_blks"]], "num_dimensions (exodus property)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.num_dimensions"]], "num_elem_variables (exodus property)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.num_elem_variables"]], "num_elems (exodus property)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.num_elems"]], "num_elems_in_blk() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.num_elems_in_blk"]], "num_global_variables (exodus property)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.num_global_variables"]], "num_node_sets (exodus property)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.num_node_sets"]], "num_node_variables (exodus property)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.num_node_variables"]], "num_nodes (exodus property)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.num_nodes"]], "num_nodes_per_elem() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.num_nodes_per_elem"]], "num_side_sets (exodus property)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.num_side_sets"]], "num_times (exodus property)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.num_times"]], "put_coord_names() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.put_coord_names"]], "put_coords() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.put_coords"]], "put_elem_blk_ids() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.put_elem_blk_ids"]], "put_elem_blk_info() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.put_elem_blk_info"]], "put_elem_num_map() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.put_elem_num_map"]], "put_elem_variable_names() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.put_elem_variable_names"]], "put_element_property_names() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.put_element_property_names"]], "put_element_property_value() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.put_element_property_value"]], "put_global_variable_names() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.put_global_variable_names"]], "put_info_records() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.put_info_records"]], "put_node_num_map() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.put_node_num_map"]], "put_node_set_ids() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.put_node_set_ids"]], "put_node_set_info() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.put_node_set_info"]], "put_node_set_names() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.put_node_set_names"]], "put_node_variable_names() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.put_node_variable_names"]], "put_qa_records() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.put_qa_records"]], "put_side_set_ids() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.put_side_set_ids"]], "put_side_set_info() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.put_side_set_info"]], "put_side_set_names() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.put_side_set_names"]], "reduce_to_surfaces() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.reduce_to_surfaces"]], "set_elem_attr() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.set_elem_attr"]], "set_elem_connectivity() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.set_elem_connectivity"]], "set_elem_variable_value() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.set_elem_variable_value"]], "set_elem_variable_values() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.set_elem_variable_values"]], "set_global_variable_values() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.set_global_variable_values"]], "set_node_variable_value() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.set_node_variable_value"]], "set_node_variable_values() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.set_node_variable_values"]], "set_time() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.set_time"]], "set_times() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.set_times"]], "title (exodus property)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.title"]], "triangulate_surface_mesh() (exodus method)": [[122, "sdynpy.fem.sdynpy_exodus.Exodus.triangulate_surface_mesh"]], "exoduserror": [[123, "sdynpy.fem.sdynpy_exodus.ExodusError"]], "exodusinmemory (class in sdynpy.fem.sdynpy_exodus)": [[124, "sdynpy.fem.sdynpy_exodus.ExodusInMemory"]], "__init__() (exodusinmemory method)": [[124, "sdynpy.fem.sdynpy_exodus.ExodusInMemory.__init__"]], "from_sdynpy() (exodusinmemory static method)": [[124, "sdynpy.fem.sdynpy_exodus.ExodusInMemory.from_sdynpy"]], "get_block_surface() (exodusinmemory method)": [[124, "sdynpy.fem.sdynpy_exodus.ExodusInMemory.get_block_surface"]], "load_from_exodus() (exodusinmemory method)": [[124, "sdynpy.fem.sdynpy_exodus.ExodusInMemory.load_from_exodus"]], "repack() (exodusinmemory method)": [[124, "sdynpy.fem.sdynpy_exodus.ExodusInMemory.repack"]], "triangulate_surface_mesh() (exodusinmemory method)": [[124, "sdynpy.fem.sdynpy_exodus.ExodusInMemory.triangulate_surface_mesh"]], "write_to_file() (exodusinmemory method)": [[124, "sdynpy.fem.sdynpy_exodus.ExodusInMemory.write_to_file"]], "extract_sharp_edges() (in module sdynpy.fem.sdynpy_exodus)": [[125, "sdynpy.fem.sdynpy_exodus.extract_sharp_edges"]], "face_connectivity() (in module sdynpy.fem.sdynpy_exodus)": [[126, "sdynpy.fem.sdynpy_exodus.face_connectivity"]], "mesh_triangulation_array() (in module sdynpy.fem.sdynpy_exodus)": [[127, "sdynpy.fem.sdynpy_exodus.mesh_triangulation_array"]], "reduce_exodus_to_surfaces() (in module sdynpy.fem.sdynpy_exodus)": [[128, "sdynpy.fem.sdynpy_exodus.reduce_exodus_to_surfaces"]], "__init__() (subfield method)": [[129, "sdynpy.fem.sdynpy_exodus.subfield.__init__"]], "subfield (class in sdynpy.fem.sdynpy_exodus)": [[129, "sdynpy.fem.sdynpy_exodus.subfield"]], "sdynpy.fem.sdynpy_shaker": [[130, "module-sdynpy.fem.sdynpy_shaker"]], "mck() (shaker4dof method)": [[131, "sdynpy.fem.sdynpy_shaker.Shaker4DoF.MCK"]], "shaker4dof (class in sdynpy.fem.sdynpy_shaker)": [[131, "sdynpy.fem.sdynpy_shaker.Shaker4DoF"]], "__init__() (shaker4dof method)": [[131, "sdynpy.fem.sdynpy_shaker.Shaker4DoF.__init__"]], "modal_shop_100lbf() (shaker4dof class method)": [[131, "sdynpy.fem.sdynpy_shaker.Shaker4DoF.modal_shop_100lbf"]], "plot_electrical_impedance() (shaker4dof method)": [[131, "sdynpy.fem.sdynpy_shaker.Shaker4DoF.plot_electrical_impedance"]], "state_space() (shaker4dof method)": [[131, "sdynpy.fem.sdynpy_shaker.Shaker4DoF.state_space"]], "transfer_function() (shaker4dof method)": [[131, "sdynpy.fem.sdynpy_shaker.Shaker4DoF.transfer_function"]], "sdynpy.fileio": [[132, "module-sdynpy.fileio"]], "sdynpy.fileio.sdynpy_rattlesnake": [[133, "module-sdynpy.fileio.sdynpy_rattlesnake"]], "create_synthetic_test() (in module sdynpy.fileio.sdynpy_rattlesnake)": [[134, "sdynpy.fileio.sdynpy_rattlesnake.create_synthetic_test"]], "read_modal_data() (in module sdynpy.fileio.sdynpy_rattlesnake)": [[135, "sdynpy.fileio.sdynpy_rattlesnake.read_modal_data"]], "read_random_spectral_data() (in module sdynpy.fileio.sdynpy_rattlesnake)": [[136, "sdynpy.fileio.sdynpy_rattlesnake.read_random_spectral_data"]], "read_rattlesnake_output() (in module sdynpy.fileio.sdynpy_rattlesnake)": [[137, "sdynpy.fileio.sdynpy_rattlesnake.read_rattlesnake_output"]], "read_system_id_data() (in module sdynpy.fileio.sdynpy_rattlesnake)": [[138, "sdynpy.fileio.sdynpy_rattlesnake.read_system_id_data"]], "read_transient_control_data() (in module sdynpy.fileio.sdynpy_rattlesnake)": [[139, "sdynpy.fileio.sdynpy_rattlesnake.read_transient_control_data"]], "sdynpy.fileio.sdynpy_tshaker": [[140, "module-sdynpy.fileio.sdynpy_tshaker"]], "read_mat_random() (in module sdynpy.fileio.sdynpy_tshaker)": [[141, "sdynpy.fileio.sdynpy_tshaker.read_mat_random"]], "read_mat_shock() (in module sdynpy.fileio.sdynpy_tshaker)": [[142, "sdynpy.fileio.sdynpy_tshaker.read_mat_shock"]], "read_mat_time_history() (in module sdynpy.fileio.sdynpy_tshaker)": [[143, "sdynpy.fileio.sdynpy_tshaker.read_mat_time_history"]], "read_tdms() (in module sdynpy.fileio.sdynpy_tshaker)": [[144, "sdynpy.fileio.sdynpy_tshaker.read_tdms"]], "sdynpy.fileio.sdynpy_uff": [[145, "module-sdynpy.fileio.sdynpy_uff"]], "uffreaderror": [[146, "sdynpy.fileio.sdynpy_uff.UFFReadError"]], "parse_uff_line() (in module sdynpy.fileio.sdynpy_uff)": [[147, "sdynpy.fileio.sdynpy_uff.parse_uff_line"]], "parse_uff_lines() (in module sdynpy.fileio.sdynpy_uff)": [[148, "sdynpy.fileio.sdynpy_uff.parse_uff_lines"]], "readuff() (in module sdynpy.fileio.sdynpy_uff)": [[149, "sdynpy.fileio.sdynpy_uff.readuff"]], "readunv() (in module sdynpy.fileio.sdynpy_uff)": [[150, "sdynpy.fileio.sdynpy_uff.readunv"]], "write_uff_line() (in module sdynpy.fileio.sdynpy_uff)": [[151, "sdynpy.fileio.sdynpy_uff.write_uff_line"]], "sdynpy.fileio.sdynpy_uff_datasets": [[152, "module-sdynpy.fileio.sdynpy_uff_datasets"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_151": [[153, "module-sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_151"]], "sdynpy_uff_dataset_151 (class in sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_151)": [[154, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_151.Sdynpy_UFF_Dataset_151"]], "__init__() (sdynpy_uff_dataset_151 method)": [[154, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_151.Sdynpy_UFF_Dataset_151.__init__"]], "dataset_number (sdynpy_uff_dataset_151 property)": [[154, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_151.Sdynpy_UFF_Dataset_151.dataset_number"]], "from_uff_data_array() (sdynpy_uff_dataset_151 class method)": [[154, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_151.Sdynpy_UFF_Dataset_151.from_uff_data_array"]], "write_string() (sdynpy_uff_dataset_151 method)": [[154, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_151.Sdynpy_UFF_Dataset_151.write_string"]], "read() (in module sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_151)": [[155, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_151.read"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_164": [[156, "module-sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_164"]], "sdynpy_uff_dataset_164 (class in sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_164)": [[157, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_164.Sdynpy_UFF_Dataset_164"]], "__init__() (sdynpy_uff_dataset_164 method)": [[157, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_164.Sdynpy_UFF_Dataset_164.__init__"]], "dataset_number (sdynpy_uff_dataset_164 property)": [[157, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_164.Sdynpy_UFF_Dataset_164.dataset_number"]], "from_uff_data_array() (sdynpy_uff_dataset_164 class method)": [[157, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_164.Sdynpy_UFF_Dataset_164.from_uff_data_array"]], "write_string() (sdynpy_uff_dataset_164 method)": [[157, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_164.Sdynpy_UFF_Dataset_164.write_string"]], "read() (in module sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_164)": [[158, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_164.read"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_1858": [[159, "module-sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_1858"]], "sdynpy_uff_dataset_1858 (class in sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_1858)": [[160, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_1858.Sdynpy_UFF_Dataset_1858"]], "__init__() (sdynpy_uff_dataset_1858 method)": [[160, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_1858.Sdynpy_UFF_Dataset_1858.__init__"]], "dataset_number (sdynpy_uff_dataset_1858 property)": [[160, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_1858.Sdynpy_UFF_Dataset_1858.dataset_number"]], "from_uff_data_array() (sdynpy_uff_dataset_1858 class method)": [[160, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_1858.Sdynpy_UFF_Dataset_1858.from_uff_data_array"]], "write_string() (sdynpy_uff_dataset_1858 method)": [[160, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_1858.Sdynpy_UFF_Dataset_1858.write_string"]], "is_abscissa_even() (in module sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_1858)": [[161, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_1858.is_abscissa_even"]], "read() (in module sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_1858)": [[162, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_1858.read"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2400": [[163, "module-sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2400"]], "sdynpy_uff_dataset_2400 (class in sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2400)": [[164, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2400.Sdynpy_UFF_Dataset_2400"]], "__init__() (sdynpy_uff_dataset_2400 method)": [[164, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2400.Sdynpy_UFF_Dataset_2400.__init__"]], "dataset_number (sdynpy_uff_dataset_2400 property)": [[164, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2400.Sdynpy_UFF_Dataset_2400.dataset_number"]], "from_uff_data_array() (sdynpy_uff_dataset_2400 class method)": [[164, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2400.Sdynpy_UFF_Dataset_2400.from_uff_data_array"]], "write_string() (sdynpy_uff_dataset_2400 method)": [[164, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2400.Sdynpy_UFF_Dataset_2400.write_string"]], "read() (in module sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2400)": [[165, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2400.read"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2411": [[166, "module-sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2411"]], "sdynpy_uff_dataset_2411 (class in sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2411)": [[167, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2411.Sdynpy_UFF_Dataset_2411"]], "__init__() (sdynpy_uff_dataset_2411 method)": [[167, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2411.Sdynpy_UFF_Dataset_2411.__init__"]], "dataset_number (sdynpy_uff_dataset_2411 property)": [[167, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2411.Sdynpy_UFF_Dataset_2411.dataset_number"]], "from_uff_data_array() (sdynpy_uff_dataset_2411 class method)": [[167, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2411.Sdynpy_UFF_Dataset_2411.from_uff_data_array"]], "write_string() (sdynpy_uff_dataset_2411 method)": [[167, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2411.Sdynpy_UFF_Dataset_2411.write_string"]], "read() (in module sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2411)": [[168, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2411.read"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2412": [[169, "module-sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2412"]], "sdynpy_uff_dataset_2412 (class in sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2412)": [[170, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2412.Sdynpy_UFF_Dataset_2412"]], "__init__() (sdynpy_uff_dataset_2412 method)": [[170, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2412.Sdynpy_UFF_Dataset_2412.__init__"]], "dataset_number (sdynpy_uff_dataset_2412 property)": [[170, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2412.Sdynpy_UFF_Dataset_2412.dataset_number"]], "from_uff_data_array() (sdynpy_uff_dataset_2412 class method)": [[170, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2412.Sdynpy_UFF_Dataset_2412.from_uff_data_array"]], "write_string() (sdynpy_uff_dataset_2412 method)": [[170, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2412.Sdynpy_UFF_Dataset_2412.write_string"]], "read() (in module sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2412)": [[171, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2412.read"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2420": [[172, "module-sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2420"]], "sdynpy_uff_dataset_2420 (class in sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2420)": [[173, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2420.Sdynpy_UFF_Dataset_2420"]], "__init__() (sdynpy_uff_dataset_2420 method)": [[173, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2420.Sdynpy_UFF_Dataset_2420.__init__"]], "dataset_number (sdynpy_uff_dataset_2420 property)": [[173, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2420.Sdynpy_UFF_Dataset_2420.dataset_number"]], "from_uff_data_array() (sdynpy_uff_dataset_2420 class method)": [[173, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2420.Sdynpy_UFF_Dataset_2420.from_uff_data_array"]], "write_string() (sdynpy_uff_dataset_2420 method)": [[173, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2420.Sdynpy_UFF_Dataset_2420.write_string"]], "read() (in module sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2420)": [[174, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_2420.read"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55": [[175, "module-sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55"]], "sdynpy_uff_dataset_55 (class in sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55)": [[176, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55.Sdynpy_UFF_Dataset_55"]], "__init__() (sdynpy_uff_dataset_55 method)": [[176, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55.Sdynpy_UFF_Dataset_55.__init__"]], "dataset_number (sdynpy_uff_dataset_55 property)": [[176, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55.Sdynpy_UFF_Dataset_55.dataset_number"]], "eigenvalue (sdynpy_uff_dataset_55 property)": [[176, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55.Sdynpy_UFF_Dataset_55.eigenvalue"]], "frequency (sdynpy_uff_dataset_55 property)": [[176, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55.Sdynpy_UFF_Dataset_55.frequency"]], "frequency_step_number (sdynpy_uff_dataset_55 property)": [[176, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55.Sdynpy_UFF_Dataset_55.frequency_step_number"]], "from_uff_data_array() (sdynpy_uff_dataset_55 class method)": [[176, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55.Sdynpy_UFF_Dataset_55.from_uff_data_array"]], "id_number (sdynpy_uff_dataset_55 property)": [[176, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55.Sdynpy_UFF_Dataset_55.id_number"]], "load_case_number (sdynpy_uff_dataset_55 property)": [[176, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55.Sdynpy_UFF_Dataset_55.load_case_number"]], "modal_a (sdynpy_uff_dataset_55 property)": [[176, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55.Sdynpy_UFF_Dataset_55.modal_a"]], "modal_b (sdynpy_uff_dataset_55 property)": [[176, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55.Sdynpy_UFF_Dataset_55.modal_b"]], "modal_hysteretic_damping (sdynpy_uff_dataset_55 property)": [[176, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55.Sdynpy_UFF_Dataset_55.modal_hysteretic_damping"]], "modal_mass (sdynpy_uff_dataset_55 property)": [[176, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55.Sdynpy_UFF_Dataset_55.modal_mass"]], "modal_viscous_damping (sdynpy_uff_dataset_55 property)": [[176, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55.Sdynpy_UFF_Dataset_55.modal_viscous_damping"]], "mode_number (sdynpy_uff_dataset_55 property)": [[176, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55.Sdynpy_UFF_Dataset_55.mode_number"]], "time (sdynpy_uff_dataset_55 property)": [[176, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55.Sdynpy_UFF_Dataset_55.time"]], "time_step_number (sdynpy_uff_dataset_55 property)": [[176, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55.Sdynpy_UFF_Dataset_55.time_step_number"]], "write_string() (sdynpy_uff_dataset_55 method)": [[176, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55.Sdynpy_UFF_Dataset_55.write_string"]], "read() (in module sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55)": [[177, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_55.read"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_58": [[178, "module-sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_58"]], "sdynpy_uff_dataset_58 (class in sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_58)": [[179, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_58.Sdynpy_UFF_Dataset_58"]], "__init__() (sdynpy_uff_dataset_58 method)": [[179, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_58.Sdynpy_UFF_Dataset_58.__init__"]], "dataset_number (sdynpy_uff_dataset_58 property)": [[179, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_58.Sdynpy_UFF_Dataset_58.dataset_number"]], "from_uff_data_array() (sdynpy_uff_dataset_58 class method)": [[179, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_58.Sdynpy_UFF_Dataset_58.from_uff_data_array"]], "write_string() (sdynpy_uff_dataset_58 method)": [[179, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_58.Sdynpy_UFF_Dataset_58.write_string"]], "is_abscissa_even() (in module sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_58)": [[180, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_58.is_abscissa_even"]], "read() (in module sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_58)": [[181, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_58.read"]], "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_82": [[182, "module-sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_82"]], "sdynpy_uff_dataset_82 (class in sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_82)": [[183, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_82.Sdynpy_UFF_Dataset_82"]], "__init__() (sdynpy_uff_dataset_82 method)": [[183, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_82.Sdynpy_UFF_Dataset_82.__init__"]], "dataset_number (sdynpy_uff_dataset_82 property)": [[183, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_82.Sdynpy_UFF_Dataset_82.dataset_number"]], "from_uff_data_array() (sdynpy_uff_dataset_82 class method)": [[183, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_82.Sdynpy_UFF_Dataset_82.from_uff_data_array"]], "write_string() (sdynpy_uff_dataset_82 method)": [[183, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_82.Sdynpy_UFF_Dataset_82.write_string"]], "read() (in module sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_82)": [[184, "sdynpy.fileio.sdynpy_uff_datasets.sdynpy_uff_dataset_82.read"]], "sdynpy.fileio.sdynpy_vic": [[185, "module-sdynpy.fileio.sdynpy_vic"]], "camera_matrix_from_vic_parameters() (in module sdynpy.fileio.sdynpy_vic)": [[186, "sdynpy.fileio.sdynpy_vic.camera_matrix_from_vic_parameters"]], "extract_vic_cal_parameters() (in module sdynpy.fileio.sdynpy_vic)": [[187, "sdynpy.fileio.sdynpy_vic.extract_vic_cal_parameters"]], "get_vic_camera_parameters() (in module sdynpy.fileio.sdynpy_vic)": [[188, "sdynpy.fileio.sdynpy_vic.get_vic_camera_parameters"]], "matrix_from_bryant_angles() (in module sdynpy.fileio.sdynpy_vic)": [[189, "sdynpy.fileio.sdynpy_vic.matrix_from_bryant_angles"]], "read_vic3d_mat_files() (in module sdynpy.fileio.sdynpy_vic)": [[190, "sdynpy.fileio.sdynpy_vic.read_vic3D_mat_files"]], "vic_angles_from_matrix() (in module sdynpy.fileio.sdynpy_vic)": [[191, "sdynpy.fileio.sdynpy_vic.vic_angles_from_matrix"]], "sdynpy.modal": [[192, "module-sdynpy.modal"]], "sdynpy.modal.sdynpy_ccmif": [[193, "module-sdynpy.modal.sdynpy_ccmif"]], "coloredcmif (class in sdynpy.modal.sdynpy_ccmif)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF"]], "__init__() (coloredcmif method)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF.__init__"]], "clear_plot() (coloredcmif method)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF.clear_plot"]], "clicked_point() (coloredcmif method)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF.clicked_point"]], "cluster_modes() (coloredcmif method)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF.cluster_modes"]], "collect_shapes() (coloredcmif method)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF.collect_shapes"]], "compute_and_plot_ccmif() (coloredcmif method)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF.compute_and_plot_ccmif"]], "compute_ccmif() (coloredcmif method)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF.compute_ccmif"]], "connect_callbacks() (coloredcmif method)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF.connect_callbacks"]], "disable_file() (coloredcmif method)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF.disable_file"]], "enable_file() (coloredcmif method)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF.enable_file"]], "enabled_selected_modes (coloredcmif property)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF.enabled_selected_modes"]], "enabled_shape_array (coloredcmif property)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF.enabled_shape_array"]], "export_figure() (coloredcmif method)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF.export_figure"]], "export_mode_table() (coloredcmif method)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF.export_mode_table"]], "load_file() (coloredcmif method)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF.load_file"]], "load_geometry() (coloredcmif method)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF.load_geometry"]], "load_progress() (coloredcmif method)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF.load_progress"]], "plot_ccmif() (coloredcmif method)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF.plot_ccmif"]], "plot_cmifs() (coloredcmif method)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF.plot_cmifs"]], "plot_frfs() (coloredcmif method)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF.plot_frfs"]], "plot_shapes() (coloredcmif method)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF.plot_shapes"]], "remove_file() (coloredcmif method)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF.remove_file"]], "replace_file() (coloredcmif method)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF.replace_file"]], "resynthesize() (coloredcmif method)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF.resynthesize"]], "save_progress() (coloredcmif method)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF.save_progress"]], "save_shapes() (coloredcmif method)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF.save_shapes"]], "set_mode_properties() (coloredcmif method)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF.set_mode_properties"]], "set_properties() (coloredcmif method)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF.set_properties"]], "toggle_auto_resynth() (coloredcmif method)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF.toggle_auto_resynth"]], "update_line_width() (coloredcmif method)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF.update_line_width"]], "update_selection() (coloredcmif method)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF.update_selection"]], "update_shape_list() (coloredcmif method)": [[194, "sdynpy.modal.sdynpy_ccmif.ColoredCMIF.update_shape_list"]], "propertiesdialog (class in sdynpy.modal.sdynpy_ccmif)": [[195, "sdynpy.modal.sdynpy_ccmif.PropertiesDialog"]], "__init__() (propertiesdialog method)": [[195, "sdynpy.modal.sdynpy_ccmif.PropertiesDialog.__init__"]], "show() (propertiesdialog static method)": [[195, "sdynpy.modal.sdynpy_ccmif.PropertiesDialog.show"]], "sdynpy.modal.sdynpy_modal_test": [[196, "module-sdynpy.modal.sdynpy_modal_test"]], "modaltest (class in sdynpy.modal.sdynpy_modal_test)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest"]], "__init__() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.__init__"]], "compute_resynthesized_frfs() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.compute_resynthesized_frfs"]], "compute_spectral_quantities() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.compute_spectral_quantities"]], "compute_spectral_quantities_signalprocessinggui() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.compute_spectral_quantities_SignalProcessingGUI"]], "create_documentation_latex() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.create_documentation_latex"]], "create_documentation_pptx() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.create_documentation_pptx"]], "create_documentation_word() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.create_documentation_word"]], "define_spectral_processing_parameters() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.define_spectral_processing_parameters"]], "edit_mode_comments() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.edit_mode_comments"]], "fit_modes_polypy() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.fit_modes_PolyPy"]], "fit_modes_smac() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.fit_modes_SMAC"]], "plot_cmif() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.plot_cmif"]], "plot_coherence_image() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.plot_coherence_image"]], "plot_deflection_shapes() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.plot_deflection_shapes"]], "plot_drive_point_frf_coherence() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.plot_drive_point_frf_coherence"]], "plot_drive_point_frfs() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.plot_drive_point_frfs"]], "plot_figures_for_documentation() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.plot_figures_for_documentation"]], "plot_mac() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.plot_mac"]], "plot_mmif() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.plot_mmif"]], "plot_modeshape() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.plot_modeshape"]], "plot_nmif() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.plot_nmif"]], "plot_psmif() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.plot_psmif"]], "plot_qmif() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.plot_qmif"]], "plot_reciprocal_frfs() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.plot_reciprocal_frfs"]], "plot_reference_autospectra() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.plot_reference_autospectra"]], "response_indices (modaltest property)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.response_indices"]], "retrieve_modes_polypy() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.retrieve_modes_PolyPy"]], "retrieve_modes_smac() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.retrieve_modes_SMAC"]], "retrieve_spectral_quantities_signalprocessinggui() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.retrieve_spectral_quantities_SignalProcessingGUI"]], "set_autopower_spectra() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.set_autopower_spectra"]], "set_channel_table() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.set_channel_table"]], "set_coherence() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.set_coherence"]], "set_fit_modes() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.set_fit_modes"]], "set_frfs() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.set_frfs"]], "set_geometry() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.set_geometry"]], "set_resynthesized_frfs() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.set_resynthesized_frfs"]], "set_rigid_body_shapes() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.set_rigid_body_shapes"]], "set_time_histories() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.set_time_histories"]], "set_units() (modaltest method)": [[197, "sdynpy.modal.sdynpy_modal_test.ModalTest.set_units"]], "read_modal_fit_data() (in module sdynpy.modal.sdynpy_modal_test)": [[198, "sdynpy.modal.sdynpy_modal_test.read_modal_fit_data"]], "sdynpy.modal.sdynpy_modeshape": [[199, "module-sdynpy.modal.sdynpy_modeshape"]], "all (shapeselection attribute)": [[200, "sdynpy.modal.sdynpy_modeshape.ShapeSelection.ALL"]], "drive_point_coefficient (shapeselection attribute)": [[200, "sdynpy.modal.sdynpy_modeshape.ShapeSelection.DRIVE_POINT_COEFFICIENT"]], "participation_factor (shapeselection attribute)": [[200, "sdynpy.modal.sdynpy_modeshape.ShapeSelection.PARTICIPATION_FACTOR"]], "shapeselection (class in sdynpy.modal.sdynpy_modeshape)": [[200, "sdynpy.modal.sdynpy_modeshape.ShapeSelection"]], "__init__() (shapeselection method)": [[200, "sdynpy.modal.sdynpy_modeshape.ShapeSelection.__init__"]], "compute_residues() (in module sdynpy.modal.sdynpy_modeshape)": [[201, "sdynpy.modal.sdynpy_modeshape.compute_residues"]], "compute_shapes() (in module sdynpy.modal.sdynpy_modeshape)": [[202, "sdynpy.modal.sdynpy_modeshape.compute_shapes"]], "compute_shapes_multireference() (in module sdynpy.modal.sdynpy_modeshape)": [[203, "sdynpy.modal.sdynpy_modeshape.compute_shapes_multireference"]], "generate_kernel_complex() (in module sdynpy.modal.sdynpy_modeshape)": [[204, "sdynpy.modal.sdynpy_modeshape.generate_kernel_complex"]], "generate_kernel_real() (in module sdynpy.modal.sdynpy_modeshape)": [[205, "sdynpy.modal.sdynpy_modeshape.generate_kernel_real"]], "stack_and_lstsq() (in module sdynpy.modal.sdynpy_modeshape)": [[206, "sdynpy.modal.sdynpy_modeshape.stack_and_lstsq"]], "sdynpy.modal.sdynpy_polypy": [[207, "module-sdynpy.modal.sdynpy_polypy"]], "polypy (class in sdynpy.modal.sdynpy_polypy)": [[208, "sdynpy.modal.sdynpy_polypy.PolyPy"]], "__init__() (polypy method)": [[208, "sdynpy.modal.sdynpy_polypy.PolyPy.__init__"]], "analyze_pole_convergence() (polypy method)": [[208, "sdynpy.modal.sdynpy_polypy.PolyPy.analyze_pole_convergence"]], "angular_frequencies (polypy property)": [[208, "sdynpy.modal.sdynpy_polypy.PolyPy.angular_frequencies"]], "compute_poles() (polypy method)": [[208, "sdynpy.modal.sdynpy_polypy.PolyPy.compute_poles"]], "compute_shapes() (polypy method)": [[208, "sdynpy.modal.sdynpy_polypy.PolyPy.compute_shapes"]], "frequencies (polypy property)": [[208, "sdynpy.modal.sdynpy_polypy.PolyPy.frequencies"]], "frequency_spacing (polypy property)": [[208, "sdynpy.modal.sdynpy_polypy.PolyPy.frequency_spacing"]], "plot_stability() (polypy method)": [[208, "sdynpy.modal.sdynpy_polypy.PolyPy.plot_stability"]], "pole_list_from_indices() (polypy method)": [[208, "sdynpy.modal.sdynpy_polypy.PolyPy.pole_list_from_indices"]], "polypy_gui (class in sdynpy.modal.sdynpy_polypy)": [[209, "sdynpy.modal.sdynpy_polypy.PolyPy_GUI"]], "__init__() (polypy_gui method)": [[209, "sdynpy.modal.sdynpy_polypy.PolyPy_GUI.__init__"]], "compute_shapes() (polypy_gui method)": [[209, "sdynpy.modal.sdynpy_polypy.PolyPy_GUI.compute_shapes"]], "compute_stabilization() (polypy_gui method)": [[209, "sdynpy.modal.sdynpy_polypy.PolyPy_GUI.compute_stabilization"]], "connect_callbacks() (polypy_gui method)": [[209, "sdynpy.modal.sdynpy_polypy.PolyPy_GUI.connect_callbacks"]], "create_cmif_window() (polypy_gui method)": [[209, "sdynpy.modal.sdynpy_polypy.PolyPy_GUI.create_cmif_window"]], "create_frf_window() (polypy_gui method)": [[209, "sdynpy.modal.sdynpy_polypy.PolyPy_GUI.create_frf_window"]], "create_mmif_window() (polypy_gui method)": [[209, "sdynpy.modal.sdynpy_polypy.PolyPy_GUI.create_mmif_window"]], "create_nmif_window() (polypy_gui method)": [[209, "sdynpy.modal.sdynpy_polypy.PolyPy_GUI.create_nmif_window"]], "create_qmif_window() (polypy_gui method)": [[209, "sdynpy.modal.sdynpy_polypy.PolyPy_GUI.create_qmif_window"]], "export_fit_data() (polypy_gui method)": [[209, "sdynpy.modal.sdynpy_polypy.PolyPy_GUI.export_fit_data"]], "frequencies (polypy_gui property)": [[209, "sdynpy.modal.sdynpy_polypy.PolyPy_GUI.frequencies"]], "frequency_slice (polypy_gui property)": [[209, "sdynpy.modal.sdynpy_polypy.PolyPy_GUI.frequency_slice"]], "load_geometry() (polypy_gui method)": [[209, "sdynpy.modal.sdynpy_polypy.PolyPy_GUI.load_geometry"]], "max_frequency (polypy_gui property)": [[209, "sdynpy.modal.sdynpy_polypy.PolyPy_GUI.max_frequency"]], "min_frequency (polypy_gui property)": [[209, "sdynpy.modal.sdynpy_polypy.PolyPy_GUI.min_frequency"]], "plot_shapes() (polypy_gui method)": [[209, "sdynpy.modal.sdynpy_polypy.PolyPy_GUI.plot_shapes"]], "pole_selection_changed() (polypy_gui method)": [[209, "sdynpy.modal.sdynpy_polypy.PolyPy_GUI.pole_selection_changed"]], "save_shapes() (polypy_gui method)": [[209, "sdynpy.modal.sdynpy_polypy.PolyPy_GUI.save_shapes"]], "set_geometry() (polypy_gui method)": [[209, "sdynpy.modal.sdynpy_polypy.PolyPy_GUI.set_geometry"]], "show_line_selectors() (polypy_gui method)": [[209, "sdynpy.modal.sdynpy_polypy.PolyPy_GUI.show_line_selectors"]], "update_data_plot() (polypy_gui method)": [[209, "sdynpy.modal.sdynpy_polypy.PolyPy_GUI.update_data_plot"]], "update_frequency_from_region() (polypy_gui method)": [[209, "sdynpy.modal.sdynpy_polypy.PolyPy_GUI.update_frequency_from_region"]], "update_max_frequency() (polypy_gui method)": [[209, "sdynpy.modal.sdynpy_polypy.PolyPy_GUI.update_max_frequency"]], "update_min_frequency() (polypy_gui method)": [[209, "sdynpy.modal.sdynpy_polypy.PolyPy_GUI.update_min_frequency"]], "update_resynthesis() (polypy_gui method)": [[209, "sdynpy.modal.sdynpy_polypy.PolyPy_GUI.update_resynthesis"]], "polypy_stability (class in sdynpy.modal.sdynpy_polypy)": [[210, "sdynpy.modal.sdynpy_polypy.PolyPy_Stability"]], "__init__() (polypy_stability method)": [[210, "sdynpy.modal.sdynpy_polypy.PolyPy_Stability.__init__"]], "connect_callbacks() (polypy_stability method)": [[210, "sdynpy.modal.sdynpy_polypy.PolyPy_Stability.connect_callbacks"]], "discard() (polypy_stability method)": [[210, "sdynpy.modal.sdynpy_polypy.PolyPy_Stability.discard"]], "mouseclicked() (polypy_stability method)": [[210, "sdynpy.modal.sdynpy_polypy.PolyPy_Stability.mouseClicked"]], "mousemoved() (polypy_stability method)": [[210, "sdynpy.modal.sdynpy_polypy.PolyPy_Stability.mouseMoved"]], "plot_poles() (polypy_stability method)": [[210, "sdynpy.modal.sdynpy_polypy.PolyPy_Stability.plot_poles"]], "update_stability_plot_views() (polypy_stability method)": [[210, "sdynpy.modal.sdynpy_polypy.PolyPy_Stability.update_stability_plot_views"]], "update_stabilization_plot() (polypy_stability method)": [[210, "sdynpy.modal.sdynpy_polypy.PolyPy_Stability.update_stabilization_plot"]], "sdynpy.modal.sdynpy_signal_processing_gui": [[211, "module-sdynpy.modal.sdynpy_signal_processing_gui"]], "signalprocessinggui (class in sdynpy.modal.sdynpy_signal_processing_gui)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI"]], "__init__() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.__init__"]], "acceptancechanged() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.acceptanceChanged"]], "analyzepolypy() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.analyzePolyPy"]], "analyzesmac() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.analyzeSMAC"]], "block_averaging_signals() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.block_averaging_signals"]], "block_data_range_signals() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.block_data_range_signals"]], "block_sampling_signals() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.block_sampling_signals"]], "compute() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.compute"]], "compute_triggers() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.compute_triggers"]], "connect_callbacks() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.connect_callbacks"]], "create_rois() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.create_rois"]], "endtimechanged() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.endTimeChanged"]], "framesizechanged() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.frameSizeChanged"]], "frametimechanged() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.frameTimeChanged"]], "frameschanged() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.framesChanged"]], "frequencylineschanged() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.frequencyLinesChanged"]], "frequencyspacingchanged() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.frequencySpacingChanged"]], "get_abscissa_index_range() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.get_abscissa_index_range"]], "hysteresischanged() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.hysteresisChanged"]], "initialize_ui() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.initialize_ui"]], "levelchanged() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.levelChanged"]], "loaddata() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.loadData"]], "loadgeometry() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.loadGeometry"]], "overlapchanged() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.overlapChanged"]], "overlapsampleschanged() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.overlapSamplesChanged"]], "plotdeflection() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.plotDeflection"]], "plottransient() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.plotTransient"]], "pretriggerchanged() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.pretriggerChanged"]], "referenceviewchanged() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.referenceViewChanged"]], "referenceschanged() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.referencesChanged"]], "reset_ui() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.reset_ui"]], "responseviewchanged() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.responseViewChanged"]], "responseschanged() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.responsesChanged"]], "saveautospectra() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.saveAutospectra"]], "savecoherence() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.saveCoherence"]], "savecrossspectra() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.saveCrossspectra"]], "savefrf() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.saveFRF"]], "savewindowedtimehistory() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.saveWindowedTimeHistory"]], "sendtoreference() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.sendToReference"]], "sendtoresponse() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.sendToResponse"]], "showautospectra() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.showAutospectra"]], "showcoherence() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.showCoherence"]], "showcrossspectra() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.showCrossspectra"]], "showfrf() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.showFRF"]], "showwindowedtimehistory() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.showWindowedTimeHistory"]], "starttimechanged() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.startTimeChanged"]], "toggleroi() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.toggleROI"]], "typechanged() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.typeChanged"]], "updatehysteresisfromreference() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.updateHysteresisFromReference"]], "updatehysteresisfromresponse() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.updateHysteresisFromResponse"]], "updatetimefromreference() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.updateTimeFromReference"]], "updatetimefromresponse() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.updateTimeFromResponse"]], "updatetriggerfromreference() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.updateTriggerFromReference"]], "updatetriggerfromresponse() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.updateTriggerFromResponse"]], "windowchanged() (signalprocessinggui method)": [[212, "sdynpy.modal.sdynpy_signal_processing_gui.SignalProcessingGUI.windowChanged"]], "sdynpy.modal.sdynpy_smac": [[213, "module-sdynpy.modal.sdynpy_smac"]], "addrootdialog (class in sdynpy.modal.sdynpy_smac)": [[214, "sdynpy.modal.sdynpy_smac.AddRootDialog"]], "__init__() (addrootdialog method)": [[214, "sdynpy.modal.sdynpy_smac.AddRootDialog.__init__"]], "add_root() (addrootdialog static method)": [[214, "sdynpy.modal.sdynpy_smac.AddRootDialog.add_root"]], "connect_callbacks() (addrootdialog method)": [[214, "sdynpy.modal.sdynpy_smac.AddRootDialog.connect_callbacks"]], "recompute_correlation() (addrootdialog method)": [[214, "sdynpy.modal.sdynpy_smac.AddRootDialog.recompute_correlation"]], "switch_log_plot() (addrootdialog method)": [[214, "sdynpy.modal.sdynpy_smac.AddRootDialog.switch_log_plot"]], "update_plot_range() (addrootdialog method)": [[214, "sdynpy.modal.sdynpy_smac.AddRootDialog.update_plot_range"]], "update_range_selectors() (addrootdialog method)": [[214, "sdynpy.modal.sdynpy_smac.AddRootDialog.update_range_selectors"]], "alternate (autofittypes attribute)": [[215, "sdynpy.modal.sdynpy_smac.AutoFitTypes.ALTERNATE"]], "autofittypes (class in sdynpy.modal.sdynpy_smac)": [[215, "sdynpy.modal.sdynpy_smac.AutoFitTypes"]], "paraboloid (autofittypes attribute)": [[215, "sdynpy.modal.sdynpy_smac.AutoFitTypes.PARABOLOID"]], "__init__() (autofittypes method)": [[215, "sdynpy.modal.sdynpy_smac.AutoFitTypes.__init__"]], "convergenceexception": [[216, "sdynpy.modal.sdynpy_smac.ConvergenceException"]], "smac (class in sdynpy.modal.sdynpy_smac)": [[217, "sdynpy.modal.sdynpy_smac.SMAC"]], "__init__() (smac method)": [[217, "sdynpy.modal.sdynpy_smac.SMAC.__init__"]], "angular_frequencies (smac property)": [[217, "sdynpy.modal.sdynpy_smac.SMAC.angular_frequencies"]], "autofit_root_alternate() (smac method)": [[217, "sdynpy.modal.sdynpy_smac.SMAC.autofit_root_alternate"]], "autofit_root_paraboloid() (smac method)": [[217, "sdynpy.modal.sdynpy_smac.SMAC.autofit_root_paraboloid"]], "autofit_roots() (smac method)": [[217, "sdynpy.modal.sdynpy_smac.SMAC.autofit_roots"]], "compute_correlation_matrix() (smac method)": [[217, "sdynpy.modal.sdynpy_smac.SMAC.compute_correlation_matrix"]], "compute_initial_rootlist() (smac method)": [[217, "sdynpy.modal.sdynpy_smac.SMAC.compute_initial_rootlist"]], "compute_pseudoinverse() (smac method)": [[217, "sdynpy.modal.sdynpy_smac.SMAC.compute_pseudoinverse"]], "compute_residues() (smac method)": [[217, "sdynpy.modal.sdynpy_smac.SMAC.compute_residues"]], "compute_shapes() (smac method)": [[217, "sdynpy.modal.sdynpy_smac.SMAC.compute_shapes"]], "find_peaks() (smac method)": [[217, "sdynpy.modal.sdynpy_smac.SMAC.find_peaks"]], "fit_damping() (smac method)": [[217, "sdynpy.modal.sdynpy_smac.SMAC.fit_damping"]], "fit_frequency() (smac method)": [[217, "sdynpy.modal.sdynpy_smac.SMAC.fit_frequency"]], "fit_paraboloid() (smac method)": [[217, "sdynpy.modal.sdynpy_smac.SMAC.fit_paraboloid"]], "frequencies (smac property)": [[217, "sdynpy.modal.sdynpy_smac.SMAC.frequencies"]], "frequency_spacing (smac property)": [[217, "sdynpy.modal.sdynpy_smac.SMAC.frequency_spacing"]], "frf_sdof_complex() (smac method)": [[217, "sdynpy.modal.sdynpy_smac.SMAC.frf_sdof_complex"]], "frf_sdof_real() (smac method)": [[217, "sdynpy.modal.sdynpy_smac.SMAC.frf_sdof_real"]], "get_num_roots() (smac method)": [[217, "sdynpy.modal.sdynpy_smac.SMAC.get_num_roots"]], "reference_coordinates (smac property)": [[217, "sdynpy.modal.sdynpy_smac.SMAC.reference_coordinates"]], "save() (smac method)": [[217, "sdynpy.modal.sdynpy_smac.SMAC.save"]], "smac_gui (class in sdynpy.modal.sdynpy_smac)": [[218, "sdynpy.modal.sdynpy_smac.SMAC_GUI"]], "__init__() (smac_gui method)": [[218, "sdynpy.modal.sdynpy_smac.SMAC_GUI.__init__"]], "add_initial_root() (smac_gui method)": [[218, "sdynpy.modal.sdynpy_smac.SMAC_GUI.add_initial_root"]], "add_root() (smac_gui method)": [[218, "sdynpy.modal.sdynpy_smac.SMAC_GUI.add_root"]], "autofit_roots() (smac_gui method)": [[218, "sdynpy.modal.sdynpy_smac.SMAC_GUI.autofit_roots"]], "compute_correlation_matrix() (smac_gui method)": [[218, "sdynpy.modal.sdynpy_smac.SMAC_GUI.compute_correlation_matrix"]], "compute_pseudoinverse() (smac_gui method)": [[218, "sdynpy.modal.sdynpy_smac.SMAC_GUI.compute_pseudoinverse"]], "compute_shapes() (smac_gui method)": [[218, "sdynpy.modal.sdynpy_smac.SMAC_GUI.compute_shapes"]], "confirm_initial_roots_for_autofit() (smac_gui method)": [[218, "sdynpy.modal.sdynpy_smac.SMAC_GUI.confirm_initial_roots_for_autofit"]], "connect_callbacks() (smac_gui method)": [[218, "sdynpy.modal.sdynpy_smac.SMAC_GUI.connect_callbacks"]], "delete_initial_roots() (smac_gui method)": [[218, "sdynpy.modal.sdynpy_smac.SMAC_GUI.delete_initial_roots"]], "delete_roots() (smac_gui method)": [[218, "sdynpy.modal.sdynpy_smac.SMAC_GUI.delete_roots"]], "export_mode_table() (smac_gui method)": [[218, "sdynpy.modal.sdynpy_smac.SMAC_GUI.export_mode_table"]], "load_geometry() (smac_gui method)": [[218, "sdynpy.modal.sdynpy_smac.SMAC_GUI.load_geometry"]], "load_shapes() (smac_gui method)": [[218, "sdynpy.modal.sdynpy_smac.SMAC_GUI.load_shapes"]], "paint_markers() (smac_gui method)": [[218, "sdynpy.modal.sdynpy_smac.SMAC_GUI.paint_markers"]], "plot_mac() (smac_gui method)": [[218, "sdynpy.modal.sdynpy_smac.SMAC_GUI.plot_mac"]], "plot_shapes() (smac_gui method)": [[218, "sdynpy.modal.sdynpy_smac.SMAC_GUI.plot_shapes"]], "refind_peaks() (smac_gui method)": [[218, "sdynpy.modal.sdynpy_smac.SMAC_GUI.refind_peaks"]], "save_shapes() (smac_gui method)": [[218, "sdynpy.modal.sdynpy_smac.SMAC_GUI.save_shapes"]], "update_coefficient_and_refind() (smac_gui method)": [[218, "sdynpy.modal.sdynpy_smac.SMAC_GUI.update_coefficient_and_refind"]], "update_crosshairs() (smac_gui method)": [[218, "sdynpy.modal.sdynpy_smac.SMAC_GUI.update_crosshairs"]], "update_frequency_line_label() (smac_gui method)": [[218, "sdynpy.modal.sdynpy_smac.SMAC_GUI.update_frequency_line_label"]], "update_initial_rootlist_tab() (smac_gui method)": [[218, "sdynpy.modal.sdynpy_smac.SMAC_GUI.update_initial_rootlist_tab"]], "update_rootlist_table() (smac_gui method)": [[218, "sdynpy.modal.sdynpy_smac.SMAC_GUI.update_rootlist_table"]], "update_selector_and_refind() (smac_gui method)": [[218, "sdynpy.modal.sdynpy_smac.SMAC_GUI.update_selector_and_refind"]], "correlation_coefficient() (in module sdynpy.modal.sdynpy_smac)": [[219, "sdynpy.modal.sdynpy_smac.correlation_coefficient"]], "sdynpy.signal_processing": [[220, "module-sdynpy.signal_processing"]], "sdynpy.signal_processing.sdynpy_camera": [[221, "module-sdynpy.signal_processing.sdynpy_camera"]], "calibration_linear_estimate() (in module sdynpy.signal_processing.sdynpy_camera)": [[222, "sdynpy.signal_processing.sdynpy_camera.calibration_linear_estimate"]], "camera_derivative_matrix() (in module sdynpy.signal_processing.sdynpy_camera)": [[223, "sdynpy.signal_processing.sdynpy_camera.camera_derivative_matrix"]], "camera_matrix_from_image() (in module sdynpy.signal_processing.sdynpy_camera)": [[224, "sdynpy.signal_processing.sdynpy_camera.camera_matrix_from_image"]], "compute_pixel_displacement() (in module sdynpy.signal_processing.sdynpy_camera)": [[225, "sdynpy.signal_processing.sdynpy_camera.compute_pixel_displacement"]], "compute_pixel_position() (in module sdynpy.signal_processing.sdynpy_camera)": [[226, "sdynpy.signal_processing.sdynpy_camera.compute_pixel_position"]], "decomposep() (in module sdynpy.signal_processing.sdynpy_camera)": [[227, "sdynpy.signal_processing.sdynpy_camera.decomposeP"]], "distort_points() (in module sdynpy.signal_processing.sdynpy_camera)": [[228, "sdynpy.signal_processing.sdynpy_camera.distort_points"]], "homogeneous_coordinates() (in module sdynpy.signal_processing.sdynpy_camera)": [[229, "sdynpy.signal_processing.sdynpy_camera.homogeneous_coordinates"]], "optimize_calibration() (in module sdynpy.signal_processing.sdynpy_camera)": [[230, "sdynpy.signal_processing.sdynpy_camera.optimize_calibration"]], "point_on_pixel() (in module sdynpy.signal_processing.sdynpy_camera)": [[231, "sdynpy.signal_processing.sdynpy_camera.point_on_pixel"]], "reconstruct_scene_from_calibration_parameters() (in module sdynpy.signal_processing.sdynpy_camera)": [[232, "sdynpy.signal_processing.sdynpy_camera.reconstruct_scene_from_calibration_parameters"]], "unhomogeneous_coordinates() (in module sdynpy.signal_processing.sdynpy_camera)": [[233, "sdynpy.signal_processing.sdynpy_camera.unhomogeneous_coordinates"]], "sdynpy.signal_processing.sdynpy_complex": [[234, "module-sdynpy.signal_processing.sdynpy_complex"]], "collapse_complex_to_real() (in module sdynpy.signal_processing.sdynpy_complex)": [[235, "sdynpy.signal_processing.sdynpy_complex.collapse_complex_to_real"]], "sdynpy.signal_processing.sdynpy_correlation": [[236, "module-sdynpy.signal_processing.sdynpy_correlation"]], "frac() (in module sdynpy.signal_processing.sdynpy_correlation)": [[237, "sdynpy.signal_processing.sdynpy_correlation.frac"]], "mac() (in module sdynpy.signal_processing.sdynpy_correlation)": [[238, "sdynpy.signal_processing.sdynpy_correlation.mac"]], "matrix_plot() (in module sdynpy.signal_processing.sdynpy_correlation)": [[239, "sdynpy.signal_processing.sdynpy_correlation.matrix_plot"]], "msf() (in module sdynpy.signal_processing.sdynpy_correlation)": [[240, "sdynpy.signal_processing.sdynpy_correlation.msf"]], "orthog() (in module sdynpy.signal_processing.sdynpy_correlation)": [[241, "sdynpy.signal_processing.sdynpy_correlation.orthog"]], "trac() (in module sdynpy.signal_processing.sdynpy_correlation)": [[242, "sdynpy.signal_processing.sdynpy_correlation.trac"]], "sdynpy.signal_processing.sdynpy_cpsd": [[243, "module-sdynpy.signal_processing.sdynpy_cpsd"]], "cpsd() (in module sdynpy.signal_processing.sdynpy_cpsd)": [[244, "sdynpy.signal_processing.sdynpy_cpsd.cpsd"]], "cpsd_autospectra() (in module sdynpy.signal_processing.sdynpy_cpsd)": [[245, "sdynpy.signal_processing.sdynpy_cpsd.cpsd_autospectra"]], "cpsd_coherence() (in module sdynpy.signal_processing.sdynpy_cpsd)": [[246, "sdynpy.signal_processing.sdynpy_cpsd.cpsd_coherence"]], "cpsd_from_coh_phs() (in module sdynpy.signal_processing.sdynpy_cpsd)": [[247, "sdynpy.signal_processing.sdynpy_cpsd.cpsd_from_coh_phs"]], "cpsd_phase() (in module sdynpy.signal_processing.sdynpy_cpsd)": [[248, "sdynpy.signal_processing.sdynpy_cpsd.cpsd_phase"]], "cpsd_to_time_history() (in module sdynpy.signal_processing.sdynpy_cpsd)": [[249, "sdynpy.signal_processing.sdynpy_cpsd.cpsd_to_time_history"]], "db_pow() (in module sdynpy.signal_processing.sdynpy_cpsd)": [[250, "sdynpy.signal_processing.sdynpy_cpsd.dB_pow"]], "db2scale() (in module sdynpy.signal_processing.sdynpy_cpsd)": [[251, "sdynpy.signal_processing.sdynpy_cpsd.db2scale"]], "match_coherence_phase() (in module sdynpy.signal_processing.sdynpy_cpsd)": [[252, "sdynpy.signal_processing.sdynpy_cpsd.match_coherence_phase"]], "nth_octave_freqs() (in module sdynpy.signal_processing.sdynpy_cpsd)": [[253, "sdynpy.signal_processing.sdynpy_cpsd.nth_octave_freqs"]], "plot_asds() (in module sdynpy.signal_processing.sdynpy_cpsd)": [[254, "sdynpy.signal_processing.sdynpy_cpsd.plot_asds"]], "plot_cpsd_error() (in module sdynpy.signal_processing.sdynpy_cpsd)": [[255, "sdynpy.signal_processing.sdynpy_cpsd.plot_cpsd_error"]], "rms() (in module sdynpy.signal_processing.sdynpy_cpsd)": [[256, "sdynpy.signal_processing.sdynpy_cpsd.rms"]], "rms_csd() (in module sdynpy.signal_processing.sdynpy_cpsd)": [[257, "sdynpy.signal_processing.sdynpy_cpsd.rms_csd"]], "shaped_psd() (in module sdynpy.signal_processing.sdynpy_cpsd)": [[258, "sdynpy.signal_processing.sdynpy_cpsd.shaped_psd"]], "trace() (in module sdynpy.signal_processing.sdynpy_cpsd)": [[259, "sdynpy.signal_processing.sdynpy_cpsd.trace"]], "sdynpy.signal_processing.sdynpy_frf": [[260, "module-sdynpy.signal_processing.sdynpy_frf"]], "delay_signal() (in module sdynpy.signal_processing.sdynpy_frf)": [[261, "sdynpy.signal_processing.sdynpy_frf.delay_signal"]], "fft2frf() (in module sdynpy.signal_processing.sdynpy_frf)": [[262, "sdynpy.signal_processing.sdynpy_frf.fft2frf"]], "modes2frf() (in module sdynpy.signal_processing.sdynpy_frf)": [[263, "sdynpy.signal_processing.sdynpy_frf.modes2frf"]], "plot() (in module sdynpy.signal_processing.sdynpy_frf)": [[264, "sdynpy.signal_processing.sdynpy_frf.plot"]], "sysmat2frf() (in module sdynpy.signal_processing.sdynpy_frf)": [[265, "sdynpy.signal_processing.sdynpy_frf.sysmat2frf"]], "timedata2frf() (in module sdynpy.signal_processing.sdynpy_frf)": [[266, "sdynpy.signal_processing.sdynpy_frf.timedata2frf"]], "sdynpy.signal_processing.sdynpy_frf_inverse": [[267, "module-sdynpy.signal_processing.sdynpy_frf_inverse"]], "compute_tikhonov_modified_singular_values() (in module sdynpy.signal_processing.sdynpy_frf_inverse)": [[268, "sdynpy.signal_processing.sdynpy_frf_inverse.compute_tikhonov_modified_singular_values"]], "frf_inverse() (in module sdynpy.signal_processing.sdynpy_frf_inverse)": [[269, "sdynpy.signal_processing.sdynpy_frf_inverse.frf_inverse"]], "pinv_by_tikhonov() (in module sdynpy.signal_processing.sdynpy_frf_inverse)": [[270, "sdynpy.signal_processing.sdynpy_frf_inverse.pinv_by_tikhonov"]], "pinv_by_truncation() (in module sdynpy.signal_processing.sdynpy_frf_inverse)": [[271, "sdynpy.signal_processing.sdynpy_frf_inverse.pinv_by_truncation"]], "sdynpy.signal_processing.sdynpy_generator": [[272, "module-sdynpy.signal_processing.sdynpy_generator"]], "burst_random() (in module sdynpy.signal_processing.sdynpy_generator)": [[273, "sdynpy.signal_processing.sdynpy_generator.burst_random"]], "chirp() (in module sdynpy.signal_processing.sdynpy_generator)": [[274, "sdynpy.signal_processing.sdynpy_generator.chirp"]], "pseudorandom() (in module sdynpy.signal_processing.sdynpy_generator)": [[275, "sdynpy.signal_processing.sdynpy_generator.pseudorandom"]], "pulse() (in module sdynpy.signal_processing.sdynpy_generator)": [[276, "sdynpy.signal_processing.sdynpy_generator.pulse"]], "ramp_envelope() (in module sdynpy.signal_processing.sdynpy_generator)": [[277, "sdynpy.signal_processing.sdynpy_generator.ramp_envelope"]], "random() (in module sdynpy.signal_processing.sdynpy_generator)": [[278, "sdynpy.signal_processing.sdynpy_generator.random"]], "sine() (in module sdynpy.signal_processing.sdynpy_generator)": [[279, "sdynpy.signal_processing.sdynpy_generator.sine"]], "sine_sweep() (in module sdynpy.signal_processing.sdynpy_generator)": [[280, "sdynpy.signal_processing.sdynpy_generator.sine_sweep"]], "sdynpy.signal_processing.sdynpy_geometry_fitting": [[281, "module-sdynpy.signal_processing.sdynpy_geometry_fitting"]], "cone_error_fn_fixed_angle() (in module sdynpy.signal_processing.sdynpy_geometry_fitting)": [[282, "sdynpy.signal_processing.sdynpy_geometry_fitting.cone_error_fn_fixed_angle"]], "cone_error_fn_free_angle() (in module sdynpy.signal_processing.sdynpy_geometry_fitting)": [[283, "sdynpy.signal_processing.sdynpy_geometry_fitting.cone_error_fn_free_angle"]], "cone_fit() (in module sdynpy.signal_processing.sdynpy_geometry_fitting)": [[284, "sdynpy.signal_processing.sdynpy_geometry_fitting.cone_fit"]], "create_cone() (in module sdynpy.signal_processing.sdynpy_geometry_fitting)": [[285, "sdynpy.signal_processing.sdynpy_geometry_fitting.create_cone"]], "cylinder_fit() (in module sdynpy.signal_processing.sdynpy_geometry_fitting)": [[286, "sdynpy.signal_processing.sdynpy_geometry_fitting.cylinder_fit"]], "distance_point_line() (in module sdynpy.signal_processing.sdynpy_geometry_fitting)": [[287, "sdynpy.signal_processing.sdynpy_geometry_fitting.distance_point_line"]], "distance_point_plane() (in module sdynpy.signal_processing.sdynpy_geometry_fitting)": [[288, "sdynpy.signal_processing.sdynpy_geometry_fitting.distance_point_plane"]], "fit_cone_fixed_angle() (in module sdynpy.signal_processing.sdynpy_geometry_fitting)": [[289, "sdynpy.signal_processing.sdynpy_geometry_fitting.fit_cone_fixed_angle"]], "fit_cylinder() (in module sdynpy.signal_processing.sdynpy_geometry_fitting)": [[290, "sdynpy.signal_processing.sdynpy_geometry_fitting.fit_cylinder"]], "fit_line_point_cloud() (in module sdynpy.signal_processing.sdynpy_geometry_fitting)": [[291, "sdynpy.signal_processing.sdynpy_geometry_fitting.fit_line_point_cloud"]], "sdynpy.signal_processing.sdynpy_harmonic": [[292, "module-sdynpy.signal_processing.sdynpy_harmonic"]], "harmonic_mag_phase() (in module sdynpy.signal_processing.sdynpy_harmonic)": [[293, "sdynpy.signal_processing.sdynpy_harmonic.harmonic_mag_phase"]], "sdynpy.signal_processing.sdynpy_integration": [[294, "module-sdynpy.signal_processing.sdynpy_integration"]], "mck_incomplete_to_statespace() (in module sdynpy.signal_processing.sdynpy_integration)": [[295, "sdynpy.signal_processing.sdynpy_integration.MCK_incomplete_to_StateSpace"]], "mck_to_statespace() (in module sdynpy.signal_processing.sdynpy_integration)": [[296, "sdynpy.signal_processing.sdynpy_integration.MCK_to_StateSpace"]], "frequency_domain_differentiation() (in module sdynpy.signal_processing.sdynpy_integration)": [[297, "sdynpy.signal_processing.sdynpy_integration.frequency_domain_differentiation"]], "integrate_mck() (in module sdynpy.signal_processing.sdynpy_integration)": [[298, "sdynpy.signal_processing.sdynpy_integration.integrate_MCK"]], "integrate_modes() (in module sdynpy.signal_processing.sdynpy_integration)": [[299, "sdynpy.signal_processing.sdynpy_integration.integrate_modes"]], "modal_parameters_to_mck() (in module sdynpy.signal_processing.sdynpy_integration)": [[300, "sdynpy.signal_processing.sdynpy_integration.modal_parameters_to_MCK"]], "sdynpy.signal_processing.sdynpy_lrm": [[301, "module-sdynpy.signal_processing.sdynpy_lrm"]], "frf_local_model() (in module sdynpy.signal_processing.sdynpy_lrm)": [[302, "sdynpy.signal_processing.sdynpy_lrm.frf_local_model"]], "sdynpy.signal_processing.sdynpy_rotation": [[303, "module-sdynpy.signal_processing.sdynpy_rotation"]], "r() (in module sdynpy.signal_processing.sdynpy_rotation)": [[304, "sdynpy.signal_processing.sdynpy_rotation.R"]], "cross_mat() (in module sdynpy.signal_processing.sdynpy_rotation)": [[305, "sdynpy.signal_processing.sdynpy_rotation.cross_mat"]], "cross_mat_vectorized() (in module sdynpy.signal_processing.sdynpy_rotation)": [[306, "sdynpy.signal_processing.sdynpy_rotation.cross_mat_vectorized"]], "lstsq_rigid_transform() (in module sdynpy.signal_processing.sdynpy_rotation)": [[307, "sdynpy.signal_processing.sdynpy_rotation.lstsq_rigid_transform"]], "matrix_to_rodrigues() (in module sdynpy.signal_processing.sdynpy_rotation)": [[308, "sdynpy.signal_processing.sdynpy_rotation.matrix_to_rodrigues"]], "quaternion_to_rotation_matrix() (in module sdynpy.signal_processing.sdynpy_rotation)": [[309, "sdynpy.signal_processing.sdynpy_rotation.quaternion_to_rotation_matrix"]], "rodrigues_to_matrix() (in module sdynpy.signal_processing.sdynpy_rotation)": [[310, "sdynpy.signal_processing.sdynpy_rotation.rodrigues_to_matrix"]], "sdynpy.signal_processing.sdynpy_srs": [[311, "module-sdynpy.signal_processing.sdynpy_srs"]], "loginterp() (in module sdynpy.signal_processing.sdynpy_srs)": [[312, "sdynpy.signal_processing.sdynpy_srs.loginterp"]], "octspace() (in module sdynpy.signal_processing.sdynpy_srs)": [[313, "sdynpy.signal_processing.sdynpy_srs.octspace"]], "optimization_callback() (in module sdynpy.signal_processing.sdynpy_srs)": [[314, "sdynpy.signal_processing.sdynpy_srs.optimization_callback"]], "optimization_error_function() (in module sdynpy.signal_processing.sdynpy_srs)": [[315, "sdynpy.signal_processing.sdynpy_srs.optimization_error_function"]], "sdof_filter() (in module sdynpy.signal_processing.sdynpy_srs)": [[316, "sdynpy.signal_processing.sdynpy_srs.sdof_filter"]], "sdof_free_decay_peak_response() (in module sdynpy.signal_processing.sdynpy_srs)": [[317, "sdynpy.signal_processing.sdynpy_srs.sdof_free_decay_peak_response"]], "sdof_ramp_invariant_filter_weights() (in module sdynpy.signal_processing.sdynpy_srs)": [[318, "sdynpy.signal_processing.sdynpy_srs.sdof_ramp_invariant_filter_weights"]], "srs() (in module sdynpy.signal_processing.sdynpy_srs)": [[319, "sdynpy.signal_processing.sdynpy_srs.srs"]], "sum_decayed_sines() (in module sdynpy.signal_processing.sdynpy_srs)": [[320, "sdynpy.signal_processing.sdynpy_srs.sum_decayed_sines"]], "sum_decayed_sines_compensating_pulse_parameters() (in module sdynpy.signal_processing.sdynpy_srs)": [[321, "sdynpy.signal_processing.sdynpy_srs.sum_decayed_sines_compensating_pulse_parameters"]], "sum_decayed_sines_displacement_velocity() (in module sdynpy.signal_processing.sdynpy_srs)": [[322, "sdynpy.signal_processing.sdynpy_srs.sum_decayed_sines_displacement_velocity"]], "sum_decayed_sines_minimize() (in module sdynpy.signal_processing.sdynpy_srs)": [[323, "sdynpy.signal_processing.sdynpy_srs.sum_decayed_sines_minimize"]], "sum_decayed_sines_reconstruction() (in module sdynpy.signal_processing.sdynpy_srs)": [[324, "sdynpy.signal_processing.sdynpy_srs.sum_decayed_sines_reconstruction"]], "sum_decayed_sines_reconstruction_with_compensation() (in module sdynpy.signal_processing.sdynpy_srs)": [[325, "sdynpy.signal_processing.sdynpy_srs.sum_decayed_sines_reconstruction_with_compensation"]]}})